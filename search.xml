<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[58. Length of Last Word]]></title>
      <url>http://thinerzq.com/2016/09/09/leetcode/58-Length-of-Last-Word/</url>
      <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>Given a string s consists of upper/lower-case alphabets and empty space characters <code>‘ ‘</code>, return the length of last word in the string.</p>
<p>If the last word does not exist, return 0.</p>
<p>Note: A word is defined as a character sequence consists of non-space characters only.</p>
<p>For example,<br>Given <code>s = “Hello World”</code>,<br>return <code>5</code>.</p>
<a id="more"></a>
<h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题是java太好写了吗？？</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created with IntelliJ IDEA</div><div class="line"> * Date: 2016/3/19</div><div class="line"> * Time: 16:11</div><div class="line"> * User: ThinerZQ</div><div class="line"> * GitHub: &lt;a&gt;https://github.com/ThinerZQ&lt;/a&gt;</div><div class="line"> * Blog: &lt;a&gt;http://www.thinerzq.me&lt;/a&gt;</div><div class="line"> * Email: 601097836@qq.com</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LengthofLastWord_58</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLastWord</span><span class="params">(String s)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.trim().length() == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            String[] strings = s.split(<span class="string">" "</span>);</div><div class="line">            <span class="keyword">return</span> strings[strings.length - <span class="number">1</span>].length();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[20. Valid Parentheses]]></title>
      <url>http://thinerzq.com/2016/09/09/leetcode/20-Valid-Parentheses/</url>
      <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>Given a string containing just the characters <code>‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’</code>, determine if the input string is valid.</p>
<p>The brackets must close in the correct order, <code>“()” and “()[]{}” are all valid but “(]” and “([)]”</code> are not.</p>
<a id="more"></a>
<h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>字符串里面只包含括号，使用出栈入栈判断揪心了。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Stack;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created with IntelliJ IDEA</div><div class="line"> * Date: 2016/3/18</div><div class="line"> * Time: 22:32</div><div class="line"> * User: ThinerZQ</div><div class="line"> * GitHub: &lt;a&gt;https://github.com/ThinerZQ&lt;/a&gt;</div><div class="line"> * Blog: &lt;a&gt;http://www.thinerzq.me&lt;/a&gt;</div><div class="line"> * Email: 601097836@qq.com</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidParentheses_20</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="comment">//括号问题当然要使用栈啦</span></div><div class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;Character&gt;();</div><div class="line">        <span class="keyword">char</span>[] characters = s.toCharArray();</div><div class="line">        <span class="comment">//对每一个字符</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : characters) &#123;</div><div class="line">            <span class="keyword">if</span> (c == <span class="string">'('</span> || c == <span class="string">'&#123;'</span> || c == <span class="string">'['</span>) &#123;</div><div class="line">                <span class="comment">//如果 c 是括号类‘左’字符入栈</span></div><div class="line">                stack.push(c);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">')'</span> &amp;&amp; !stack.isEmpty() &amp;&amp; stack.peek() == <span class="string">'('</span>) &#123;</div><div class="line">                <span class="comment">//如果 c 是括号类 ‘右’ 字符，并且栈顶是 c对应的 ‘左’字符，匹配上了，pop</span></div><div class="line">                stack.pop();</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'&#125;'</span> &amp;&amp; !stack.isEmpty() &amp;&amp; stack.peek() ==<span class="string">'&#123;'</span>) &#123;</div><div class="line">                stack.pop();</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">']'</span> &amp;&amp; !stack.isEmpty() &amp;&amp; stack.peek()==<span class="string">'['</span>) &#123;</div><div class="line">                stack.pop();</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> stack.isEmpty();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[19. Remove Nth Node From End of List]]></title>
      <url>http://thinerzq.com/2016/09/09/leetcode/19-Remove-Nth-Node-From-End-of-List/</url>
      <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>Given a linked list, remove the nth node from the end of list and return its head.</p>
<p>For example, Given linked list:</p>
<pre>   
     <b>1-&gt;2-&gt;3-&gt;4-&gt;5</b>
</pre>

<p> and n=2, After removing the second node from the end , the linked list becomes<br> <pre>1-&gt;2-&gt;3-&gt;5.<br></pre></p>
<p>Note:<br>Given n will always be valid.<br>Try to do this in one pass.</p>
<a id="more"></a>
<h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>使用两个指针，第一个指针先移动n步，然后两个指针再同时移动直到第一个指针到达末尾，这时候第二个指针所在的位置就是到数第n位</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created with IntelliJ IDEA</div><div class="line"> * Date: 2016/3/19</div><div class="line"> * Time: 15:50</div><div class="line"> * User: ThinerZQ</div><div class="line"> * GitHub: &lt;a&gt;https://github.com/ThinerZQ&lt;/a&gt;</div><div class="line"> * Blog: &lt;a&gt;http://www.thinerzq.me&lt;/a&gt;</div><div class="line"> * Email: 601097836@qq.com</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoveNthNodeFromEndofList_19</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="comment">//null判断</span></div><div class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//定义两个节点</span></div><div class="line">        ListNode next = head;</div><div class="line">        ListNode pre = head;</div><div class="line">        <span class="comment">//先计算出顺数第n个的位置</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            next = next.next;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//如果顺数第n的位置为null, 标示到数第n个元素是head, 将head移除。</span></div><div class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</div><div class="line">            head = head.next;</div><div class="line">            <span class="keyword">return</span> head;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//顺数第n为不为null,并行移动向后pre 和next两个为止，直到next为空，表明：pre移到了倒数第n为的位置</span></div><div class="line">        <span class="keyword">while</span> (next.next != <span class="keyword">null</span>) &#123;</div><div class="line">            next = next.next;</div><div class="line">            pre = pre.next;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//位置交换，断开到数第n为的节点</span></div><div class="line">        ListNode temp = pre.next.next;</div><div class="line">        pre.next = temp;</div><div class="line">        <span class="keyword">return</span> head;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> val;</div><div class="line">        ListNode next;</div><div class="line"></div><div class="line">        ListNode(<span class="keyword">int</span> x) &#123;</div><div class="line">            val = x;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[111.Minimum Depth of Binary Tree]]></title>
      <url>http://thinerzq.com/2016/09/09/leetcode/111-Minimum-Depth-of-Binary-Tree/</url>
      <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>Given a binary tree, find its minimum depth.</p>
<p>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.<br><a id="more"></a></p>
<h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>二叉树层次遍历的变种，使用层次遍历解决即可</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created with IntelliJ IDEA</div><div class="line"> * Date: 2016/3/4</div><div class="line"> * Time: 21:43</div><div class="line"> * User: ThinerZQ</div><div class="line"> * GitHub: &lt;a&gt;https://github.com/ThinerZQ&lt;/a&gt;</div><div class="line"> * Blog: &lt;a&gt;http://www.thinerzq.me&lt;/a&gt;</div><div class="line"> * Email: 601097836@qq.com</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinimumDepthofBinaryTree_111</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</div><div class="line">        queue.add(root);</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</div><div class="line">            ArrayList&lt;TreeNode&gt; treeNodes = <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</div><div class="line">            Iterator&lt;TreeNode&gt; iterator = queue.iterator();</div><div class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">                TreeNode temp = iterator.next();</div><div class="line">                treeNodes.add(temp);</div><div class="line">            &#125;</div><div class="line">            queue.clear();</div><div class="line">            count++;</div><div class="line">            <span class="keyword">for</span> (TreeNode treeNode : treeNodes) &#123;</div><div class="line">                TreeNode temp = treeNode;</div><div class="line">                <span class="keyword">if</span> (temp.left != <span class="keyword">null</span>) &#123;</div><div class="line">                    queue.add(temp.left);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (temp.right != <span class="keyword">null</span>) &#123;</div><div class="line">                    queue.add(temp.right);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (temp.left == <span class="keyword">null</span> &amp;&amp; temp.right == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> count;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> val;</div><div class="line">        TreeNode left;</div><div class="line">        TreeNode right;</div><div class="line"></div><div class="line">        TreeNode(<span class="keyword">int</span> x) &#123;</div><div class="line">            val = x;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[112. Path Sum]]></title>
      <url>http://thinerzq.com/2016/09/09/leetcode/112-Path%20Sum/</url>
      <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.</p>
<p>For example:<br>Given the below binary tree and <code>sum = 22</code>,</p>
<p><pre>              5<br>             / \<br>            4   8<br>           /   / \<br>          11  13  4<br>         /  \      \<br>        7    2      1<br></pre><br>return true, as there exist a root-to-leaf path <code>5-&gt;4-&gt;11-&gt;2</code> which sum is 22.<br><a id="more"></a></p>
<h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>本题主要考察递归的用法，</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">**</div><div class="line"> * Created with IntelliJ IDEA</div><div class="line"> * Date: <span class="number">2016</span>/<span class="number">3</span>/<span class="number">4</span></div><div class="line"> * Time: <span class="number">21</span>:<span class="number">00</span></div><div class="line"> * User: ThinerZQ</div><div class="line"> * GitHub: &lt;a&gt;https:<span class="comment">//github.com/ThinerZQ&lt;/a&gt;</span></div><div class="line"> * Blog: &lt;a&gt;http:<span class="comment">//www.thinerzq.me&lt;/a&gt;</span></div><div class="line"> * Email: <span class="number">601097836</span><span class="meta">@qq</span>.com</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathSum_112</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> root 根节点</div><div class="line">     * <span class="doctag">@param</span> sum 以root 为根的树的某一条路径的总和</div><div class="line">     * <span class="doctag">@return</span> 这棵树上是否存在这样一条路径</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span> &amp;&amp; root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span> &amp;&amp; sum - root.val == <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">//如果当前节点是叶子节点，并且sum - 当前节点的值 =0 说明刚好找到了一条路径</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root != <span class="keyword">null</span> &amp;&amp; root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span> &amp;&amp; sum - root.val != <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">//如果当前节点是叶子节点，并且sum-root.val不为0 ，那么本条路径不满足sum条件</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="comment">//如果当前节点不是叶子节点，继续往下递归查找，或的形式</span></div><div class="line">            <span class="keyword">return</span> hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="comment">//root等于null</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> val;</div><div class="line">        TreeNode left;</div><div class="line">        TreeNode right;</div><div class="line"></div><div class="line">        TreeNode(<span class="keyword">int</span> x) &#123;</div><div class="line">            val = x;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[119.Pascal's Triangle II]]></title>
      <url>http://thinerzq.com/2016/09/09/leetcode/119-Pascal-s-Triangle-II/</url>
      <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>Given an index k, return the k<sup>th</sup> row of the Pascal’s triangle.</p>
<p>For example, given k = 3,</p>
<p>Return</p>
<p><pre>[1,3,3,1].<br></pre><br>本题k=0,返回[1]<br><a id="more"></a></p>
<h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>每一行除了第0个元素和最后一个元素除外，current[j] = lastRow[j-1]+lastRow[j];</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; pre = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        pre.add(<span class="number">0</span>,<span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;rowIndex; i++) &#123;</div><div class="line">            List&lt;Integer&gt; tempLists =<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">            tempLists.add(<span class="number">0</span>,<span class="number">1</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;=i;j++) &#123;</div><div class="line">                tempLists.add(j,pre.get(j-<span class="number">1</span>)+pre.get(j));</div><div class="line">            &#125;</div><div class="line">            tempLists.add(<span class="number">1</span>);</div><div class="line">            pre = tempLists;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> pre;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[172. Factorial Trailing Zeroes]]></title>
      <url>http://thinerzq.com/2016/09/09/leetcode/172-Factorial%20Trailing%20Zeroes/</url>
      <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>Given an integer n, return the number of trailing zeroes in n!.</p>
<p>Note: Your solution should be in logarithmic time complexity.</p>
<a id="more"></a>
<h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>煞笔的纯粹计算出n的阶乘，然后取出最后的0的个数，这样会导致n太大溢出。</p>
<h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><p>n! 除了1以外必然是合数，合数可以做质因数分解，n!分解质因数的表达式如下：</p>
<blockquote>
<p>n! = 2^x <em> 3^y </em> 5^z * …</p>
</blockquote>
<p>一个数末尾0的个数，取决于它的质因子中2和5的个数的最小值，对于本题就是min(x,z)=z</p>
<p>证明:<br>证明：</p>
<pre>
对于阶乘而言，也就是1*2*3*...
[n/k]代表1~n中能被k整除的个数
那么很显然
[n/2] > [n/5] (左边是逢2增1，右边是逢5增1)
[n/2^2] > [n/5^2](左边是逢4增1，右边是逢25增1)
……
[n/2^p] > [n/5^p](左边是逢2^p增1，右边是逢5^p增1)
随着幂次p的上升，出现2^p的概率会远大于出现5^p的概率。
因此左边的加和一定大于右边的加和，也就是n!质因数分解中，2的次幂一定大于5的次幂
</pre>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">zeroes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">       <span class="keyword">int</span> count =<span class="number">0</span>;</div><div class="line">       <span class="keyword">int</span> k=n;</div><div class="line">       <span class="keyword">while</span> (n&gt;<span class="number">0</span>)&#123;</div><div class="line">           n=n/<span class="number">5</span>;</div><div class="line">           count++;</div><div class="line">       &#125;</div><div class="line">       count--;</div><div class="line">       <span class="keyword">while</span> (count&gt;<span class="number">0</span>)&#123;</div><div class="line">           sum+= (k/(Math.pow(<span class="number">5</span>,count--)));</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> sum;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[26.Remove Duplicates from Sorted Array]]></title>
      <url>http://thinerzq.com/2016/09/09/leetcode/26-Remove-Duplicates-from-Sorted-Array/</url>
      <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this in place with constant memory.</p>
<p>For example,<br>Given input array nums =<code> [1,1,2]</code>,</p>
<p>Your function should return length = <code>2</code>, with the first two elements of nums being<code> 1</code> and <code>2</code> respectively. It doesn’t matter what you leave beyond the new length.</p>
<a id="more"></a>
<h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>判断当前值和前一个值是否相等，相等就记录下有多少个相等的，不相等就将当前值往前赋值。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by root on 16-3-3.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoveDuplicatesFromSortedArray_26</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> nums[] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>&#125;;</div><div class="line">        System.out.println(<span class="keyword">new</span> RemoveDuplicatesFromSortedArray_26().removeDuplicates(nums));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</div><div class="line">            System.out.println(nums[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        <span class="comment">// 一个for 循环</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[i] == nums[i - <span class="number">1</span>]) &#123;</div><div class="line">                <span class="comment">//当前值 和 前一个值是否相等，相等 count+1</span></div><div class="line">                count++;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// count 永远是 小于 1 的</span></div><div class="line">                <span class="comment">//经过上面的判断，</span></div><div class="line">                <span class="comment">// count ==0    《--》 前面没有相等的</span></div><div class="line">                <span class="comment">// count ==1     《--》  前面有一个相等的，将上一个值赋值为当前值</span></div><div class="line">                <span class="comment">// count ==2     《--》  前面有两个相等的，将上两个位置的值赋值为当前值</span></div><div class="line">                <span class="comment">// ...</span></div><div class="line">                nums[i - count] = nums[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//返回新的数组长度</span></div><div class="line">        <span class="keyword">return</span> nums.length - count;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[102. Binary Tree Level Order Traversal]]></title>
      <url>http://thinerzq.com/2016/09/09/leetcode/102-Binary-Tree-Level-Order-Traversal/</url>
      <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to right, level by level).</p>
<p>For example:<br>Given binary tree [3,9,20,null,null,15,7],</p>
<pre>
3
/ \
9  20
 /  \
15   7
</pre>

<p>return its level order traversal as:</p>
<pre>
[
  [3],
  [9,20],
  [15,7]
]
</pre>

<a id="more"></a>
<h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>使用队列，每次将一层加入到当前队列。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>全部代码<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created with IntelliJ IDEA</div><div class="line"> * Date: 2016/3/4</div><div class="line"> * Time: 19:50</div><div class="line"> * User: ThinerZQ</div><div class="line"> * GitHub: &lt;a&gt;https://github.com/ThinerZQ&lt;/a&gt;</div><div class="line"> * Blog: &lt;a&gt;http://www.thinerzq.me&lt;/a&gt;</div><div class="line"> * Email: 601097836@qq.com</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTreeLevelOrderTraversal_102</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        TreeNode treeNode = <span class="keyword">new</span> TreeNode(<span class="number">1</span>);</div><div class="line">        levelOrder(treeNode);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</div><div class="line">        <span class="comment">//null的处理</span></div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//返回值</span></div><div class="line">        List&lt;List&lt;Integer&gt;&gt; lists = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">        <span class="comment">//层次遍历所需要的队列</span></div><div class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</div><div class="line">        <span class="comment">//root 不为空，将root加入队列中</span></div><div class="line">        queue.add(root);</div><div class="line">        <span class="comment">//如果队列不为空</span></div><div class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</div><div class="line">            <span class="comment">//保存当前对别中的所有节点</span></div><div class="line">            ArrayList&lt;TreeNode&gt; treeNodes = <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</div><div class="line">            <span class="comment">//保存当前队列中所有节点的值</span></div><div class="line">            ArrayList&lt;Integer&gt; vals = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">            <span class="comment">//取出当前队列中的所有节点</span></div><div class="line">            Iterator&lt;TreeNode&gt; iterator = queue.iterator();</div><div class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">                TreeNode temp = iterator.next();</div><div class="line">                treeNodes.add(temp);</div><div class="line">                vals.add(temp.val);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//将当前队列中的所有值最为一个list加入到 返回值列表</span></div><div class="line">            lists.add(vals);</div><div class="line">            <span class="comment">//当前队列清空</span></div><div class="line">            queue.clear();</div><div class="line">            <span class="comment">//将treeNodes中保存的当前队列中的所有值的左节点和右节点 进行判断。</span></div><div class="line">            <span class="keyword">for</span> (TreeNode treeNode : treeNodes) &#123;</div><div class="line">                TreeNode temp = treeNode;</div><div class="line">                <span class="keyword">if</span> (temp.left != <span class="keyword">null</span>) &#123;</div><div class="line">                    queue.add(temp.left);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (temp.right != <span class="keyword">null</span>) &#123;</div><div class="line">                    queue.add(temp.right);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> lists;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> val;</div><div class="line">        TreeNode left;</div><div class="line">        TreeNode right;</div><div class="line"></div><div class="line">        TreeNode(<span class="keyword">int</span> x) &#123;</div><div class="line">            val = x;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[102 Pascal'a Triangle]]></title>
      <url>http://thinerzq.com/2016/09/08/leetcode/118-Pascal's%20Triangle/</url>
      <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>given numRows, generate the first numRows of Pascal’s triangle.</p>
<p>For example, given numRows = 5</p>
<p>Return</p>
<p><pre>[<br>     [1],<br>    [1,1],<br>   [1,2,1],<br>  [1,3,3,1],<br> [1,4,6,4,1]<br>]<br></pre><br><a id="more"></a></p>
<h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>每一行除了第0个元素和最后一个元素除外，current[j] = lastRow[j-1]+lastRow[j];</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; generate(<span class="keyword">int</span> numRows) &#123;</div><div class="line">        <span class="comment">//防御式编程</span></div><div class="line">        <span class="keyword">if</span> (numRows == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//最终返回结果</span></div><div class="line">        List&lt;List&lt;Integer&gt;&gt; lists = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">        <span class="comment">//加入第一行元素</span></div><div class="line">        ArrayList&lt;Integer&gt; first = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        first.add(<span class="number">0</span>, <span class="number">1</span>);</div><div class="line">        lists.add(<span class="number">0</span>, first);</div><div class="line">        <span class="comment">//对接下来的每一行，取出上一行</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; numRows; i++) &#123;</div><div class="line">            <span class="comment">//templist 是arraylist，可以保持加入的顺序</span></div><div class="line">            List&lt;Integer&gt; tempLists = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">            <span class="comment">//取出上一行</span></div><div class="line">            List&lt;Integer&gt; preList = lists.get(i - <span class="number">1</span>);</div><div class="line">            <span class="comment">//在templist 上插入第0个元素：1，</span></div><div class="line">            tempLists.add(<span class="number">0</span>, <span class="number">1</span>);</div><div class="line">            <span class="comment">// int len = (i)/2+1;</span></div><div class="line">            <span class="comment">//本行的第j个元素 = 上一行的第j-1个元素 + 上一行的第j个元素 ， 1&lt;=j&lt;i</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</div><div class="line">                tempLists.add(j, preList.get(j - <span class="number">1</span>) + preList.get(j));</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//在templist 中Haru最后一个元素：1</span></div><div class="line">            tempLists.add(<span class="number">1</span>);</div><div class="line">            lists.add(i, tempLists);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> lists;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql win64 5.7.9 zip包安装日记]]></title>
      <url>http://thinerzq.com/2016/09/01/mysql/mysql%20win64%205.7.9%20zip%E5%8C%85%E5%AE%89%E8%A3%85%E6%97%A5%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="官网下载win64-zip包"><a href="#官网下载win64-zip包" class="headerlink" title="官网下载win64 zip包"></a>官网下载win64 zip包</h1><p>找到合适的目录解压</p>
<h1 id="配置my-default-ini"><a href="#配置my-default-ini" class="headerlink" title="配置my-default.ini"></a>配置my-default.ini</h1><blockquote>
<p>basedir = D:\Study\MySQL\mysql-5.7.14-server-win64<br> datadir = D:\Study\MySQL\mysql-5.7.14-server-win64\data<br> port = 3306</p>
</blockquote>
<p> #管理员方式打开命令行，进入mysql home 目录下的bin目录</p>
<p>执行如下命令：</p>
<blockquote>
<ol>
<li>mysqld –initialize（我使用mysqld –initialize -secure生成的data目录下的文件不完整）<br>在mysql的根目录下自动生成data目录以及其他文件，初始化一个随机密码的root用户</li>
<li>mysqld -install/remove<br>注册mysql服务</li>
<li>net start/stop mysql<br>启动服务</li>
</ol>
</blockquote>
<h1 id="关于root的随机密码在那里"><a href="#关于root的随机密码在那里" class="headerlink" title="关于root的随机密码在那里"></a>关于root的随机密码在那里</h1><p>windows在data目录下的DESKTOP-M03IEJ5.err文件里面，搜索“2016-09-01T02:15:22.399996Z 1 [Note] A temporary password is generated for root@localhost: -/br&gt;,B;o9gm”这样的一个字符串就能找到了，其他系统也都写在日志里面，找找总会有的</p>
<h1 id="最后-mysql-u-root-p-password-进入mysql-控制台"><a href="#最后-mysql-u-root-p-password-进入mysql-控制台" class="headerlink" title="最后:mysql -u root -p password 进入mysql 控制台"></a>最后:mysql -u root -p password 进入mysql 控制台</h1><p>更改mysql密码</p>
<blockquote>
<p>alter user ‘root’@’localhost’ identified by ‘your password’;</p>
</blockquote>
<p>that’s all</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[战国纵横]]></title>
      <url>http://thinerzq.com/2016/08/27/history/%E6%88%98%E5%9B%BD%E7%BA%B5%E6%A8%AA/</url>
      <content type="html"><![CDATA[<p>乱世总有英雄，奇人，最早的乱世莫过于春秋战国。</p>
<p>庞涓，孙膑，苏秦，张仪，纵横捭阖。以前对这段历史充满了向往，总是一直没时间看，终于借助这两个月的上下班时间熟悉了一下这段历史，记录一下，留个印象。</p>
<p>还是从周朝说起，西周末年，周氏衰落，天子雄风不在，天下早已礼崩乐坏，各路诸侯明着都尊周天子，实际上都在谋划着如何除掉其他诸侯，如何称王。</p>
<a id="more"></a>
<h1 id="主人公登场"><a href="#主人公登场" class="headerlink" title="主人公登场"></a>主人公登场</h1><p>魏惠王借天子之名，邀天下诸侯前往孟津朝王，但是秦孝公不停商鞅的话没去，然后魏惠王就借机联合其他诸侯攻打秦国，秦孝公想决战，但是商鞅不让，最后商鞅去魏国求和，并把秦孝公的女儿嫁给了魏惠王的儿子公子昂，并借机扶持上大夫陈轸，最后求和成功，并且鼓动魏惠王称王（因为这时候魏国最强，前任魏文侯任用吴起为将，用XX为相，是所有国家中最早变法的），魏惠王煞笔停了陈珍的话要称王（陈珍把庞涓的父亲抓起来给皇帝做龙袍，最后加害了他，庞涓出逃），广发英雄帖，邀请天下诸侯，最后在XX地方举行称王仪式的时候之后秦国的太子来了，其他国家都没来，面子上过去不去啊，就调了一个最弱的国家“卫国”，派兵去打，卫国肯定不愿意了（不愿意也要打啊，最后魏国攻破平阳，孙膑一家其他人全部战死），打不过只能去齐国，楚国请救兵，齐国，楚国出兵了，不过只是来看看有没有便宜可以捞，魏惠王听到这两个国家出兵就把镇守河西的兵力都调过来要教训一下这两只猴子，最后秦国趁机占领河西，魏惠王吓了一跳，马上找陈珍去和齐，楚议和。最后什么好处没捞着，便宜了秦国，魏惠王回去之后一心要伐秦，最后和秦军决战河西，主将为他儿子公子昂，秦国用商鞅为主将，司马错为副将，把公子昂耍的团团转，最后损并十几万败走河西（张仪家是魏国的小军官，张仪家就遭殃了，不过张仪这个时候被送去周天子所在城市洛阳求学去了）。魏国元气大伤，秦国士气大振，秦公听过商鞅的意见给儿子说门亲事，让上大夫樗里疾带着聘礼去聘娶周天子的女儿，魏国得到消息也要去聘周天子的女儿，周天子只有听别人话的份，这个时候墨家巨子给周天子的皇后支招，求鬼谷子出山，（这个时候苏秦结巴出场了，最开始偷听世子们弹琴被打了，不过被周天子的女儿给救了，话说从这个时候苏秦交上好运了，偶然间在一个破庙里遇见了鬼谷子），最后鬼谷子带着皇后的女儿姬雪（玉蝉儿）回山修行，并赠与苏秦治疗结巴的秘书。第一话告一段落了，四位牛逼的人都出场了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tair学习]]></title>
      <url>http://thinerzq.com/2016/07/28/AliBaBa/tair%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A/</url>
      <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>首先tair是一个的Key-Value结构分布式存储系统，既可以做高速缓存，也可以做持久化存储。分布式系统一般来说是一个集群，而在Tair的集群中主要存在如下几个模块：</p>
<p><strong>ConfigServer</strong><br>一个集群中包含2台configserver,两台configserver互为主备。</p>
<ol>
<li>维护和dataserver之间的心跳获得集群中存活可用的dataserver</li>
<li>根据存活的dataserver 构建数据在集群中的分布信息（对照表）</li>
<li>对client提供分部信息（对照表）的查询</li>
<li>当dataserver挂掉，或者新添加dataserver的时候，调度各个dataserver完成数据的迁移，复制</li>
</ol>
<p><strong>DataServer</strong><br>真正存放数据的地方</p>
<ol>
<li>提供数据存储服务，接受client端的put/get/remove操作。</li>
<li>执行数据迁移复制</li>
</ol>
<p><strong>InvalidServer</strong><br>InvalidServer是一个可选模块，</p>
<ol>
<li>接收来自client的invalid/hide请求，对属于同一组的集群（双机房独立集群部署方式）做delete/hide操作，保证同一组集群的一致。</li>
</ol>
<p><strong>Client</strong><br>Tair提供出来的SDK</p>
<ol>
<li>在应用端提供访问Tair集群的接口。</li>
<li>和ConfigServer通信，更新并缓存数据分布表和invalidserver地址等。</li>
<li>LocalCache，避免过热数据访问影响tair集群服务。</li>
</ol>
<p>在启动时，Client会根据本地的配置文件与ConfigServer通信。Client从Config Servcer处获得可用的DataServer地址，然后Client从这些DataServer获取真正的数据。<br><a id="more"></a></p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>集群</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">集群</th>
<th style="text-align:left">概述</th>
<th style="text-align:left">优点</th>
<th style="text-align:left">缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">双机房单集群单份(Dss)</td>
<td style="text-align:left">一个Tiar实例部署在两个机房中，被单个配置服务器管理，逻辑上为单集群，数据存储份数为1</td>
<td style="text-align:left">1. 服务器存在于双机房，任一机房宕机保持可用。<br><br>2. 单份数据，无论应用在哪个机房，看到的都是同一个数据。</td>
<td style="text-align:left">1. 应用服务器会跨机房访问。<br><br>2. 当一边机房出现故障时，tair中的数据会丢失</td>
</tr>
<tr>
<td style="text-align:left">双机房单集群双份(Dsd)</td>
<td style="text-align:left">一个Tair实例部署在2个机房中，数据保存2份，并且同一数据的2个备份不会放在同一个数据服务器上</td>
<td style="text-align:left">1. 数据存放两份，数据安全性有一定保障。但由于存储引擎是mdb，数据存放在内存中，无法绝对保证数据不丢失。<br><br>2. 当一边机房故障时，另外一边机房依然可以服务，并且数据不丢失。</td>
<td style="text-align:left">如果机房间网络出现异常情况，依然有较小几率丢失数据。</td>
</tr>
<tr>
<td style="text-align:left">双机房独立集群(Dds)</td>
<td style="text-align:left">在两个机房中同时部署2个独立的集群，这两个集群直接没有直接关系。一般作为缓存使用，Tair不保证数据的一致性. 通过一个InvalidServer来保障同一个key在两个机房是一致的</td>
<td style="text-align:left">1. 每个机房拥有独立Tair集群，应用在哪个机房就访问相同机房的Tair集群，不会出现跨机房调用和流量。</td>
<td style="text-align:left">1. 后端必须要有数据源，也就是这种部署方式下，Tair必然是当作传统意义上的cache存在的。因为Tair mdb集群之间本身不会做数据同步，多集群间一致性保证依赖于后端数据源，如DB。<br><br>2. 当后端数据源数据发生更新后，业务不能直接把数据put到Tair，而是先需要调用invalid接口来失效这些对等集群中的数据</td>
</tr>
<tr>
<td style="text-align:left">双机房主备集群(Ddsm)</td>
<td style="text-align:left">这种部署方式中，存在一个主集群和一个备份集群，分别在两个机房中。数据同步由主集群透明完成。</td>
<td style="text-align:left">1. 数据安全和服务可用性高。 <br><br>2. 用户调用方便，无需考虑多集群间数据一致性的问题。</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<p><strong>引擎</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">引擎</th>
<th style="text-align:left">应用场景</th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">mdb</td>
<td style="text-align:left">缓存，容量小，读写qps高</td>
<td style="text-align:left">支持分层key，mdb特别注意部署方式（Dss,Dds）</td>
</tr>
<tr>
<td style="text-align:left">rdb</td>
<td style="text-align:left">缓存，容量小，读写qps高</td>
<td style="text-align:left">比mdb的存储结构更加丰富（list/map/set/zset）</td>
</tr>
<tr>
<td style="text-align:left">ldb</td>
<td style="text-align:left">持久化，读写qps高</td>
<td style="text-align:left">成本比mdb,rdb高，支持范围查找（少用）</td>
</tr>
</tbody>
</table>
<p><strong>集群与引擎的对照关系</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left">双机房单集群单份</th>
<th style="text-align:left">双机房单集群双份</th>
<th style="text-align:left">双机房独立集群</th>
<th style="text-align:left">双机房主备集群</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">mdb</td>
<td style="text-align:left">√</td>
<td style="text-align:left">√</td>
<td style="text-align:left">√</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">rdb</td>
<td style="text-align:left">√</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">ldb</td>
<td style="text-align:left">√</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">√</td>
</tr>
</tbody>
</table>
<p><strong>其他基础概念</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">基础概念</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">namespace</td>
<td style="text-align:left">又称area,隔离多个应用，各个namespace对应的应用中的数据是相互隔离的</td>
</tr>
<tr>
<td style="text-align:left">quota</td>
<td style="text-align:left">对应了每个namespace储存区的大小限制，超过配额后数据将面临最近最少使用（LRU）的淘汰</td>
</tr>
<tr>
<td style="text-align:left">expireTime</td>
<td style="text-align:left">是指数据的过期时间，当超过过期时间之后，数据将对应用不可见，这个设置同样影响到应用的命中率和资源利用率</td>
</tr>
<tr>
<td style="text-align:left">version</td>
<td style="text-align:left">Tair中存储的每个数据都有版本号，版本号在每次更新后都会递增</td>
</tr>
<tr>
<td style="text-align:left">delete and invalid</td>
<td style="text-align:left">删除仅作用于一个机房数据，而失效针对多个机房。失效操作由专门的失效服务器处理，它不保证数据 立即被删除，但是保证不会被获取到</td>
</tr>
<tr>
<td style="text-align:left">LocalCache</td>
<td style="text-align:left">在客户端的cache,为了减轻dataserver负担，使用了net.sf.ehcache</td>
</tr>
</tbody>
</table>
<h1 id="分布式一致性hash"><a href="#分布式一致性hash" class="headerlink" title="分布式一致性hash"></a>分布式一致性hash</h1><p>若tair采用普通哈希即让key对机器数count取模决定key存放的机器，但当某台机器故障或增加机器时count发生变化，则原来key对应的机器发生变化，因此需要移动大量的数据。目前为了使移动的数据少一点，主要<a href="http://www.blogjava.net/hao446tian/archive/2013/01/29/394858.html" target="_blank" rel="external">采用一致性hash算法</a>来解决问题。在这里Tair使用改进的一致性hash算法来解决这个问题：<br>设有一个有限域（0-2^32）个整数，将其首尾相连形成一个环，如下图所示。<br><img src="http://img4.tbcdn.cn/L1/461/1/bf857946fd33f7d811cbe190698196b013fcb67a" alt="tair"><br>一致性哈希算法大致流程如下：</p>
<ol>
<li>将dataserver根据hash函数映射到环上。</li>
<li>将bucket根据hash函数映射到换上；从bucket在环的位置开始顺时针找到第一个桶，这就是该桶所在的dataserver。</li>
<li>据key根据hash函数映射到环上，从key在环的位置开始顺时针找到第一个桶，这就是key存放的桶。</li>
<li>当某台机器坏掉时，key对应的桶映射不会变；类似2，沿着桶顺时针找到下一台机器，这就是存放该桶所在的dataserver</li>
<li>当增加dataserver时，将该dataserver与前一台dataserver(逆时针)之间的bucket存储在新增dataserver上并从原来dataserver上移除。</li>
</ol>
<p>显然采用这种方法当机器数目发生变化时只需移动少量的数据桶。以上纯属yy，参考自：<a href="http://www.atatech.org/articles/45240" target="_blank" rel="external">http://www.atatech.org/articles/45240</a>，ATA上讲Tair分布式一致性hash的就这一个。如有错误，请指正。</p>
<h1 id="创建对照表"><a href="#创建对照表" class="headerlink" title="创建对照表"></a>创建对照表</h1><h2 id="对照表"><a href="#对照表" class="headerlink" title="对照表"></a>对照表</h2><p>Tair使用改进后的一致性hash算法来确保数据在数据服务器上趋于均匀分布，同时获取良好的可扩展性。Tair将数据按bucket为单位，存放在存储节点上，每一个节点可以存储多个bucket。对于每一个bucket而言，可能会存在多个备份。若在多备份的情况下，其中一个bucket称为master bucket,其他的称为slave bucket。Tair客户端会从configserver获取到一张表，该表记录了每一个bucket存储的节点的地址。这张表称之为对照表，如下表所示。</p>
<table>
<thead>
<tr>
<th style="text-align:left">Bucket Id</th>
<th style="text-align:left">DataServer Ip</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">192.168.0.1</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">192.168.0.2</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">192.168.0.1</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">192.168.0.2</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">192.168.0.1</td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:left">192.168.0.2</td>
</tr>
</tbody>
</table>
<p>简单的说，Tair Client 根据要put/get/remove 的key值做hash 映射到对应的bucket id ，然后根据对照表找到bucket id 对应的 dataserver ,然后和对应的dataserver进行数据交换。在这个过程中bucket的数量是固定的，也就是说key – bucket 之间的映射是固定的。 但是bucket – dataserver之间的映射却可能会发生变化：扩容，缩容，dataserver宕机等，因此需要在存活的dataserver数量发生变化的时候重建对照表，而且这个重建的过程必须对client透明。下面简单分析一下对照表的重建过程，和bucket数据迁移过程。</p>
<h2 id="对照表重建"><a href="#对照表重建" class="headerlink" title="对照表重建"></a>对照表重建</h2><p>这里先忽略对照表的初始化创建过程，假设现在有一张对照表如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">hash_table</th>
<th style="text-align:left">1</th>
<th style="text-align:left">2</th>
<th style="text-align:left">3</th>
<th style="text-align:left">4</th>
<th style="text-align:left">5</th>
<th style="text-align:left">m_hash_table</th>
<th style="text-align:left">1</th>
<th style="text-align:left">2</th>
<th style="text-align:left">3</th>
<th style="text-align:left">4</th>
<th style="text-align:left">5</th>
<th style="text-align:left">d_hash_table</th>
<th style="text-align:left">1</th>
<th style="text-align:left">2</th>
<th style="text-align:left">3</th>
<th style="text-align:left">4</th>
<th style="text-align:left">5</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">D</td>
<td style="text-align:left">D</td>
<td style="text-align:left">C</td>
<td style="text-align:left">B</td>
<td style="text-align:left">A</td>
<td style="text-align:left"></td>
<td style="text-align:left">D</td>
<td style="text-align:left">D</td>
<td style="text-align:left">C</td>
<td style="text-align:left">B</td>
<td style="text-align:left">A</td>
<td style="text-align:left"></td>
<td style="text-align:left">D</td>
<td style="text-align:left">D</td>
<td style="text-align:left">C</td>
<td style="text-align:left">B</td>
<td style="text-align:left">A</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">C</td>
<td style="text-align:left">C</td>
<td style="text-align:left">C</td>
<td style="text-align:left">D</td>
<td style="text-align:left">B</td>
<td style="text-align:left"></td>
<td style="text-align:left">C</td>
<td style="text-align:left">C</td>
<td style="text-align:left">C</td>
<td style="text-align:left">D</td>
<td style="text-align:left">B</td>
<td style="text-align:left"></td>
<td style="text-align:left">C</td>
<td style="text-align:left">C</td>
<td style="text-align:left">C</td>
<td style="text-align:left">D</td>
<td style="text-align:left">B</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">B</td>
<td style="text-align:left">B</td>
<td style="text-align:left">A</td>
<td style="text-align:left">C</td>
<td style="text-align:left">D</td>
<td style="text-align:left"></td>
<td style="text-align:left">B</td>
<td style="text-align:left">B</td>
<td style="text-align:left">A</td>
<td style="text-align:left">C</td>
<td style="text-align:left">D</td>
<td style="text-align:left"></td>
<td style="text-align:left">B</td>
<td style="text-align:left">B</td>
<td style="text-align:left">A</td>
<td style="text-align:left">C</td>
<td style="text-align:left">D</td>
</tr>
</tbody>
</table>
<p>其中：1，2，3，4，5表示有5个bucket。 1，2，3表示每一个bucket，冗余了三份数据,第一行的数据是master bucket,其他行是 salve bucket。A,B,C,D表示有4台dataserver。比如说hash_table表第一行第一列的D 表示：bucket 1作为master bucket 存放在dataserver D上。</p>
<p>通常有三张对照表：hash_table , m_hash_table, d_hash_table.通常情况下，这些对照表的内容相同的。只有在对照表重建后，并且有限的时间内，这些表内容不同。当重建对照表后，系统会触发数据迁移工作。待数据迁移完成后，这3张对照表内容就相同了。也就是说，只有在数据迁移过程中，对照表的内容才会不同。</p>
<p> 对照表创建后，configserver会将hash_table表发送给Client，Clietn通过这个对照表读写数据，不至于在对照表重建过程中，无法提供服务。Configserver会将m_hash_table和d_hash_table发送到dataserver, dataserver通过这两个表来确定2件事：1）自己负责存储的bucket id；2)确定迁移的bucket id以及迁移的目标机器。</p>
<p> 假设现在Dataserver D挂了，ConfigServer通过心跳包检测出来了，现在需要重建对照表。对照表的重建可以有两种策略：负载均衡有限，位置安全优先。</p>
<p> 负载均衡优先：<br> 在该策略下，构建出的对照表期望达到的效果——使得每一个节点分配的bucket数量尽可能的均衡。</p>
<h3 id="1-根据当前m-hash-table表，统计出每一个alive节点上存储的bucket数量"><a href="#1-根据当前m-hash-table表，统计出每一个alive节点上存储的bucket数量" class="headerlink" title="1: 根据当前m_hash_table表，统计出每一个alive节点上存储的bucket数量"></a>1: 根据当前m_hash_table表，统计出每一个alive节点上存储的bucket数量</h3><table>
<thead>
<tr>
<th style="text-align:left">alive dataserver</th>
<th style="text-align:left">目前存储的bucket数量</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">A</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:left">B</td>
<td style="text-align:left">4</td>
</tr>
<tr>
<td style="text-align:left">C</td>
<td style="text-align:left">5</td>
</tr>
</tbody>
</table>
<h3 id="2-根据-1-中生成的map-得到下表，即对于hold相同数量bucket的节点存放在同一列表里"><a href="#2-根据-1-中生成的map-得到下表，即对于hold相同数量bucket的节点存放在同一列表里" class="headerlink" title="2: 根据 1) 中生成的map,得到下表，即对于hold相同数量bucket的节点存放在同一列表里"></a>2: 根据 1) 中生成的map,得到下表，即对于hold相同数量bucket的节点存放在同一列表里</h3><table>
<thead>
<tr>
<th style="text-align:left">存储bucket的数量</th>
<th style="text-align:left">存储这些数量bucket的 dataserver</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">{A}</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">{B}</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">{C}</td>
</tr>
</tbody>
</table>
<p>这里咋一看就是把1）中的表反过来了，其实不然，如果1)中的表还有一个E=2，那么2）中的表就是 2 = {A,E};</p>
<h3 id="3-给每一个节点分配存储bucket的数量。"><a href="#3-给每一个节点分配存储bucket的数量。" class="headerlink" title="3: 给每一个节点分配存储bucket的数量。"></a>3: 给每一个节点分配存储bucket的数量。</h3><p>这一步只是确定每一个节点上可以储存多少个bucket,而不确定到底存储哪一些bucket。对于不同的构建对照表策略，这一步骤是不同的。<br>在负载均衡策略下，这一步的目的就是让各个bucket尽量平均分配到各个alive dataserver，同时也要保证master bucket 也尽可能平均分配在每一个dataserver上，最后得到每一个dataserver最终要存储的bucket 总数。这里说的比较简单，详细怎么分配，可以参考：<a href="http://www.atatech.org/article/detail/6365/418" target="_blank" rel="external">http://www.atatech.org/article/detail/6365/418</a>。</p>
<h3 id="4-计算每一个节点预期可存储bucket的数量；"><a href="#4-计算每一个节点预期可存储bucket的数量；" class="headerlink" title="4: 计算每一个节点预期可存储bucket的数量；"></a>4: 计算每一个节点预期可存储bucket的数量；</h3><p>有了1) ~ 3)步的数据，现在可以计算每一个节点还可以存储的bucket的数量。    </p>
<h3 id="5-快速创建对照表。在这个步骤中，系统将hash-table的第1行（master-bbucket）中失效了的dataserver-替换掉。"><a href="#5-快速创建对照表。在这个步骤中，系统将hash-table的第1行（master-bbucket）中失效了的dataserver-替换掉。" class="headerlink" title="5: 快速创建对照表。在这个步骤中，系统将hash_table的第1行（master bbucket）中失效了的dataserver 替换掉。"></a>5: 快速创建对照表。在这个步骤中，系统将hash_table的第1行（master bbucket）中失效了的dataserver 替换掉。</h3><p>怎么替换，替换成什么？将对应bucket的slave bucket的dataserver存储到第1行相应位置（slave bucket选为master bucket）。此时，该bucket对应的所有slave bucket所在的dataserver都可以被选择，但是需要确保：选择的dataserver上负载的master bucket不能超标（因为master bucket也需要尽可能均匀分布），并且总bucket数没有超标（因为所有的bucket都要尽可能均匀分布）。替换后，将slave bucket对应的存储节点置 null。这步骤生成的表作为新对照表的hash_table和m_hash_table对照表的内容。</p>
<h3 id="6-确定每一个bucket的存储位置。"><a href="#6-确定每一个bucket的存储位置。" class="headerlink" title="6: 确定每一个bucket的存储位置。"></a>6: 确定每一个bucket的存储位置。</h3><p>首先，为master bucket安排存储节点。对于每一个master bucket当前所在的节点X，检查X节点是否满足要求。若不满足要求，则在该bucket的所有slave bucket中选择一个bucket,将该bucket作为master bucket（这里有可能选择不到，即时存在slave bucket,也无法选择。因为，要保证该slave bucket所在的dataserver上的总master bucket的数量不要超过一个值);若没有找到，则需要在alive的节点列表中，选择一个合适的节点S。将S节点作为这个master bucket的存储节点。更新统计数据。（这一步和第五步快速创建对照表似乎有重复地方，为了和后面的更新slave bucket做一个对比，在这里啰嗦一点）。以之前的表为例，其中Dataserver D 宕机了，重建的的hash_table和m_hash_table如下表：</p>
<table>
<thead>
<tr>
<th style="text-align:left">hash_table</th>
<th style="text-align:left">1</th>
<th style="text-align:left">2</th>
<th style="text-align:left">3</th>
<th style="text-align:left">4</th>
<th style="text-align:left">5</th>
<th style="text-align:left">m_hash_table</th>
<th style="text-align:left">1</th>
<th style="text-align:left">2</th>
<th style="text-align:left">3</th>
<th style="text-align:left">4</th>
<th style="text-align:left">5</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">C</td>
<td style="text-align:left">B</td>
<td style="text-align:left">C</td>
<td style="text-align:left">B</td>
<td style="text-align:left">A</td>
<td style="text-align:left"></td>
<td style="text-align:left">C</td>
<td style="text-align:left">B</td>
<td style="text-align:left">C</td>
<td style="text-align:left">B</td>
<td style="text-align:left">A</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left"></td>
<td style="text-align:left">C</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">B</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">C</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">B</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">B</td>
<td style="text-align:left"></td>
<td style="text-align:left">A</td>
<td style="text-align:left">C</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">B</td>
<td style="text-align:left"></td>
<td style="text-align:left">A</td>
<td style="text-align:left">C</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<p>其次，为slave bucket安排存储节点。具体步骤为，首先检查bucket当前的存储节点是否满足要求（若该节点down掉了，显然不满足要求了）。若不满足要求，为其选择一个合适的节点，将该节点作为bucket的存储节点。更新统计数据。这个步骤生成的对照表，作为d_hash_table的内容。</p>
<table>
<thead>
<tr>
<th style="text-align:left">d_hash_table</th>
<th style="text-align:left">1</th>
<th style="text-align:left">2</th>
<th style="text-align:left">3</th>
<th style="text-align:left">4</th>
<th style="text-align:left">5</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">C</td>
<td style="text-align:left">B</td>
<td style="text-align:left">C</td>
<td style="text-align:left">B</td>
<td style="text-align:left">A</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><strong>A</strong></td>
<td style="text-align:left">C</td>
<td style="text-align:left"><strong>C</strong></td>
<td style="text-align:left"><strong>B</strong></td>
<td style="text-align:left">B</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">B</td>
<td style="text-align:left"><strong>A</strong></td>
<td style="text-align:left">A</td>
<td style="text-align:left">C</td>
<td style="text-align:left"><strong>C</strong></td>
</tr>
</tbody>
</table>
<p>目前看来：d_hash_table中各个dataserver的对应的bucket和master bucket 分配表比较均匀如下图所示：</p>
<table>
<thead>
<tr>
<th style="text-align:left">dataserver</th>
<th style="text-align:left">总的bucket数量</th>
<th style="text-align:left">master bucket数量</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">A</td>
<td style="text-align:left">5</td>
<td style="text-align:left">1(和别的dataserver相差1，是在所难免的)</td>
</tr>
<tr>
<td style="text-align:left">B</td>
<td style="text-align:left">B</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:left">C</td>
<td style="text-align:left">5</td>
<td style="text-align:left">2</td>
</tr>
</tbody>
</table>
<p>bucket分配到dataserver上满足的规则大致如下：</p>
<ol>
<li>master bucket必须均匀的分布在各个dataserver上</li>
<li>总的bucket 也必须均匀的分布在各个dataserver上</li>
<li>在满足以上两个条件的基础上，slave bucket 升级为 master bucket。</li>
</ol>
<h3 id="7-对照表同步"><a href="#7-对照表同步" class="headerlink" title="7: 对照表同步"></a>7: 对照表同步</h3><p>首先，configserver会将d_hash_table（不出意外，这就是最新的对照表）的内容保存到本地磁盘上。</p>
<p>其次，根据配置信息（是否允许数据迁移，是否允许数据丢失）。若无需数据迁移，那么用d_hash_table替换m_hash_table, hash_table。若需要数据迁移，统计哪些节点需要数据迁移。并且，将m_hash_table, hash_table保存在本地磁盘。最后，将对照表同步到备configserver上。</p>
<p>经过上述7个步骤，对照表就创建完成了。若存在数据迁移，这3个对照表内容是不同的。随着迁移的完成，3张对照表内容会变成相同的。</p>
<h2 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h2><p>当可用dataserver发生变化后，configserver会重建对照表。每次创建对照表会输出3张表，将m_hash_table(描述当前 bucket分布的对照表），和d_hash_table(描述迁移完成后的bucket分布的对照表）通过心跳机制发给每一个dataserver节点。dataserver节点在收到对照表后，会对对照表的版本作检查。若检测到心跳信息中的对照表版本大于本地保存的对照表版本数（对照表版本数是依次递增的）， 会启动一个线程，更新对照表，并完成数据迁移工作。</p>
<p>master bucket所在的dataserver负责迁移数据，根据这两张对照表，它可以判断出自己需要迁移的bucket，以及迁往何处。例如对于第一个bucket ：由 C 负责将数据迁移到 A。第二个bucket：由B 负责迁移到 A….</p>
<p>以第一个bucket为例：dataserver A 启动一个后台线程来完成bucket的迁移。迁移过程中，dataserver A需要继续对外提供读写服务。对于读操作而言，返回key对应的value就行，对于写操作而言，A 会检查key对应的bucket是否迁移完毕，如果已经迁移直接返回put/delete的返回码就行，如果没有迁移完毕</p>
<p>dataserver节点通过一个后台线程，来完成bucket的迁移任务。迁移数据的过程中，存储节点需要继续对外提供读写服务。对于读操作而言，节点根据请求的key, 到存储节点中读取数据并返回给应用。对写操作（ 包括write, delete等），存储节点会检查key对应的bucket是否已经迁移完毕（即该bucket迁移到了其他节点上了），若已迁移，则直接返回用户一个返回码（表示当前写操作没有成功，为什么？？）。当bucket正在迁移，并且没有结束的时候，写操作将数据写入存储引擎，并且将将日志写入磁盘。等待迁移完成之后，通过迁移日志，目的dataserver回放日志，从而保证了一致性。 当数据完成迁移之后，A 通知config server 第一个bucket已经迁移完成。</p>
<h1 id="Cache-热点问题"><a href="#Cache-热点问题" class="headerlink" title="Cache 热点问题"></a>Cache 热点问题</h1><p>某些高峰时段，会大量请求同一个Key（可能对应应用的某个促销商品、热点新闻、热点评论等），根据key的hash，所有读请求都将落到同一个server上，该机器的负载就会严重加剧。解决方法是：</p>
<ol>
<li>搭建一个备用集群，写的时候双写，然后随机双读。土办法，效率太低。</li>
<li>服务端做热点统计，同时通知客户端使用Local-cache逻辑：即在data-server上面运行热点统计逻辑，对每个到达的读请求，提取出key进行统计，并计算出当前请求中的热点key，同时当客户端访问的正好是热key，则向客户端回一个热点反馈feedback包。客户端收到feedback包之后，就将携带的hot-key写入客户端local-cache，同时拒绝非热key写入local-cache。</li>
</ol>
<p>具体热点key统计方法：<a href="http://www.atatech.org/articles/39329" target="_blank" rel="external">http://www.atatech.org/articles/39329</a></p>
<h1 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h1><p>一般的缓存系统，都是按照key去缓存查询，如果不存在对应的value，就去数据库中查找。如果key对应的value是一定不存在的，并且对该key并发请求量很大，就会对后端系统造成很大压力。<br>解决方法：对查询结果为空的情况也进行缓存，缓存时间设置短一点。</p>
<h1 id="Tair分布式锁-原子操作"><a href="#Tair分布式锁-原子操作" class="headerlink" title="Tair分布式锁,原子操作"></a>Tair分布式锁,原子操作</h1><p>很多情况下，更新数据是先get(key)，修改get回来的value，然后put回dataserver。<br>如果有多个客户端get到同一份数据，都对其修改并保存，那么先保存的修改就会被后到达的修改覆盖，从而导致数据一致性问题。<br>Tair中存储的每个Key-Value都有版本号，版本号在每次更新后都会递增，相应的，在Tair put接口中也有此version参数，这个参数是为了解决并发更新同一个数据而设置的，类似于乐观锁。使用步骤如下：</p>
<ol>
<li>get(key)。如果get(key)返回success，则进入步骤2；如果key 对应的value不存在，则进入步骤3.</li>
<li>在调用put(key,value,version)的时候将步骤1 中get(key)返回的verison重新传入put(key,value,version)方法。dataserver根据version是否匹配，返回client是否put成功。</li>
<li>步骤1中get(key)对应的value不存在，则新put数据。<font color="red">此时传入的version一定不能不是0和1</font>（其他任何值都可以）。 因为传入0，tair会认为强制覆盖；而传入1，第一个client写入会成功后当前version=1，第二个client写入的时候发现当前写入的数据的version和当前version一样，造成数据的覆盖。</li>
</ol>
<p>下面是一个客户端多个线程并发计数的例子：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TairCounter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String configId = <span class="string">"your configId"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> namespace = <span class="number">12345</span>;<span class="comment">//your namespace</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MultiClusterTairManager mcTairManager;</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        mcTairManager = <span class="keyword">new</span> MultiClusterTairManager();</div><div class="line">        mcTairManager.setConfigID(configId);</div><div class="line">        mcTairManager.setDynamicConfig(<span class="keyword">true</span>);</div><div class="line">        mcTairManager.init();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line"></div><div class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">100</span>);</div><div class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">100</span>);</div><div class="line">        <span class="keyword">final</span> String key = <span class="string">"count"</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">            executorService.submit(<span class="keyword">new</span> Counter(countDownLatch,key));</div><div class="line">        &#125;</div><div class="line">        countDownLatch.await();</div><div class="line">        <span class="comment">//始终输出100</span></div><div class="line">        System.out.println(mcTairManager.get(namespace, key).getValue().getValue());</div><div class="line">        mcTairManager.delete(namespace, key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch;</div><div class="line">        <span class="keyword">final</span> String key;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Counter</span><span class="params">(CountDownLatch countDownLatch, String key)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.countDownLatch = countDownLatch;</div><div class="line">            <span class="keyword">this</span>.key = key;</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            Result&lt;DataEntry&gt; result = mcTairManager.get(namespace, key);</div><div class="line">            <span class="keyword">if</span> (result == <span class="keyword">null</span>)</div><div class="line">                System.out.println(<span class="string">"tair service error"</span>);</div><div class="line">            <span class="keyword">if</span> (ResultCode.DATANOTEXSITS.equals(result.getRc())) &#123;</div><div class="line">                <span class="comment">// value 不存在，更新为 1</span></div><div class="line">                ResultCode code = mcTairManager.put(namespace, key, <span class="number">1</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">                <span class="comment">//如果put成功</span></div><div class="line">                <span class="keyword">if</span> (code.isSuccess()) &#123;</div><div class="line">                    System.out.println(<span class="string">"get值为空，第一次put----成功"</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    System.out.println(<span class="string">"get值为空，put不成功,开始重试"</span>);</div><div class="line">                    <span class="comment">//重试</span></div><div class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</div><div class="line">                        result = mcTairManager.get(namespace, key);</div><div class="line">                        code = mcTairManager.put(namespace, key, (<span class="keyword">int</span>)result.getValue().getValue()+<span class="number">1</span>,result.getValue().getVersion(),<span class="number">100</span>);</div><div class="line">                        <span class="keyword">if</span> (code.isSuccess())</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                System.out.println(<span class="string">"get值不为空，put不成功，开始重试"</span>);</div><div class="line">                <span class="comment">//重试</span></div><div class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</div><div class="line">                    result = mcTairManager.get(namespace, key);</div><div class="line">                    ResultCode code = mcTairManager.put(namespace, key, (<span class="keyword">int</span>)result.getValue().getValue()+<span class="number">1</span>,result.getValue().getVersion(),<span class="number">100</span>);</div><div class="line">                    <span class="keyword">if</span> (code.isSuccess())</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            countDownLatch.countDown();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>Tair文档：<a href="http://code.taobao.org/p/tair/wiki/index/" target="_blank" rel="external">http://code.taobao.org/p/tair/wiki/index/</a></p>
<p>Tair源码分析2：<a href="http://www.atatech.org/article/detail/6365/418" target="_blank" rel="external">http://www.atatech.org/article/detail/6365/418</a></p>
<p>Tair源码分析3：<a href="http://www.atatech.org/article/detail/9538/418" target="_blank" rel="external">http://www.atatech.org/article/detail/9538/418</a></p>
<p>Tair典型使用案例：<br><a href="http://www.atatech.org/articles/11131" target="_blank" rel="external">http://www.atatech.org/articles/11131</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MetaQ(RocketMQ)学习]]></title>
      <url>http://thinerzq.com/2016/07/25/AliBaBa/metaQ%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A/</url>
      <content type="html"><![CDATA[<h1 id="1-消息中间件解决的问题"><a href="#1-消息中间件解决的问题" class="headerlink" title="1. 消息中间件解决的问题"></a>1. 消息中间件解决的问题</h1><p>消息中间件的核心作用就是三点：解耦，异步和并行，其中解耦是目的，异步和并行是表现形式。生产者和消费者彼此没有直接依赖，同步化解成了异步，大大减少了等待时间。例如：手机验证码的发送，当点击发送验证码的时候，只需要Client发送一条消息：{topic:sendVerifyCode,to:155xxxxxxxx,..}到消息中间件，消息中间件返回Client ok;然后消息中间件会将这条消息转发给订阅了这一个topic的Consumer，由Consumer去执行发送验证码的任务。由此看出消息中间主要做了三件事：接收消息+存储消息+转发消息。</p>
<h1 id="2-JMS-与-MetaQ"><a href="#2-JMS-与-MetaQ" class="headerlink" title="2. JMS 与 MetaQ"></a>2. JMS 与 MetaQ</h1><ol>
<li><p><strong>消息传递方式</strong><br>JMS：1 基于队列的点对点消费模型，2 基于发布/订阅的消费模型<br>MetaQ： 只有发布/订阅的消费方式</p>
</li>
<li><p><strong>消息类型</strong><br>JMS：TextMessage、MapMessage、BytesMessage，StreamMessage、ObjectMessage。<br>MetaQ：Message。</p>
</li>
<li><p><strong>消息持久性</strong><br>JMS：持久订阅，指示 JMS provider 持久保存消息，以保证消息不会因为 JMS provider 的失败而丢失。非持久订阅， 不要求 JMS provider 持久保存消息。<br>MetaQ 的消息都是持久性的</p>
</li>
<li><p>API<br>JMS：定义了消息中间件的生产端 api 和消费端 api，这些 api 都是约定的接口。<br>MetaQ：没有遵从JMS的定义，自己搞了一套。</p>
</li>
</ol>
<a id="more"></a>
<h1 id="3-MetaQ基本概念"><a href="#3-MetaQ基本概念" class="headerlink" title="3. MetaQ基本概念"></a>3. MetaQ基本概念</h1><p><strong><font color="blue">生产者</font></strong></p>
<blockquote>
<p>Producer:负责产生消息并发送消息到MetaQ服务器</p>
</blockquote>
<p><strong><font color="blue">消费者</font></strong></p>
<blockquote>
<p>Consumer:负责从MetaQ拉取消息并完成消费</p>
</blockquote>
<p><strong><font color="blue">Topic</font></strong></p>
<blockquote>
<p>消息的主题，由用户定义。类似于知乎的话题，Producer发送消息的时候需要指定发送到某一个topic下面，Consumer从某一个topic下面消费消息。</p>
</blockquote>
<p><strong><font color="blue">分区</font></strong></p>
<blockquote>
<p>同一个topic下面又分为多个分区，这些分区散落在各个服务器上，消息是发送到某一个topic下面的某一个分区，Consumer 也是从Topic下面的某一给分区拉取消息</p>
</blockquote>
<p><strong><font color="blue">Message</font></strong></p>
<blockquote>
<p>消息，负载发送的消息的信息。在生产者，服务端和 消费者之间传输</p>
</blockquote>
<p><strong><font color="blue">Broker</font></strong></p>
<blockquote>
<p>MetaQ的服务端。</p>
</blockquote>
<p><strong><font color="blue">Offset</font></strong></p>
<blockquote>
<p>消息在 Broker 上的每个分区都是组织成一个文件列表,消费者拉取数据需要知道数据在文件中的偏移量,这个偏移量就是所谓 offset。Offset 是绝对偏移量,服务器会将 offset 转化为具体文件的相对偏移量</p>
</blockquote>
<p><strong><font color="blue">Tag</font></strong></p>
<blockquote>
<p>每次发送一条消息的时候，给消息加一个Tag，方便Consumer过滤消息。</p>
</blockquote>
<p><strong><font color="blue">生产者Group/消费者Group</font></strong></p>
<blockquote>
<p>消费者可以是多个消费者共同消费一个 topic 下的消息,每个消费者消费部分消息。这些消费者就组成一个分组,拥有同一个分组名称,通常也称为消费者集群</p>
</blockquote>
<p><strong><font color="blue">集群消费/广播消费</font></strong></p>
<blockquote>
<ol>
<li>集群消费，一条消息只会被同一个group里一个消费者消费。    不同group之间相互不影响。</li>
<li>广播消费，一条消息会被同一个group里每一个消费端消费。</li>
</ol>
</blockquote>
<h1 id="4-消息写入，存储与读出"><a href="#4-消息写入，存储与读出" class="headerlink" title="4. 消息写入，存储与读出"></a>4. 消息写入，存储与读出</h1><p>MetaQ的存储结构是一种物理队列+逻辑队列的结构。如下图所示：<br>![metaq]/images/metaq.png)<br>Producer生产消息，根据消息的topic选择topic对应某一个分区，然后发送到这个分区对应的Broker；Consumer根据订阅的topic选择去topic的某一个分区拉取消息。</p>
<h2 id="4-1-生产者如何选择发送分区（生产者负载均衡）"><a href="#4-1-生产者如何选择发送分区（生产者负载均衡）" class="headerlink" title="4.1 生产者如何选择发送分区（生产者负载均衡）"></a>4.1 生产者如何选择发送分区（生产者负载均衡）</h2><p>每个broker都可以配置多个topic，每个topic可以有多少个分区。topic，broker,分区三者是多对多的关系。但是在生产者看来，一个topic在所有broker上的所有分区组成一个分区列表来使用。</p>
<p>在创建producer的时候，客户端会从zookeeper上获取publish的topic对应的broker和分区列表，生产者在发送消息的时候必须选择一台broker上的一个分区来发送消息。</p>
<p>生产者在通过zk获取分区列表之后，会按照brokerId和分区的顺序排列组织成一个有序的分区列表，<strong>发送的时候按照从头到尾循环往复的方式选择一个分区来发送消息</strong>。考虑到我们的broker服务器软硬件配置基本一致，默认的轮询策略已然足够。</p>
<p>在broker因为重启或者故障等因素无法服务的时候，producer通过zookeeper会感知到这个变化，将失效的分区从列表中移除做到fail over。因为从故障到感知变化有一个延迟，可能在那一瞬间会有部分的消息发送失败(在这一瞬间如果发送的是顺序消息怎么办？)。</p>
<h2 id="4-2-存储消息"><a href="#4-2-存储消息" class="headerlink" title="4.2 存储消息"></a>4.2 存储消息</h2><p>MetaQ将消息存储在本地文件中，每个文件最大大小为1G，如果写入新的消息时，超过当前文件大小，则会自动新建一个文件。文件名称为起始字节大小。以起始字节大小命名并排序这些文件是有诸多好处的，当消费者要抓取某个起始偏移量开始位置的数据，会变的很简单，只要根据传上来的offset二分查找文件列表，定位到具体文件，然后将绝对offset减去文件的起始节点转化为相对offset，即可开始传输数据。假设，每个文件大小为1KB，图中Consumer1 订阅了TopicA,采用pull的方式来拉取消息，刚好Consumer1又被匹配到了TopicA_2分区，Consumer1需要获取{offset=1200,size=200}处的消息。需要经历如下的步骤：  </p>
<ol>
<li><p>当改pull请求发送到Broker1的时候，Broker1遍历TopicA_2分区（分区就是一些按照文件起始字节大小命名的索引文件，每一个索引文件又包含了多个索引项）找到offset对应的索引项{offset=1200,size=100B,tagHashcode=xxx}。</p>
</li>
<li><p>然后Broker1根据offset值二分查找TopicA_2的commitlog，获取到offset=1200的消息所在的真实文件（0000001024.meta）</p>
</li>
<li><p>根据真实文件的文件名000001024 获取offset=1300的消息所在文件的起始位置=276（1300-1024）</p>
</li>
<li><p>接下来，Broker1从TopicA_2分区的commitlog文件组中0000001024.meta文件的276B个字节开始，读取100B，然后返回给Consumer1。</p>
</li>
</ol>
<p>对于最终用户展现的消息队列只存储Offset,这样使得队列轻量化，单个队列数据量非常少。</p>
<p><strong>这样做的好处如下</strong>：<br>(1). 队列轻量化，单个队列数据量非常少。   </p>
<p>(2). 对磁盘的访问串行化，避免磁盘竟争，不会因为队列增加导致IOWAIT增高。   </p>
<p>每个方案都有<strong>缺点</strong>，它的缺点如下：   </p>
<p>(1). 写虽然完全是顺序写，但是读却变成了完全的随机读。   </p>
<p>(2). 读一条消息，会先读Consume Queue，再读Commit Log，增加了开销。  </p>
<p>(3). 要保证Commit Log与Consume Queue完全的一致，增加了编程的复杂度。  </p>
<p>以上缺点<strong>如何克服</strong>：<br>(1). 随机读，尽可能让读命中PAGECACHE，减少IO读操作，所以内存越大越好。如果系统中堆积的消息过多，读数据要访问磁盘会不会由于随机读导致系统性能急剧下降，答案是否定的。    </p>
<ol>
<li><p>访问PAGECACHE时，即使只访问1k的消息，系统也会提前预读出更多数据，在下次读时，就可能命中内存。</p>
</li>
<li><p>随机访问Commit Log磁盘数据，系统IO调度算法设置为NOOP(不是ANTICIPATORY吗)方式，会在一定程度上将完全的随机读变成顺序跳跃方式</p>
</li>
</ol>
<p>(2). 由于Consume Queue存储数据量极少，而且是顺序读，在PAGECACHE预读作用下，Consume Queue的读性能几乎与内存一致，即使堆积情况下。所以可认为Consume Queue完全不会阻碍读性能。</p>
<p>(3). Commit Log中存储了所有的元信息，包含消息体，类似于Mysql、Oracle的redolog，所以只要有Commit Log在，Consume Queue即使数据丢失，仍然可以恢复出来。</p>
<p>在读取消息的时候，如何加快读取消息的速度？<br>传统的read调用会经历内核态–&gt;用户态—&gt;内核态—&gt;网卡缓冲区这样一个复杂的过程。MetaQ使用了mmap的方式，将硬盘文件映射到用内存中，也就是将page cache中的页直接映射到用户进程地址空间中，从而进程可以直接访问自身地址空间的虚拟地址来访问page cache中的页，这样会并不会涉及page cache到用户缓冲区之间的拷贝。对于小文件比较管用</p>
<h2 id="4-3-消费者如何选择拉取的分区（消费者负载均衡）"><a href="#4-3-消费者如何选择拉取的分区（消费者负载均衡）" class="headerlink" title="4.3 消费者如何选择拉取的分区（消费者负载均衡）"></a>4.3 消费者如何选择拉取的分区（消费者负载均衡）</h2><p>消费者的负载均衡跟topic的分区数目紧密相关，要考察几个场景。</p>
<p>首先，单个分组内的消费者数目如果比总的分区数目多的话，则多出来的消费者不参与消费。</p>
<p>其次，如果分组内的消费者数目比分区数目小，则有部分消费者要额外承担消息的消费任务。</p>
<p>Meta的客户端会自动帮处理消费者的负载均衡，它会将消费者列表和分区列表分别排序，然后按照上述规则做合理的挂载。合理地设置分区数目至关重要。如果分区数目太小，则有部分消费者可能闲置，如果分区数目太大，则对服务器的性能有影响。<br>在某个消费者故障或者重启等情况下，其他消费者会感知到这一变化（通过 zookeeper watch消费者列表），然后重新进行负载均衡，保证所有的分区都有消费者进行消费。</p>
<h1 id="5-如何保证消息不丢"><a href="#5-如何保证消息不丢" class="headerlink" title="5. 如何保证消息不丢"></a>5. 如何保证消息不丢</h1><h2 id="5-1-生产者可靠性保证"><a href="#5-1-生产者可靠性保证" class="headerlink" title="5.1 生产者可靠性保证"></a>5.1 生产者可靠性保证</h2><p>消息生产者发送消息后返回SendResult，如果isSuccess返回为true,则表示消息已经确认发送到服务器并被服务器接收存储。整个发送过程是一个同步的过程。保证消息送达服务器并返回结果。</p>
<h2 id="5-2-服务器可靠性保证"><a href="#5-2-服务器可靠性保证" class="headerlink" title="5.2 服务器可靠性保证"></a>5.2 服务器可靠性保证</h2><p>消息生产者发送的消息，meta服务器收到后在做必要的校验和检查之后的第一件事就是写入磁盘，写入成功之后返回应答给生产者。因此，可以确认每条发送结果为成功的消息服务器都是写入磁盘的。写入磁盘，不意味着数据落到磁盘设备上，毕竟我们还隔着一层os，os对写有缓冲。Meta有以下刷盘策略：</p>
<p><strong>异步刷盘</strong>：  </p>
<ol>
<li>每1000条消息（可配置），即强制调用一次force来写入磁盘设备。</li>
<li>每隔10秒（可配置），强制调用一次force来写入磁盘设备。    </li>
</ol>
<p><strong>同步刷盘</strong><br>如果存储配置上的groupCommitEnable选项为true，则会在写入消息后，立即强制刷盘。</p>
<h2 id="5-3-消费者可靠性保证"><a href="#5-3-消费者可靠性保证" class="headerlink" title="5.3 消费者可靠性保证"></a>5.3 消费者可靠性保证</h2><p>消费者是一条接着一条地消费消息，只有在成功消费一条消息后才会接着消费下一条。如果在消费某条消息失败（如异常），则会尝试重试消费这条消 息（默认最大5次），超过最大次数后仍然无法消费，则将消息存储在消费者的本地磁盘，由后台线程继续做重试。而主线程继续往后走，消费后续的消息。因此， 只有在MessageListener确认成功消费一条消息后，meta的消费者才会继续消费另一条消息。由此来保证消息的可靠消费。消费者的另一个可靠性的关键点是offset的存储，也就是拉取数据的偏移量。默认存储在zoopkeeper上，zookeeper通过集群来保证数据的安全性。Offset会定期保存，并且在每次重新负载均衡前都会强制保存一次，因此可能会存在极端情况下的消息的重复消费。</p>
<h1 id="6-消息过滤（服务端-客户端）"><a href="#6-消息过滤（服务端-客户端）" class="headerlink" title="6. 消息过滤（服务端/客户端）"></a>6. 消息过滤（服务端/客户端）</h1><p>消息过滤主要使用Message 的Tag字段做的。</p>
<ol>
<li>在服务端，每一条消息对应的Tag被转换成一个8byte的hashcode, 在Broker 端对比Queue中每一个存储单元的的hashcode和 订阅的Tag的hashcode进行对比，不符合，则跳过，继续比对下一个，符合则传输给Consumer。在队列中进行hashcode对比</li>
<li>Consumer 收到过滤后的消息后，再次将传递过来的Message中的Tag字符串和订阅的Tag字符串进行对比，不是hashcode。这样做可以避免Hash冲突</li>
</ol>
<h1 id="7-消息重复性"><a href="#7-消息重复性" class="headerlink" title="7. 消息重复性"></a>7. 消息重复性</h1><p>MetaQ<font color="red">不能保证消息不重复</font>,原因如下：</p>
<ul>
<li>发送消息阶段，会存在分布式环境下典型的超时问题,即发送阶段不能保证消息不重复。</li>
<li>订阅消息阶段，由于涉及集群订阅，多个订阅方需要使用负载均衡方式订阅，在因负载均衡出现的短暂不一致的情况下可能会重复。</li>
<li>订阅者意外宕机，消费进度未及时存储也会产生息重复。</li>
</ul>
<p>如何解决？</p>
<ul>
<li>Consumer收到消息后，通过Tair,DB去重。</li>
<li>使用Pull的方式拉取消息，但是Pull的时候，怎么协调分配队列需要应用控制。</li>
</ul>
<h1 id="8-消息顺序性"><a href="#8-消息顺序性" class="headerlink" title="8. 消息顺序性"></a>8. 消息顺序性</h1><p><strong>顺序消息</strong>：消费消息的顺序要同发送消息的顺序一致，在 MetaQ 中，主要指的是局部顺序，即一类消息为满足顺 序性，必须 Producer 单线程顺序发送，且发送到同一个队列，这样 Consumer 就可以按照 Producer 发送 的顺序去消费消息。</p>
<p><strong>普通顺序消息</strong>：顺序消息的一种，正常情况下可以保证完全的顺序消息，但是一旦发生通信异常，Broker 重启，由于队列 总数发生变化，哈希取模后定位的队列会变化，产生短暂的消息顺序不一致。 如果业务能容忍在集群异常情况（如某个 Broker 宕机或者重启）下，消息短暂的乱序，使用普通顺序方 式比较合适。</p>
<p><strong>严格顺序消息</strong>：顺序消息的一种，无论正常异常情况都能保证顺序，但是牺牲了分布式 Failover 特性，即 Broker 集群中只 要有一台机器不可用，则整个集群都不可用，服务可用性大大降低。 如果服务器部署为同步双写模式，此缺陷可通过备机自动切换为主避免，不过仍然会存在几分钟的服务不可用。</p>
<h1 id="9-Pull-Push模型对比"><a href="#9-Pull-Push模型对比" class="headerlink" title="9. Pull/Push模型对比"></a>9. Pull/Push模型对比</h1><p>Pull: Comsumer主动请求Broker获取消息，请求的时候需要指定消息的offset（第一次读取为0，根据每次读取的返回值可以获取到下一次需要读取的offset）。这样只要事先知道offset，只要消息还没有被清除就能读取消息出来在（即使已经读取过了）</p>
<p>Push：Consumer事先注册监听，由Broker主动推送消息到Consumer。Push能加载出未读取的消息的原因是MetaQ的服务端维护了一个offset。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HSF学习]]></title>
      <url>http://thinerzq.com/2016/07/22/AliBaBa/HSF%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A/</url>
      <content type="html"><![CDATA[<p>HSF(High-Speed Service Framework)，是一个高性能的分布式服务框架。一个分布式框架提供的最基本的功能就是远程调用（A机器调用B机器上的一个对象的方法，B机器将方法到返回值发送回A机器）。HSF面向接口编程，以“Service”的形式进行远程调用，简单的说就是接口的具体实现(服务)运行在服务器上，服务器将这些接口暴露出来，客户端拿到这些接口之后通过接口调用具体的服务。在服务发布和调用过程中主要涉及到下面这些知识。</p>
<h1 id="1-服务注册"><a href="#1-服务注册" class="headerlink" title="1.服务注册"></a>1.服务注册</h1><p>服务注册的基本要素就是</p>
<h2 id="1-1-将服务metadata发布到ConfigServer上"><a href="#1-1-将服务metadata发布到ConfigServer上" class="headerlink" title="1.1 将服务metadata发布到ConfigServer上"></a>1.1 将服务metadata发布到ConfigServer上</h2><p>ConfigServer就是存放ServiceID – ip地址映射关系(多对多)的机器，服务的元信息包括在HSFSpringProviderBean中配置的信息和服务所在的ip地址。服务的发布流程非常复杂</p>
<p>首先在beans里面配置一个HSFSpringProviderBean以及一些属性，必要的有serviceInterface和target。在HSFSpringProviderBean里面还包装了一层 HSFApiProviderBean,HSFApiProviderBean里面包装了ServiceMetadata元数据类（关于服务的配置信息基本都在这儿）和MetadataService类，当所有配置的属性初始化完成之后，就开始调用init方法做一些发布之前的配置信息检查，再调用publish方法准备发布服务（这里面涉及到一个HSFServiceContainer单例类），通过HSFServiceContainer得到ProcessComponent的对象，调用ProcessComponent.publish()方法正真的发布服务.实际的发布过程挺复杂。</p>
<h2 id="1-2-将服务对象注册到本地Server容器，"><a href="#1-2-将服务对象注册到本地Server容器，" class="headerlink" title="1.2. 将服务对象注册到本地Server容器，"></a>1.2. 将服务对象注册到本地Server容器，</h2><p>将某一个接口的具体实现注册到本地的Server容器里面，等待客户端调用</p>
<a id="more"></a>
<h1 id="2-服务发现"><a href="#2-服务发现" class="headerlink" title="2. 服务发现"></a>2. 服务发现</h1><p>为了调用一个HFS服务，客户端首先要从ConfigServer订阅这个服务的dataId，及时拿到服务发布方的地址列表。。ConfigServer负责管理地址，异步推送。服务提供者将服务发布到某一个机器上，并向ConfigServer报告服务所在的机器ip和服务对应的ddataId。当服务消费者需要调用服务的时候，首先向ConfigServer请求服务对应的ip,根据配置的规则（服务寻址）返回某一个ip，之后由服务消费者向对应的服务提供者ip发起TCP连接，建立通信。整个服务发现的过程就完成了</p>
<h1 id="3-远程调用"><a href="#3-远程调用" class="headerlink" title="3. 远程调用"></a>3. 远程调用</h1><p>分布式框架主要特点就是远程调用，在提供强大的远程调用能力时不损失本地调用的语义简洁性.  由于HSF自身屏蔽了异步网络之间调用的差异性，同时HSF采用面向接口的实现形式，整个远程调用的关键就是拿到和服务端暴露出来的借口并编写正确清晰的业务逻辑。<br>调用分类</p>
<ol>
<li>Sync,这个就是一般同步调用，不适合于耗时长的服务调用。</li>
<li>Future，这个和Java中的Future模式一样，在需要的时候通过HSFResponseFuture.getResponse(timeout)返回结果</li>
<li>Callback，这个是属于回调类型，需要注意的是由于只用方法名字来标识方法,所以并不区分重载的方法。同名的方法都会被设置为同样的调用方式。<br>回调函数是由 io 线程来调用, 所以不要在拿到结果后做费时的操作。<br>不能在 onReponse 里边再发起 hsf 调用,目前这种做法可能导致 io 线程挂起,无法恢复。</li>
<li>泛化调用，就是完全剥离的对api的依赖，以字符串的形式提供远程调用的接口名，方法名，参数类型等</li>
</ol>
<h1 id="4-动态代理"><a href="#4-动态代理" class="headerlink" title="4. 动态代理"></a>4. 动态代理</h1><p>动态代理主要用于实现无侵入式的代码扩展和远程调用，动态代理在远程调用中主要是通过在InvocationHandler的invoke方法里面将需要调用的对象的名字，方法的名字，参数等信息发送给服务端，等待服务端的返回。因为HSF使用的是基于接口的编程，所以其中的代理主要使用的是jdk自带的动态代理。</p>
<h1 id="5-序列化-反序列化"><a href="#5-序列化-反序列化" class="headerlink" title="5. 序列化/反序列化"></a>5. 序列化/反序列化</h1><p>序列化一般用于本地持久化存储和网络传输，在这里使用序列化主要就是将客户端和服务端需要传递到对端的对象转化成字节数组，以便于网络传输。序列化的产品比较多，HSF的序列化是通过Hessian来完成的。下面将Java自带的序列化和Hessian做一个对比：</p>
<ol>
<li>Java序列化会把要序列化的对象类的元数据和业务数据全部序列化从字节流，而且是把整个继承关系上的东西全部序列化了。它序列化出来的字节流是对那个对象结构到内容的完全描述，包含所有的信息，因此效率较低而且字节流比较大。但是由于确实是序列化了所有内容，所以可以说什么都可以传输，因此也更可用和可靠。   </li>
<li>hessian序列化，它的实现机制是着重于数据，附带简单的类型信息的方法。就像Integer a = 1，hessian会序列化成I 1这样的流，I表示int or Integer，1就是数据内容。而对于复杂对象，通过Java的反射机制，hessian把对象所有的属性当成一个Map来序列化，产生类似M className1 propertyName1 I 1 propertyName S stringValue这样的流，包含了基本的类型描述和数据内容。而在序列化过程中，如果一个对象之前出现过，hessian会直接插入一个R index这样的块来表示一个引用位置，从而省去再次序列化和反序列化的时间。Hessian序列化直接忽略了serialVersionUID，同时在遇到子类和父类中有同名变量的时候，对子类进行序列化子类的值被父类的值覆盖的问题。</li>
</ol>
<h1 id="6-超时机制"><a href="#6-超时机制" class="headerlink" title="6. 超时机制"></a>6. 超时机制</h1><p>超时机制是远程方法调用过程中配置调用超时的超时时间，可以在服务端和客户端同时配置，同时配置可以细化到接口和接口中的方法。clientTimeout：对接口中的所有方法生效，methodspecial,对指定的某几个方法生效。四个方法的优先级规则如下：    客户端methodspecial &gt; 客户端clientTimeout &gt; 服务端methodspecial &gt; 服务端clientTimeout。超时了HSF会throw HSFTimeoutException，由业务代码catch之后处理，比如重试、fail fast等等。</p>
<h1 id="7-机房路由"><a href="#7-机房路由" class="headerlink" title="7. 机房路由"></a>7. 机房路由</h1><p>机房路由主要指的是分布在所有服务器上的各个服务的调用规则，主要通过Diamond配置中心配置的</p>
<ol>
<li>路由规则，可以通过groovy脚本指定接口路由，方法路由，参数路由。</li>
<li>归组规则，用于对发布了同一 HSF 服务的所有机器进行统一归组的规则 。通过xml文件配置</li>
<li>同机房优先规则，保证 HSF 服务消费者在请求 HSF 服务时，优先选择与服务消费者同机房的服务提供者。主要需要指定一个阈值，生效阀值的计算方法: 服务可用比例=本机房可用机器数量/所有服务机器数量 当服务可用比例 &gt;= threshold 时，启用本地机房优先策略，当服务可用比例 &lt; threshold 时，本地机房优先策略关闭,服务仍然采用随机调用的方式。通过xml形式配置</li>
<li>权重规则，如果用户不想对流量进行硬性导向，但倾向于将流量多往某几台机 器上引导，这时候就可以将这几台机器的权重规则配置大一点。某一台机器的调用概率计算公式：某一台机器的权重/所有机器的权重之和。</li>
<li>全局规则，配置HSF日志级别，虚机房等</li>
<li>TPS限流，允许应用提供方指定某个接口的TPS，当单位时间内的TPS达到设定值时，该接口将停止对外提供服务，所有的请求都会被拦截（立刻返回，错误消息TPS限流)，直到下一个刷新时间点。支持接口级别和方法级别。</li>
<li>支持应用级别，接口级别和方法级别，只有白名单中的应用才可以调用，通过Diamond推送到服务端生效。</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>HSF作为一个高性能分布式服务框架，主要使用了ConfigServer来作为注册中心，Diamond来做软负载，通过接口变成实现动态代理。它的高性能应该主要体现在Diamond中规则的配置和ConfigServer的服务的动态注册和发现。从HSF的整体结构上来看,还涉及到了协议层，以及Netty网络流传输。<br><img src="/images/hsf.png" alt="HSF整体结构"><br>下面这几点配合链接里面流程图和源码看对于深入理解HSF很有启发，</p>
<ol>
<li><a href="http://www.atatech.org/articles/43956" target="_blank" rel="external">HSF服务发布流程</a></li>
<li><a href="http://www.atatech.org/articles/43956" target="_blank" rel="external">HSF服务消费流程</a></li>
<li><a href="http://www.atatech.org/articles/51156" target="_blank" rel="external">服务端发布与处理请求，客户端订阅与调用流程</a></li>
<li><a href="http://iwinit.iteye.com/blog/1745132" target="_blank" rel="external">容器启动流程</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ibatis学习]]></title>
      <url>http://thinerzq.com/2016/07/20/ibatis/ibatis%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A/</url>
      <content type="html"><![CDATA[<h1 id="iBatis-简介："><a href="#iBatis-简介：" class="headerlink" title="iBatis 简介："></a>iBatis 简介：</h1><p>iBatis 是apache 的一个开源项目(2010后改名为Mybatis)，一个半自动化的O/R Mapping 解决方案，iBatis 最大的特点就是小巧，上手很快。<br>适用于以下场景：</p>
<ol>
<li>系统的部分或全部数据来自现有数据库，出于安全考虑，只对开发团队提供几条Select SQL（或存储过程）以获取所需数据，具体的表结构不予公开。</li>
<li>开发规范中要求，所有牵涉到业务逻辑部分的数据库操作，必须在数据库层由存储过程实现</li>
<li>系统数据处理量巨大，性能要求极为苛刻，这往往意味着必须通过经过高度优化的SQL语句才能达到系统性能设计指标。</li>
</ol>
<p>ORM框架都是在JDBC层面上的封装，把如下的jdbc代码分解到不同的步骤去执行，以达到流程化，可定制，方便配置管理的目的。<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line">Connection conn= DriverManager.getConnection(url,user,password);</div><div class="line">PreparedStatement  st = conn.prepareStatement(sql);</div><div class="line">st.setInt(<span class="number">0</span>,<span class="number">1</span>);</div><div class="line">st.execute();</div><div class="line">ResultSet rs =  st.getResultSet();</div><div class="line"><span class="keyword">while</span>(rs.next())&#123;</div><div class="line">    String result = rs.getString(colname);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>iBatis主要做了两件事:</p>
<ul>
<li>根据 JDBC 规范建立与数据库的连接</li>
<li>通过反射打通 Java 对象与数据库参数交互之间相互转化关系。</li>
</ul>
<p>iBATIS的一个重要组成部分就是其 SqlMap 配置文件，SqlMap 配置文件的核心是 Statement 语句包括CRUD。 iBATIS 通过解析 SqlMap 配置文件得到所有的 sql 执行语句，同时会形成 ParameterMap、ResultMap 两个对象用于处理sql语句中的参数和sql语句执行后的ResultSet–&gt;Object的构造。</p>
<a id="more"></a>
<h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><h2 id="SqlMapConfig-xml"><a href="#SqlMapConfig-xml" class="headerlink" title="SqlMapConfig.xml"></a>SqlMapConfig.xml</h2><ul>
<li><p>properties：将数据连接单独配置在db.properties中，只需要在SqlMapConfig.xml中加载db.properties的属性值，在SqlMapConfig.xml中就不需要对数据库连接参数进行硬编码。数据库连接参数只配置在db.properties中，方便对参数进行统一管理，其它xml可以引用该db.properties</p>
</li>
<li><p>settings：全局配置参数，用于配置和优化SqlMapClient实例的各选项，如缓存，延迟加载，最大线程数等等。</p>
</li>
<li>typeAlias：为一个通常较长的、全限定类名指定一个较短的别名。SQL Map配置文件预定义了几个别名<ol>
<li>JDBC com.ibatis.sqlmap.engine.transaction.jdbc.JdbcTransactionConfig</li>
<li>JTA    com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig</li>
<li>EXTERNAL com.ibatis.sqlmap.engine.transaction.external.ExternalTransactionConfig</li>
<li>SIMPLE   com.ibatis.sqlmap.engine.datasource.SimpleDataSourceFactory</li>
<li>DBCP     com.ibatis.sqlmap.engine.datasource.DbcpDataSourceFactory</li>
<li>JNDI     com.ibatis.sqlmap.engine.datasource.JndiDataSourceFactory</li>
</ol>
</li>
<li><p>transactionManager ： 为SQL Map配置事务管理服务。属性type指定所使用的事务管理器类型。这个属性值可以是一个类名，也可以是一个别名。包含在框架的三个事务管理器分别是：JDBC，JTA和EXTERNAL。</p>
<ul>
<li>JDBC：通过常用的Connection commit()和rollback()方法，让JDBC管理事务。</li>
<li>JTA：本事务管理器使用一个JTA全局事务，使SQL Map的事务包括在更大的事务范围内，这个更大的事务范围可能包括了其他的数据库和事务资源。这个配置需要一个UserTransaction属性，以便 从JNDI获得一个UserTransaction</li>
<li>EXTERNAL：这个配置可以让您自己管理事务。您仍然可以配置一个数据源，但事务不再作为框架生命周期的一部分被提交或回退。这意味着SQL Map外部应用的一部分必须自己管理事务。这个配置也可以用于没有事务管理的数据库（例如只读数据库）</li>
</ul>
</li>
<li><p>dataSource：是transactionManager的一部分，为SQL Map数据源设置了一系列参数。必需配置的是的是jdbcdriver url,username,password。</p>
</li>
<li>sqlMap ：用于包括SQL Map映射文件和其他的SQL Map配置文件。每个SqlMapClient对象使用的所有SQL Map映射文件都要在此声明。映射文件作为stream resource从类路径或URL读入。</li>
</ul>
<h2 id="sqlMap-xml"><a href="#sqlMap-xml" class="headerlink" title="sqlMap.xml"></a>sqlMap.xml</h2><p>sqlMap.xml常用的配置文件的通常主要包括一些具体的sql操作映射,具体说来主要包括如下的元素：</p>
<ul>
<li>sqlMap: sqlMap作为根节点，其中的namespace属性用来防止不同的sqlMap文件中同名方法的冲突，在调用的时候使用namespace.id调用就行了。</li>
<li>typeAlias</li>
<li>resultMap：结果映射，主要用于指定数据库列名和返回对象属性名的对应关系</li>
<li>parameterMap：参数映射，主要用于指定传入参数对象的属性名以及类型与数据库列名与类型的对应关系。</li>
<li>insert，select,update,delete：用于写CRUD 语句的标签，它的parameterMap和resultMap属性指定了程序传递进来的参数如何映射构成sql语句，已经如果将ResultSet结果返回成需要的对象。select中有一个selectKey用于自动生成数据库主键；select语句中可以使用cacheModel来指定缓存。</li>
<li>procedure:用于定义存储过程</li>
<li>sql：定义一段公用的sql语句，在insert,select，update,delete中引用，消除重复<h3 id="映射关系分析"><a href="#映射关系分析" class="headerlink" title="映射关系分析"></a>映射关系分析</h3>ibateis中，parameterClass的类型大都是：String,Integer/Object/Hashmap<br>resultclass/resultMap的类型大都是：Object/Hashmap</li>
</ul>
<ol>
<li>当parameterClass为string,int时，可用#value#表示或直接用传入的值名表示。</li>
<li>当parameterClass/resultMap的类型是对象时，用#属性#表示。程序会调用JAVABEAN的getter方法，进行获取属性值。</li>
<li>当parameterClass/resultMap的类型是hashmap时，那程序会直接通过key来分析取参数。</li>
<li>#是把传入的数据当作字符串，#方式一般用于传入插入/更新的值或查询/删除的where条件。通过PreparedStatement.set(1,value)的形式插入到sql中</li>
<li>$传入的数据直接生成在sql里。$方式一般用于传入数据库对象．例如传入表名.</li>
</ol>
<h3 id="动态映射"><a href="#动态映射" class="headerlink" title="动态映射"></a>动态映射</h3><p>ibatis还要一个功能点就是动态映射，提高了SQL语句的重用性和灵活性。主要做法就是提供了一系列的动态SQL标签，能够根据传入的参数值的数量，大小，null等做判断生成对应的sql。主要的标签有dynamic,isNull,isNotNull,iterator等。</p>
<h1 id="配置解析"><a href="#配置解析" class="headerlink" title="配置解析"></a>配置解析</h1><p>一切都要从SqlMapClientBuilder开始说起。首先构造InputStream或者Reader读取配置文件，然后通过SqlMapClientBuilder的静态方法实例化SqlMapConfigParser，其中使用org.w3c.dom来解析文档，当读到xx标签的时候，就实例化xx标签对应的对象）。等到文件解析完,数据源，事物等配置好，所有的CRUD语句加载完返回SqlMapClient实例，SqlMapClient提供了程序和ibatis的交互接口</p>
<h1 id="重要类的说明"><a href="#重要类的说明" class="headerlink" title="重要类的说明"></a>重要类的说明</h1><ul>
<li>SqlMapClient：提供给编程者的接口，使用这个接口可以执行SqlMap文件中定义的半形式化的sql语句</li>
<li>SqlMapClientImpl：SqlMapClientImpl类使用了ThreadLocal类型的成员变量来存储关联的SqlMapSessionImpl对象。这就是限制了每个线程都只能操作自己记录的SqlMapSessionImpl数据，从而保证了该属性的线程安全。</li>
<li>SqlMapSessionImpl：主要是为了持有本次session的SessionScope对象，这个勒种的绝大部分数据操作都转交给了SqlMapExecutorDelegate去完成。</li>
<li>SqlMapExecutorDelegate：一个工具类，所有的SqlMapClient提供给外部的操作都是通过这个类来完成的，主要为各个操作开启，关闭事物的。</li>
<li>MappedStatement：为各个CRUD方法的构造RowHandlerCallback对象，验证参数类型，取出参数。</li>
<li>SqlMapExecutor：实例化PreparedStatement, 取得TypeHandler，获取ParameterMap为PreparedStatement设置参数，并执行最终的sql语句得到ResultSet,并调用 MappedStatement中的RowHandlerCallback处理返回结果，RowHandlerCallback获取到当前的ResultMap判断是哪一种DataExchange(object,hashmap,list)并使用对应的DataExchange做类型映射，最后通过ResultObjectFactoryUtil通过反射实例化需要返回的对象。</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>iBatis真的是一个简单易学的持久层框架，将Sql语言与java程序分离，便于维护和开发，大大简化了jdbc操作。与Hibernate相比，虽然没有Hibernate的功能强大，sql语言的效率更高，更灵活。Hibernate提供了从object&lt;–&gt;jdbc完全的封装，用多了sql语句会生疏，iBatis更加的简单易懂，配置灵活。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Jvm学习]]></title>
      <url>http://thinerzq.com/2016/07/11/java/jvm%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A/</url>
      <content type="html"><![CDATA[<h1 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h1><ol>
<li>程序计数器（Program Counter Register）：程序计数器是一个比较小的内存区域，用于指示当前线程所执行的字节码执行到了第几行，可以理解为是当前线程的行号指示器。字节码解释器在工作时，会通过改变这个计数器的值来取下一条语句指令。每个程序计数器只用来记录一个线程的行号，所以它是线程私有（一个线程就有一个程序计数器）的。</li>
<li>虚拟机栈（JVM Stack）：一个线程的每个方法在执行的同时，都会创建一个栈帧（Statck Frame），栈帧中存储的有局部变量表、操作站、动态链接、方法出口等，当方法被调用时，栈帧在JVM栈中入栈，当方法执行完成时，栈帧出栈。局部变量表中存储着方法的相关局部变量，包括各种基本数据类型，对象的引用，返回地址等。在局部变量表中，只有long和double类型会占用2个局部变量空间（Slot，对于32位机器，一个Slot就是32个bit），其它都是1个Slot。局部变量表是在编译时就已经确定好的，方法运行所需要分配的空间在栈帧中是完全确定的，在方法的生命周期内都不会改变。每个线程对应着一个虚拟机栈，因此虚拟机栈也是线程私有的。</li>
<li>本地方法栈（Native Method Statck）：本地方法栈在作用，运行机制，异常类型等方面都与虚拟机栈相同，唯一的区别是：虚拟机栈是执行Java方法的，而本地方法栈是用来执行native方法的，HotSpot会将本地方法栈与虚拟机栈放在一起使用。本地方法栈也是线程私有的。</li>
<li><p>堆区（Heap）：在JVM所管理的内存中，堆区是最大的一块，堆区也是Java GC机制所管理的主要内存区域，堆区由所有线程共享，在虚拟机启动时创建。堆区的存在是为了存储对象实例，原则上讲，所有的对象都在堆区上分配内存（基于逃逸分析，没有逃逸出方法体的对象，没有必要再堆上分配）。</p>
</li>
<li><p>方法区（Method Area）：方法区是各个线程共享的区域，用于存储已经被虚拟机加载的类信息（即加载类时需要加载的信息，包括版本、field、方法、接口等信息）、final常量、静态变量、编译器即时编译的代码等。</p>
</li>
</ol>
<a id="more"></a>
<h1 id="内存回收"><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h1><h2 id="垃圾对象的判断"><a href="#垃圾对象的判断" class="headerlink" title="垃圾对象的判断"></a>垃圾对象的判断</h2><p>Java 堆中存放着几乎所有的对象实例，垃圾收集器对堆中的对象进行回收前，要先确定这些对象是否还有用，有用与否又和引用的强弱有关。java将引用分为强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）、虚引用（Phantom Reference）四种，引用强度依次减弱。</p>
<ul>
<li>强引用：如“Object obj = new Object（）”，这类引用是 Java 程序中最普遍的。只要强引用还存在，垃圾收集器就永远不会回收掉被引用的对象。</li>
<li>软引用：SoftReference，它用来描述一些可能还有用，但并非必须的对象。在系统内存不够用时，这类引用关联的对象将被垃圾收集器回收。</li>
<li>弱引用：WeakReference，它也是用来描述非需对象的，但它的强度比软引用更弱些，被弱引用关联的对象只能生存岛下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。</li>
<li>虚引用：PhantomReference，最弱的一种引用关系，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的是希望能在这个对象被收集器回收时收到一个系统通知。</li>
</ul>
<p>对象是否有用还和是否有对象还在继续引用它，将来还会不会被使用有关。判定对象是否为垃圾对象有如下算法：</p>
<p><strong>引用计数法</strong></p>
<p>给对象添加一个引用计数器，每当有一个地方引用它时，计数器值就加 1，当引用失效时，计数器值就减1，任何时刻计数器都为 0 的对象就是不可能再被使用的。</p>
<p>引用计数算法的实现简单，判定效率也很高，在大部分情况下它都是一个不错的选择，当 Java 语言并没有选择这种算法来进行垃圾回收，主要原因是它很难解决对象之间的相互循环引用问题。</p>
<p><strong>根搜索法</strong><br>Java 采用根搜索算法来判定对象是否存活的。这种算法的基本思路是通过一系列名为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到 GC Roots 没有任何引用链相连时，就证明此对象是不可用的。在 Java 语言里，可作为 GC Roots 的对象包括下面几种：</p>
<ul>
<li>虚拟机栈（栈帧中的本地变量表）中引用的对象。</li>
<li>方法区中的类静态属性引用的对象。</li>
<li>方法区中的常量引用的对象。</li>
<li>本地方法栈中 JNI（Native 方法）的引用对象。</li>
</ul>
<p>Java 中的垃圾回收一般是在 Java 堆中进行，因为堆中几乎存放了 Java 中所有的对象实例。</p>
<h2 id="收集算法"><a href="#收集算法" class="headerlink" title="收集算法"></a>收集算法</h2><p>当前商业虚拟机的垃圾收集 都采用分代收集，它根据对象的存活周期的不同将内存划分为几块，一般是把 Java 堆分为新生代和老年代。在新生代中，每次垃圾收集时都会发现有大量对象死去，只有少量存活，因此可选用复制算法来完成收集，而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用标记—清除算法或标记—整理算法来进行回收。</p>
<h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><p>复制算法比较适合于新生代，将存活下来的少部分对象对象复制到另外一块空间。浪费空间</p>
<h3 id="标记—清除算法"><a href="#标记—清除算法" class="headerlink" title="标记—清除算法"></a>标记—清除算法</h3><p>标记—清除算法是最基础的收集算法，它分为“标记”和“清除”两个阶段：首先标记出所需回收的对象，在标记完成后统一回收掉所有被标记的对象，它的标记过程其实就是前面的根搜索算法中判定垃圾对象的标记过程。有内存碎片</p>
<h3 id="标记—整理算法"><a href="#标记—整理算法" class="headerlink" title="标记—整理算法"></a>标记—整理算法</h3><p>该算法标记的过程与标记—清除算法中的标记过程一样，但对标记后出的垃圾对象的处理情况有所不同，它不是直接对可回收对象进行清理，而是让所有的对象都向一端移动，然后直接清理掉端边界以外的内存。成本较高，无内存碎片。</p>
<h2 id="可用的GC"><a href="#可用的GC" class="headerlink" title="可用的GC"></a>可用的GC</h2><h3 id="New-Generation-可用的GC"><a href="#New-Generation-可用的GC" class="headerlink" title="New Generation 可用的GC"></a>New Generation 可用的GC</h3><ul>
<li><p>Serial: 这个收集器是一个单线程的收集器，但它的“单线程”的意义并不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束。Serial收集器是虚拟机运行在Client模式下的默认新生代收集器。</p>
</li>
<li><p>Parallel Scavenge：它也是使用复制算法的收集器，又是并行的多线程收集器。Parallel Scavenge收集器的目标则是达到一个可控制的吞吐量（Throughput）。自适应（会动态调整SurvivorRatio的大小,也可以固定).</p>
</li>
<li><p>ParNew：ParNew收集器其实就是Serial收集器的多线程版本，除了使用多条线程进行垃圾收集之外，其余行为包括Serial收集器可用的所有控制参数、收集算法、Stop The World、对象分配规则、回收策略等都与Serial收集器完全一样。ParNew收集器是许多运行在Server模式下的虚拟机中首选的新生代收集器。配合使用老年代的CMS</p>
</li>
</ul>
<h3 id="Old-Generation-可用的GC"><a href="#Old-Generation-可用的GC" class="headerlink" title="Old Generation 可用的GC"></a>Old Generation 可用的GC</h3><ul>
<li><p>Serial Old : Serial Old是Serial收集器的老年代版本，它同样是一个单线程收集器，使用标记－整理算法。Serial Old收集器的主要意义也是在于给Client模式下的虚拟机使用。</p>
</li>
<li><p>Parallel Old：Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和“标记－整理”算法。</p>
</li>
<li><p>CMS：CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。CMS收集器是基于“标记—清除”算法实现的，它的运作过程相对于前面几种收集器来说更复杂一些，整个过程分为4个步骤：</p>
<ul>
<li>初始标记（CMS initial mark）：初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，需要“Stop The World”。</li>
<li>并发标记（CMS concurrent mark）：并发标记阶段就是进行GC Roots Tracing的过程。</li>
<li>重新标记（CMS remark）：重新标记阶段是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短，仍然需要“Stop The World”。</li>
<li>并发清除（CMS concurrent sweep）：并发清除阶段会清除对象。</li>
</ul>
<p>由于整个过程中耗时最长的并发标记和并发清除过程收集器线程都可以与用户线程一起工作，所以，从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。另外CMS收集器无法处理浮动垃圾，可能出现“Concurrent Mode Failure”失败而导致另一次Full GC的产生，同时也会产生大量的空间碎片</p>
</li>
<li><p>G1：G1（Garbage-First）是一款面向服务端应用的垃圾收集器。G1收集器的运作大致可划分为以下几个步骤：</p>
<ul>
<li>初始标记（Initial Marking）：初始标记阶段仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS（Next Top at Mark Start）的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象，这阶段需要停顿线程，但耗时很短。</li>
<li>并发标记（Concurrent Marking）：并发标记阶段是从GC Root开始对堆中对象进行可达性分析，找出存活的对象，这阶段耗时较长，但可与用户程序并发执行。</li>
<li>最终标记（Final Marking）：最终标记阶段是为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程Remembered Set Logs里面。最终标记阶段需要把Remembered Set Logs的数据合并到Remembered Set中，这阶段需要停顿线程，但是可并行执行。</li>
<li>筛选回收（Live Data Counting and Evacuation）：筛选回收阶段首先对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划，这个阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分Region，时间是用户可控制的，而且停顿用户线程将大幅提高收集效率。</li>
</ul>
</li>
</ul>
<h1 id="JVM内存状况查看方法和工具分析"><a href="#JVM内存状况查看方法和工具分析" class="headerlink" title="JVM内存状况查看方法和工具分析"></a>JVM内存状况查看方法和工具分析</h1><ol>
<li>输出GC日志：指定jvm启动参数，输出到控制台:-XX:PrintGC，-XX:PrintGCDetail。输出到指定的文件：-Xloggc:gc.log</li>
<li>GC Protal：输入GC日志文件，产生图形化的报表，部署麻烦，需要老版本jdk</li>
<li>JConsole：以图形化的方式查看JVM中内存你的变化状况</li>
<li>JVisualVM：查看内存的消耗状况，线程的执行状况以及程序中消耗cpu,内存的动作</li>
<li>JMap：JMap -heap pid 查看进程堆情况，JMap-histo pid 查看堆中对象的纤细占用情况，JMap -dump:format=b,file=文件名 pid：导出整个jvm的内存信息。</li>
<li>JHat：分析jvm dump的工具，和JMap搭配使用，JHat -J-Xmx2014M filename</li>
<li>JStat ：JStat -gcutil pid interval_time , 以一定的频率查看各代的占用情况</li>
</ol>
<h1 id="jvm-代码编译与执行"><a href="#jvm-代码编译与执行" class="headerlink" title="jvm 代码编译与执行"></a>jvm 代码编译与执行</h1><p>Java 虚拟机屏蔽了与具体操作系统平台相关的信息,使得 Java 语言编译程序只需生成在 Java 虚拟机上运行的目标代码(字节码),就可以在多种平台上不加修改地运行。Java 虚拟机在执行字节码时,实际上最终还是把字节码解释成具体平台上的机器指令执行。</p>
<p>Java 代码编译和执行的整个过程包含了以下三个重要的机制：</p>
<ul>
<li>Java源码编译机制</li>
<li>类加载机制</li>
<li>类执行机制</li>
</ul>
<h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><p>类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载、验证、准备、解析、初始化五个阶段。在这五个阶段中，加载、验证、准备和初始化这四个阶段发生的顺序是确定的，而解析阶段则不一定，它在某些情况下可以在初始化阶段之后开始，这是为了支持 Java 语言的运行时绑定（运行时根据具体对象的类型进行绑定，ava 当中的方法只有 final，static，private 和构造方法是前期绑定的）。</p>
<h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>主要是找到class文件,并加载到jvm。通过类的全限定吗+对应的classloader一起标识一个加载的类。数组元素对应类型由classloader加载，数组类由jvm直接创建。在 Java 堆中生成一个代表这个类的 java.lang.Class 对象，作为对方法区中class文件元数据的访问入口。</p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>验证的目的是为了确保 Class 文件中的字节流包含的信息符合当前虚拟机的要求，而且不会危害虚拟机自身的安全（掌握了class文件的格式可以篡改class文件危害虚拟机）。主要包括如下四方面：</p>
<ul>
<li>文件格式的验证：验证字节流是否符合 Class 文件格式的规范，并且能被当前版本的虚拟机处理（低版本不能处理高版本的），该验证的主要目的是保证输入的字节流能正确地解析并存储于方法区之内。</li>
<li>元数据的验证：其实就是对类中的各数据类型进行语法校验，保证不存在不符合 Java 语法规范的元数据信息。</li>
<li>字节码验证：该阶段验证的主要工作是进行数据流和控制流分析，对类的方法体进行校验分析，以保证被校验的类的方法在运行时不会做出危害虚拟机安全的行为。</li>
<li>符号引用验证：它发生在虚拟机将符号引用转化为直接引用的时候，主要是对类自身以外的信息（常量池中的各种符号引用）进行匹配性的校验。</li>
</ul>
<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>初始化类中的静态成员变量，赋默认值，对static final 的常量赋指定的值</p>
<h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>解析阶段是虚拟机将常量池中的符号引用（就是各种class中所关联的其他类的名字，需要调用的方法，字段名字等）转化为直接引用（对应在内存中的的目标地址）的过程。虚拟机会根据需要（是否动态绑定，方法的修饰符等）来判断，到底是在类被加载器加载时就对常量池中的符号引用进行解析（初始化之前），还是等到一个符号引用将要被使用前才去解析它（初始化之后）。主要包括下面的几种解析</p>
<ul>
<li>类或接口的解析：判断所要转化成的直接引用是对数组类型，还是普通的对象类型的引用，从而进行不同的解析。</li>
<li>字段解析：对字段进行解析时，会先在本类中查找是否包含有简单名称和字段描述符都与目标相匹配的字段，如果有，则查找结束；如果没有，则会按照继承关系从上往下递归搜索该类所实现的各个接口和它们的父接口，还没有，则按照继承关系从上往下递归搜索其父类，直至查找结束。</li>
<li>类方法解析：对类方法的解析与对字段解析的搜索步骤差不多，解析方法的时候先搜索父类，再搜索接口。</li>
<li>接口方法解析：递归向上搜索父接口就行了。</li>
</ul>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>当一个Java类第一次被真正使用到的时候，JVM会进行该类的初始化操作。初始化过程的主要操作是执行静态代码块和初始化静态域。在一个类被初始化之前，它的直接父类也需要被初始化。但是，一个接口的初始化，不会引起其父接口的初始化。在初始化的时候，会按照源代码中从上到下的顺序依次执行静态代码块和初始化静态域。</p>
<p>虚拟机会保证一个类(不是对象)的<cinit>方法在多线程环境中被正确地加锁和同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的<cinit>方法，其他线程都需要阻塞等待，直到活动线程执行初始化方法完毕。如果在一个类的<cinit>方法中有耗时很长的操作，那就可能造成多个线程阻塞。有一种常见的单例模式就是这么实现的。</cinit></cinit></cinit></p>
<h3 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h3><h4 id="Bootstrap-ClassLoader"><a href="#Bootstrap-ClassLoader" class="headerlink" title="Bootstrap ClassLoader"></a>Bootstrap ClassLoader</h4><p>C++实现，<br>它负责加载存放在JDK\jre\lib下，或被-Xbootclasspath参数指定的路径中的，并且能被虚拟机识别的类库（如 rt.jar，所有的java.*开头的类均被 Bootstrap ClassLoader 加载）。启动类加载器是无法被 Java 程序直接引用的。可以通过sun.misc.Launcher.getBootstrapClassPath().getURLs() 或者System.getProperty(“sun.boot.class.path”);  查看加载了哪些jar文件</p>
<h4 id="Extension-ClassLoader"><a href="#Extension-ClassLoader" class="headerlink" title="Extension ClassLoader"></a>Extension ClassLoader</h4><p>ExtClassLoader<br>载JDK\jre\lib\ext目录的所有jar，或者由 java.ext.dirs 系统变量指定的路径中的所有类库（如javax.*开头的类），</p>
<h4 id="System-ClassLoader"><a href="#System-ClassLoader" class="headerlink" title="System ClassLoader"></a>System ClassLoader</h4><p>AppClassLoader,<br>加载用户类路径（ClassPath）所指定的类，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</p>
<h4 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h4><p>继承java.lang.ClassLoader<br>重写父类的findClass(String 类的全限定名)方法<br>JDK已经在loadClass方法中帮我们实现了ClassLoader搜索类的算法，当在loadClass方法中搜索不到类时，loadClass方法就会调用findClass方法来搜索类。</p>
<h4 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h4><p>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法完成该加载，子加载器才会尝试自己去加载该类。这种方法确保了系统类的正确加载</p>
<h2 id="类执行机制"><a href="#类执行机制" class="headerlink" title="类执行机制"></a>类执行机制</h2><h3 id="解释执行"><a href="#解释执行" class="headerlink" title="解释执行"></a>解释执行</h3><p>jvm有自己的指令系统并使用于操作数栈的结构来解释执行指令。主要使用如下四种指令来执行一个方法</p>
<ul>
<li>invokestatic: static()方法</li>
<li>invokevirtual：实例方法</li>
<li>invokeinterface：接口方法</li>
<li>invokespecial：private和<init>方法</init></li>
<li>invokedynamic：jdk7中加入的动态语言支持</li>
</ul>
<h4 id="栈顶缓存"><a href="#栈顶缓存" class="headerlink" title="栈顶缓存"></a>栈顶缓存</h4><p>基于操作数栈的执行方式，很多操作都要讲值放入操作数栈，这导致了寄存器需要不断和类存交换数据，使用栈顶缓存将本来位于栈顶的值直接缓存在寄存器上。对于大部分只需要一个值的操作而言，无需将数据放入操作数栈，可直接在寄存器上计算，然后放回操作数栈。</p>
<h4 id="部分栈帧共享"><a href="#部分栈帧共享" class="headerlink" title="部分栈帧共享"></a>部分栈帧共享</h4><p>每个方法对应一个栈帧，当方法调用的时候，通常会传入参数到到另一个方法，而这个方法还位于前一个方法的操作数栈上。因此将前一个方法的操作数栈和当前方法的局部变量共享，节约了数据拷贝带来的开销。</p>
<h3 id="编译执行"><a href="#编译执行" class="headerlink" title="编译执行"></a>编译执行</h3><p>解释执行的效率比较低，为了提升代码性能，虚拟机将直接将大量循环执行代码编译为机器码（JIT）执行。根据硬件环境的不同，虚拟机会使用不同的编译方法，主要分为Client,Server模式。</p>
<h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><p>只做了少量性能开销比较高的优化，主要针对方法块进行优化，适用于桌面交互式应用，虚拟机启动较快。</p>
<h5 id="方法内联"><a href="#方法内联" class="headerlink" title="方法内联"></a>方法内联</h5><p>把多个方法之间的调用，全部糅合到一个方法里面，消除了参数传递，返回值传递以及栈帧的开销。</p>
<h5 id="去虚拟化"><a href="#去虚拟化" class="headerlink" title="去虚拟化"></a>去虚拟化</h5><p>在装载class文件之后，进行类层次分析，如果发现类种的方法只提供了一个实现类，那么对于调用此方法的代码，也可以进行内联（有一个接口，只有一个实现类，使用了调用接口中方法的地方直接替换为接口实现类的方法）。</p>
<h5 id="冗余消除"><a href="#冗余消除" class="headerlink" title="冗余消除"></a>冗余消除</h5><p>在编译时候，根据运行时状况进行代码折叠或消除，比如static final 类型是静态常量值，编译的时候就能确定，所有在根据这个常量做一些判断的地方都直接削处了冗余的代码。</p>
<h4 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h4><p>采用了大量的编译优化技巧来进行优化，更多的在于全局的优化，适用于服务端的应用，启动较慢。主要基于逃逸分析实现。</p>
<h5 id="标量替换"><a href="#标量替换" class="headerlink" title="标量替换"></a>标量替换</h5><p>用标量替换聚合量，如果创建的实体对象并未用到其中的全部变量，则将对象展开取出各个属性值单独定义，以后直接使用属性值。这样节省了一定的内存，而且无需去找对象的引用，也更快了。</p>
<h5 id="栈上分配"><a href="#栈上分配" class="headerlink" title="栈上分配"></a>栈上分配</h5><p>如果一个对象的新建是在一个方法里面，并且没有把这个方法的引用传出方法外面，那么这个对象就直接在栈上分配，好处是更加快速，而且随着方法的结束，对象也被回收了。</p>
<h5 id="同步消除"><a href="#同步消除" class="headerlink" title="同步消除"></a>同步消除</h5><p>如果发现同步的对象未逃逸，那就没有同步的必要的，直接去掉同步。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java NIO学习]]></title>
      <url>http://thinerzq.com/2016/07/09/java/java%20nio%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A/</url>
      <content type="html"><![CDATA[<h1 id="NIO概述"><a href="#NIO概述" class="headerlink" title="NIO概述"></a>NIO概述</h1><p>Java NIO: Non-blocking IO（非阻塞IO）是jdk 1.4提出的，简单的理解就是使用nio api读写数据的时候不会等待把所有数据读写完再返回(所以读写的时候应该使用while循环不断尝试读写数据)。NIO中关键的三个概念是通道，缓冲区，选择器。</p>
<a id="more"></a>
<h2 id="Channel-通道"><a href="#Channel-通道" class="headerlink" title="Channel(通道)"></a>Channel(通道)</h2><p>所有的数据读写在NIO 中都从Channel 开始，可以把Channel想象成io 中的Stream。数据是从Channel读到Buffer中，或者从Buffer 写到Channel中。Channel主要有以下几种</p>
<ol>
<li>FileChannel: 从FileInputStream和FileOutputStream打开的文件通道</li>
<li>DatagramChannel：通过UDP协议读写网络中的数据</li>
<li>SocketChannel：通过TCP协议读写网络中的数据</li>
<li>ServerSocketChannel：对每一个连接创建一个SocketChannel</li>
</ol>
<h2 id="Buffer-缓冲区"><a href="#Buffer-缓冲区" class="headerlink" title="Buffer(缓冲区)"></a>Buffer(缓冲区)</h2><p>读取数据的第一步是Channel，第二步是Buffer。数据从通道读取到Buffer中，然后再使用，或者从Buffer中写入通道。Buffer本质上是一块可以写入数据，然后可以从中读取数据的内存,这块内存被包装成NIO Buffer对象。</p>
<p>Buffer主要由三个属性，它们决定了每次读写缓冲区的什么位置。</p>
<ol>
<li>capacity：缓冲区的大小</li>
<li>position：读模式的时候，position为下一个可以读取的位置；写模式的时候，position为下一个可以写入数据的位置</li>
<li>limit：写模式的时候，可以写入的数据的大小；读模式下，limit表示可以读取的数据大小</li>
</ol>
<p>当向buffer写入数据时，buffer会记录下写了多少数据。一旦要读取数据，需要通过flip()方法将Buffer从写模式切换到读模式（相应的position和limit值会改变）。在读模式下，可以读取之前写入到buffer的所有数据。</p>
<p>一旦读完Buffer中的数据，需要让Buffer准备好再次被写入。可以通过clear()或compact()方法来完成。clear()将Buffer中剩余的数据清除，compact()会将没有读取的数据移动到Buffer起始处，之后还可以读取。</p>
<p>Buffer.allocate() 直接在Head上分配内存，Buffer.directAllocate()在堆外分配内存（分配的内存不受GC影响，需要自己手动释放）。</p>
<h2 id="Selector-选择器"><a href="#Selector-选择器" class="headerlink" title="Selector(选择器)"></a>Selector(选择器)</h2><p>Selector（选择器）是NIO中能够侦听多个NIO Channel，并能够知晓这些Channel是否为特定的事件做好准备的组件。<br>Selector的使用主要是通过如下这种形式来使用<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">ServerSocketChannel ssChannel = ServerSocketChannel.open();</div><div class="line">ServerSocket ss = ssChannel.socket();</div><div class="line">InetSocketAddress address = <span class="keyword">new</span> InetSocketAddress(port);</div><div class="line">ss.bind(address);</div><div class="line"></div><div class="line">Selector selector = Selector.open();</div><div class="line"></div><div class="line">ssChannel.configureBlocking(<span class="keyword">false</span>);</div><div class="line">ssChannel.register(selector, SelectionKey.OP_ACCEPT); <span class="comment">//向selector注册监听连接请求</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">    selector.select();<span class="comment">//阻塞 直到某个channel注册的感兴趣的事件被触发</span></div><div class="line">    Set&lt;SelectionKey&gt; keys = selector.selectedKeys();</div><div class="line">    <span class="keyword">for</span> (SelectionKey key : keys) &#123;</div><div class="line">        <span class="keyword">if</span> (key.isAcceptable()) &#123; <span class="comment">//客户端连接请求</span></div><div class="line">            ServerSocketChannel ssc = (ServerSocketChannel) key.channel();</div><div class="line">            SocketChannel sc = ssc.accept();</div><div class="line">            sc.configureBlocking(<span class="keyword">false</span>);</div><div class="line">            sc.register(selector, SelectionKey.OP_READ); <span class="comment">//向selector注册监听客户端输入</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (key.isReadable()) &#123; <span class="comment">//客户端输入</span></div><div class="line"></div><div class="line">            ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</div><div class="line"></div><div class="line">            SocketChannel socketChannel = (SocketChannel) key.channel();</div><div class="line"></div><div class="line">            <span class="comment">// 针对当前连接做一些事情.read or write</span></div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    keys.clear();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Selector必须和Channel配合使用，而且Channel必须处于非阻塞模式下。通过resigter()方法绑定selector和channel的时候，第二个参数指定了当前channel对什么事件感兴趣。一个channel可以有如下4种感兴趣的事件</p>
<ol>
<li>SelectionKey.OP_CONNECT</li>
<li>SelectionKey.OP_ACCEPT</li>
<li>SelectionKey.OP_READ</li>
<li>SelectionKey.OP_WRITE</li>
</ol>
<p>当channel向selector注册了事件之后，selector.selector()方法会阻塞直到channel关心的哪些事件已经就绪。事件就绪之后判断事件的类别，根据不同类别分别做不同的读写处理。</p>
<h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><p>一个对象可以被表示为一个字节序列，该字节序列包括该对象的数据、有关对象的类型的信息和存储在对象中数据的类型。</p>
<p>对应的流是ObjectOutputStream，ObjectInputStream。static变量, transient不会序列化，static final会序列化。实现这两个接口的类可以序列化：Serializible ,Externalizible。</p>
<p>如果想自己控制一部分序列化的过程，可以在需要序列化的类种加入private级别的readObject()和writeObject()方法，这两个方法再ObjectInputStream和ObjectOutputStream中会反射调用。write和read的顺序必须一致。使用实现Externalizible接口来序列化，序列化的过程完全可控。</p>
<p>如果需要序列化的对象使用了Signleton模式，（序列化前的对象 == 序列化后的对象）=false,如果要使这两者相等，可以在Singleton类种加入readResolve()方法，在这个方法中返回Signleton对象替换掉在流中创建的对象。——这些都是在同一个jvm中才有用</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring基础学习]]></title>
      <url>http://thinerzq.com/2016/07/09/spring/spring%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A/</url>
      <content type="html"><![CDATA[<p>通常说的Spring其实指的是Spring Framework，它是Spring下的一个子项目，Spring围绕Spring Framework这个核心项目开发了大量其他项目，比如Spring Security，Spring Data，Spring Boot等. Spring Framework包括他的核心解决方案IoC容器、 AOP。</p>
<a id="more"></a>
<h1 id="控制反转"><a href="#控制反转" class="headerlink" title="控制反转"></a>控制反转</h1><p>所谓控制反转，是指通过使用IoC容器对象依赖关系的管理被反转了，也就是说，对象之间的依赖关系由IoC容器进行管理，并且由Ioc容器通过依赖注入（DI，Dependency Injection）的方式来完成对象的注入（以前一个对象需要new了才能使用，现在你只要声明就行了，spring会帮你new好了，在你需要的时候把这个对象的引用传递给你）。</p>
<p>整个依赖入住的过程中，有一个问题如何解决循环依赖的对象的注入：构造器循环依赖是无法解决的，只有单例模式下的setter注入可以解决（通过将new完了，还未调用其setter方法的bean放入到Map中，从而使其他Bean能引用到该Bean）</p>
<h1 id="切面编程"><a href="#切面编程" class="headerlink" title="切面编程"></a>切面编程</h1><p>面向切面编程（AOP）通过提供另外一种思考程序结构的途经来弥补面向对象编程（OOP）的不足。在OOP中模块化的关键单元是类（classes），而在AOP中模块化的单元则是切面。切面能对关注点进行模块化，例如横切多个类型和对象的事务管理。Aop中有一些核心概念：</p>
<ul>
<li>横切性关注点：对哪些方法拦截，拦截后怎么处理，这些关注就称之为横切性关注点.<br>Aspect（切面）：指横切性关注点的抽象即为切面，它与类相似，只是两者的关注点不一样，类是对物体特征的抽象，而切面是横切性关注点的抽象。</li>
<li>Joinpoint（连接点）：所谓连接点是指那些被拦截到的点。在Spring中，这些点指的是方法，因为Spring只支持方法类型的连接点，实际上joinpoint还可以是field或类构造器。</li>
<li>Pointcut(切入点)：所谓切入点是指我们要对那些joinpoin进行拦截的定义。</li>
<li>Advice（通知）：所谓通知是指拦截到joinpoint之后所要做的事情就是通知。通知分为前置通知，后置通知，异常通知，最终通知，环绕通知。<ul>
<li>前置通知（Before advice）：在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。</li>
<li>后置通知（After returning advice）：在某连接点正常完成后执行的通知：例如，一个方法没有抛出任何异常，正常返回。</li>
<li>异常通知（After throwing advice）：在方法抛出异常退出时执行的通知。</li>
<li>最终通知（After (finally) advice）：当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。</li>
<li>环绕通知（Around Advice）：包围一个连接点的通知，如方法调用。这是最强大的一种通知类型。环绕通知可以在方法调用前后完成自定义的行为。它也会选择是否继续执行连接点或直接返回它自己的返回值或抛出异常来结束执行。</li>
</ul>
</li>
<li>Target（目标对象）：代理的目标对象</li>
<li>Weave(织入)：指将aspects应用到target对象并导致proxy对象创建的过程称为织入。</li>
</ul>
<p>由于开启了切面编程功能，所以当获取一个被切面类监控管理的bean对象时，它实际上获取的是此对象的一个代理对象，而在spring中对代理对象的处理有如下原则：（1）如果要代理的对象实现了接口，则会按照Proxy的方式来产生代理对象，这即是说产生的代理对象只能是接口类型。如果要代理的对象未实现接口，则按cglib方式来产生代理对象。<br>要想spring的切面技术起作用，被管理的bean对象只能是通过spring容器获取的对象。</p>
<h1 id="事物管理"><a href="#事物管理" class="headerlink" title="事物管理"></a>事物管理</h1><p>在 Spring 中，事务是通过 TransactionDefinition 接口来定义的。接口只提供了获取事物隔离级别，传播行为，超时时间的方法</p>
<h2 id="事物的隔离级别"><a href="#事物的隔离级别" class="headerlink" title="事物的隔离级别"></a>事物的隔离级别</h2><p>隔离级别是指若干个并发的事务之间的隔离程度。TransactionDefinition 接口中定义了五个表示隔离级别的常量：</p>
<ul>
<li>TransactionDefinition.ISOLATION_DEFAULT：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是TransactionDefinition.ISOLATION_READ_COMMITTED。</li>
<li>TransactionDefinition.ISOLATION_READ_UNCOMMITTED：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读和不可重复读，因此很少使用该隔离级别。</li>
<li>TransactionDefinition.ISOLATION_READ_COMMITTED：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。</li>
<li>TransactionDefinition.ISOLATION_REPEATABLE_READ：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别可以防止脏读和不可重复读。</li>
<li>TransactionDefinition.ISOLATION_SERIALIZABLE：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</li>
</ul>
<h2 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h2><p>所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：</p>
<ul>
<li>TransactionDefinition.PROPAGATION_REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li>
<li>TransactionDefinition.PROPAGATION_REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li>
<li>TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li>
<li>TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li>
<li>TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。</li>
<li>TransactionDefinition.PROPAGATION_MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</li>
</ul>
<h2 id="事务超时"><a href="#事务超时" class="headerlink" title="事务超时"></a>事务超时</h2><p>所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。</p>
<p>通常情况下，如果在事务中抛出了未检查异常（继承自 RuntimeException 的异常），则默认将回滚事务。如果没有抛出任何异常，或者抛出了已检查异常，则仍然提交事务</p>
<p>基于 @Transactional 的声明式事务管理，可以作用于接口、接口方法、类以及类方法上。当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，也可以在方法级别使用该标注来覆盖类级别的定义。， @Transactional 注解应该只被应用到 public 方法上，如果在protected、private 或者默认可见性的方法上使用 @Transactional 注解，将被忽略，也不会抛出任何异常。</p>
<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><p>DispatcherServlet是前置控制器，配置在web.xml文件中的。拦截匹配的请求，Servlet拦截匹配规则要自已定义，把拦截下来的请求，依据相应的规则分发到目标Controller来处理，是配置spring MVC的第一步。</p>
<p>Controller：具体处理请求的控制器。日常功能都在Controller 中处理</p>
<p>handlerMapping：映射处理器。负责映射中央处理器转发给 Controller时的映射策略，即DispatcherServlet按什么规则去寻找需要访问的</p>
<p>Controller。需要在spring-mvc的配置文件中配置。主要有三种类型，分别为为按Controller控制器的名称、类型和简单url隐射。默认为按Controller的名称（可省略）</p>
<p>ModelAndView：服务层返回的数据和视图层的封装类,用来封装 Controller 需要访问的视图(view)和传输的数据(model)，一般在控制器Controller  中自己实现处理。</p>
<p>ViewResolver &amp; View：视图解析器.需要在spring-mvc的配置文件中配置，一般分为前缀与后缀。前缀：webroot到某一指定的文件夹的路径；后缀：视图名称的后缀。然后和 ModelAndView 中的view结合使用，确认具体的访问视图。</p>
<p>Interceptors ：拦截器,负责拦截我们定义的请求然后做处理工作。</p>
<p>运行原理：</p>
<ol>
<li>客户端请求提交到DispatcherServlet；</li>
<li>由DispatcherServlet控制器查询一个或多个HandlerMapping，找到处理请求的Controller；</li>
<li>DispatcherServlet将请求提交到Controller；</li>
<li>Controller调用业务逻辑处理后，返回ModelAndView；</li>
<li>DispatcherServlet查询一个或多个ViewResoler视图解析器，找到ModelAndView指定的视图；</li>
<li>视图负责将结果显示到客户端。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java 多线程学习]]></title>
      <url>http://thinerzq.com/2016/07/09/java/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A/</url>
      <content type="html"><![CDATA[<ol>
<li><p>ConcurrentHashMap：线程安全HashMap，分段锁。put(),remove()加锁，size()三次后再加锁</p>
</li>
<li><p>CopyOnWriteArrayList：线程安全，读无锁的ArrayList,使用ReentrantLock, 每次add，remove都是新创建一个数组，复制元素到新的数组，最后切换全局数组引用。适用于多读少写</p>
</li>
<li><p>CopyOnWriteArraySet：通过CopyOnWriteSet实现，add()的时候会遍历整个数组判断数组是否存在这个值，因此性能略低于CopyOnWriteArrayList</p>
</li>
<li><p>ArrayBlockingQueue： 基于数组，ReentrantLock,Condition实现的有界队列。add(E e):队满，抛异常。put(E e):队满，阻塞。offer(E e):队满，返回false。remove()，take()，poll()。和上面对应。</p>
</li>
<li><p>LinkedBlockingQueue：基于链表，读写锁分离，遍历同时锁。此按FIFO （先进先出） 排序元素，吞吐量通常要高于ArrayBlockingQueue。</p>
</li>
<li><p>SynchronousQueue：一个不存储元素的阻塞队列。每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于LinkedBlockingQueue。</p>
</li>
<li><p>PriorityBlockingQueue：一个具有优先级的无限阻塞队列。</p>
</li>
<li><p>Atomic：支持原子操作的类，由硬件指令cmpxchg提供CAS支持（简单来说，先使用一个期望值和一个变量的当前值进行比较，如果当前变量的值与期望的值相等，就使用一个新值替换当前变量的值）,比synchronize性能高出2倍。实现类有AtomicBoolean，AtomicInteger，AtomicIntegerArray，AtomicLong，AtomicLongArray，AtomicReference，AtomicReferenceArray等。需要注意的是ABA问题，可以通过AtomicStampedReference解决。</p>
</li>
<li><p>线程池<br>线程池就是有一堆线程，随时可以取一个线程出来用。学习线程池最好的方法就是从线程池的构造函数开始看。一个线程池的关注点在构造函数中的几个参数。常用的Executor类的几个方法都是返回一个的ThreadPoolExecutor，这些ThreadPoolExecutor的构造函数的参数各不相同。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,<span class="keyword">int</span> maximumPoolSize,<span class="keyword">long</span> keepAliveTime,TimeUnit unit,  BlockingQueue&lt;Runnable&gt; workQueue,ThreadFactory threadFactory,RejectedExecutionHandler handler)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</div><div class="line">            maximumPoolSize &lt;= <span class="number">0</span> ||</div><div class="line">            maximumPoolSize &lt; corePoolSize ||</div><div class="line">            keepAliveTime &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">        <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">        <span class="keyword">this</span>.corePoolSize = corePoolSize;</div><div class="line">        <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</div><div class="line">        <span class="keyword">this</span>.workQueue = workQueue;</div><div class="line">        <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</div><div class="line">        <span class="keyword">this</span>.threadFactory = threadFactory;</div><div class="line">        <span class="keyword">this</span>.handler = handler;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ol>
<li><p>corePoolSize： 线程池维护线程的最少数量：当提交一个任务到线程池时，线程池会创建一个线程来执行任务，即使其他空闲的基本线程能够执行新任务也会创建线程，等到需要执行的任务数大于线程池基本大小时就不再创建。如果调用了线程池的prestartAllCoreThreads方法，线程池会提前创建并启动所有基本线程。</p>
</li>
<li><p>maximumPoolSize：线程池维护线程的最大数量：线程池允许创建的最大线程数。如果队列满了，并且已创建的线程数小于最大线程数，则线程池会再创建新的线程执行任务。如果使用了无界的任务队列这个参数就没什么效果。</p>
</li>
<li><p>keepAliveTime： 线程池维护线程所允许的空闲时间：线程池的工作线程空闲后，保持存活的时间。所以如果任务很多，并且每个任务执行的时间比较短，可以调大这个时间，提高线程的利用率。</p>
</li>
<li><p>unit： 线程池维护线程所允许的空闲时间的单位：可选的单位有天（DAYS），小时（HOURS），分钟（MINUTES），毫秒(MILLISECONDS)，微秒(MICROSECONDS, 千分之一毫秒)和毫微秒(NANOSECONDS, 千分之一微秒)。</p>
</li>
<li><p>workQueue： 线程池所使用的缓冲队列。</p>
</li>
<li><p>threadFactory：线程池创建线程的工厂：可以通过线程工厂给每个创建出来的线程设置更有意义的名字。</p>
</li>
<li><p>handler： 线程池对拒绝任务的处理策略：AbortPolicy：直接抛出异常。<br>CallerRunsPolicy：只用调用者所在线程来运行任务。<br>DiscardOldestPolicy：丢弃队列里最近的一个任务，并执行当前任务。<br>DiscardPolicy：不处理，丢弃掉。<br>当然也可以根据应用场景需要来实现RejectedExecutionHandler接口自定义策略。如记录日志或持久化不能处理的任务。</p>
</li>
</ol>
</li>
<li><p>Executors：对ThreadPoolExecutor再封装。</p>
<ol>
<li><p>nexFixedThreadPool(int) :直接创建固定大小的线程池，keepAlive=0，超过LinkedBlockingQueue的最大范围拒绝</p>
</li>
<li><p>newSingleThreadExecutor:线程只有1个，其他的等待</p>
</li>
<li><p>newCachedThreadPool:corePoolSize=0,keepAlive=60s,SynchronousQueue,最大线程未Integer.Max_Value</p>
</li>
<li><p>newScheduledThreadPool(int):DelayedWorkQueue:会对新加入的任务按照执行时间排序</p>
</li>
</ol>
</li>
<li><p>FutureTask：异步获取执行结果，保证只执行一次，可取消任务。</p>
</li>
<li>Semaphore：控制某资源同时被访问的个数的类，通过构造函数可以达到公平访问和非公平访问，默认非公平。如果把资源那个数设置为1,可以达到锁的效果。</li>
<li>CountDownLatch：用于多个线程同时开始某一个动作，每个线程执行的时候，计数器-1，如果计数器为0，位于latch.await()后面代码才会执行。一般用来等待任务执行完毕</li>
<li><p>CyclicBarrier: 和CountDownLatch刚好反过来，它是当await()的数量达到一定，才继续往后执行，另外还能设置一个回调：当await()达到一定数量后，开始执行回调的Runable对象</p>
</li>
<li><p>ReentrantLock：ReentrantLock提供了公平锁和非公平锁，lock().trylock(),trylockInterrupted, tryLock(time)等方法</p>
</li>
<li><p>Condition： 一般和RenentrantLock配合使用，可在同一个锁上启用多个Condition,用于等待，通知操作。</p>
</li>
<li><p>和ReentrantLock没有任何继承关系    ，提供了读写锁分离。读的时候如果没有线程写就直接获取，读操作是无阻赛的。写的时候如果有其他线程在读或者写就会被阻塞。在同一线程中，持有读锁后不能调用写锁的lock方法（会死锁）：读锁不可升级。同一个线程中，持有写锁后，可以调用读锁的lock方法，之后如果调用写锁的unlock(0方法，当前锁降级为读锁。适用于读多写少</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Io学习]]></title>
      <url>http://thinerzq.com/2016/07/09/java/java%20Io%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A/</url>
      <content type="html"><![CDATA[<h1 id="Io概述"><a href="#Io概述" class="headerlink" title="Io概述"></a>Io概述</h1><p>流是一组有顺序的，有起点和终点的字节集合，是对数据传输的总称或抽象。即数据在两设备间的传输称为流，流的本质是数据传输，根据数据传输介质将流抽象为各种类，方便更直观的进行数据操作。说白了这些类就是用来读取和写入数据的，由于可以读取或写入的媒介非常多，针对每一种媒介jdk提供了单独的类来读和写数据。同时根据读写单位又分为读取按字节读写和按字符读取(根据不同的编码方案,一个字符可能按多个字节读取)。大致可以分为如下</p>
<p>从读写介质的角度来看</p>
<table>
<thead>
<tr>
<th style="text-align:left">读写介质</th>
<th style="text-align:left">字节输入</th>
<th style="text-align:left">字节输出</th>
<th style="text-align:left">字符输入</th>
<th style="text-align:left">字符输出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Basic</td>
<td style="text-align:left">InputStream</td>
<td style="text-align:left">OutputStream</td>
<td style="text-align:left">Reader, InputStreamReader</td>
<td style="text-align:left">Writer, OutputStreamReader</td>
</tr>
<tr>
<td style="text-align:left">Arrays</td>
<td style="text-align:left">ByteArrayInputStream</td>
<td style="text-align:left">ByteArrayOutputStream</td>
<td style="text-align:left">CharArrayReader</td>
<td style="text-align:left">CharArrayWriter</td>
</tr>
<tr>
<td style="text-align:left">File</td>
<td style="text-align:left">FileInputStream, RandomAccessFile</td>
<td style="text-align:left">FileOutputStream, RandomAccessFile</td>
<td style="text-align:left">FileReader</td>
<td style="text-align:left">FileWriter</td>
</tr>
<tr>
<td style="text-align:left">Pipes</td>
<td style="text-align:left">PipedInputStream</td>
<td style="text-align:left">PipedOutputStream</td>
<td style="text-align:left">PipedReader</td>
<td style="text-align:left">PipedWriter</td>
</tr>
<tr>
<td style="text-align:left">Buffering</td>
<td style="text-align:left">BufferedInputStream</td>
<td style="text-align:left">BufferedOutputStream</td>
<td style="text-align:left">BufferedReader</td>
<td style="text-align:left">BufferedWriter</td>
</tr>
<tr>
<td style="text-align:left">Filtering</td>
<td style="text-align:left">FilterInputStream</td>
<td style="text-align:left">FilterOuptStream</td>
<td style="text-align:left">FilterReader</td>
<td style="text-align:left">FilterWriter</td>
</tr>
<tr>
<td style="text-align:left">Parsing</td>
<td style="text-align:left">PushbackInputStream, StreamTokenizer</td>
<td style="text-align:left"></td>
<td style="text-align:left">PushbackReader, LineNumberReader</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">String</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">StringReader</td>
<td style="text-align:left">StringWriter</td>
</tr>
<tr>
<td style="text-align:left">Data</td>
<td style="text-align:left">DataInputStream</td>
<td style="text-align:left">DataOutputStream</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">Data-Formatterd</td>
<td style="text-align:left"></td>
<td style="text-align:left">PrintStream</td>
<td style="text-align:left"></td>
<td style="text-align:left">PrintWriter</td>
</tr>
<tr>
<td style="text-align:left">Objects</td>
<td style="text-align:left">ObjectInputStream</td>
<td style="text-align:left">ObjectOutputStream</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">Utilities</td>
<td style="text-align:left">SequenceInputStream</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p>从功能和继承关系的角度看<br><img src="/images/java_io.png" alt="Java IO"></p>
<h1 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h1><p>InputStream类（不是接口）提供的基本方法<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span> b[])</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span> b[], <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">skip</span><span class="params">(<span class="keyword">long</span> n)</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">mark</span><span class="params">(<span class="keyword">int</span> readlimit)</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">markSupported</span><span class="params">()</span></div></pre></td></tr></table></figure></p>
<p>OutputStream类（不是接口）提供的基本方法<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span></span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span> b[])</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span> b[], <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></div></pre></td></tr></table></figure></p>
<p>其他InputStream和OutputStream的子类都根据各自的功能重写了上述的方法或者提供了另外的函数</p>
<p>RandomAccessFile类提供的<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seek</span><span class="params">(<span class="keyword">long</span> pos)</span></span></div></pre></td></tr></table></figure></p>
<p>PipedInputStream类和PipedOutputStream类提供的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(PipedOutputStream src)</span></span></div><div class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(PipedInputStream snk)</span></div></pre></td></tr></table></figure>
<p>DataInputStream类提供的一系列方法，DataOutputStream提供的方法也类似。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">readBoolean</span><span class="params">()</span></span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">byte</span> <span class="title">readByte</span><span class="params">()</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">short</span> <span class="title">readShort</span><span class="params">()</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">char</span> <span class="title">readChar</span><span class="params">()</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">readInt</span><span class="params">()</span>&#123;</div><div class="line">  <span class="comment">//in 是通过DataInputStream的构造函数传递进去的InputStream具体类的对象</span></div><div class="line">  <span class="keyword">int</span> ch1 = in.read();</div><div class="line">  <span class="keyword">int</span> ch2 = in.read();</div><div class="line">  <span class="keyword">int</span> ch3 = in.read();</div><div class="line">  <span class="keyword">int</span> ch4 = in.read();</div><div class="line">  <span class="keyword">if</span> ((ch1 | ch2 | ch3 | ch4) &lt; <span class="number">0</span>)</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> EOFException();</div><div class="line">  <span class="keyword">return</span> ((ch1 &lt;&lt; <span class="number">24</span>) + (ch2 &lt;&lt; <span class="number">16</span>) + (ch3 &lt;&lt; <span class="number">8</span>) + (ch4 &lt;&lt; <span class="number">0</span>));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">readLong</span><span class="params">()</span></span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">float</span> <span class="title">readFloat</span><span class="params">()</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> <span class="title">readDouble</span><span class="params">()</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">readLine</span><span class="params">()</span></div></pre></td></tr></table></figure>
<p>PushbackInputStream提供的unread()方法其实很简单，使用一个buf数组，将unread的字节放入buf，下次read的时候从buf里面读。PushbackReader原理类似</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    ensureOpen();</div><div class="line">    <span class="keyword">if</span> (pos &lt; buf.length) &#123;</div><div class="line">        <span class="keyword">return</span> buf[pos++] &amp; <span class="number">0xff</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.read();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unread</span><span class="params">(<span class="keyword">int</span> b)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    ensureOpen();</div><div class="line">    <span class="keyword">if</span> (pos == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Push back buffer is full"</span>);</div><div class="line">    &#125;</div><div class="line">    buf[--pos] = (<span class="keyword">byte</span>)b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>SequenceInputStream把一个或者多个InputStream整合起来，形成一个逻辑连贯的输入流。当读取SequenceInputStream时，会先从第一个输入流中读取，完成之后再从第二个输入流读取… 以此类推。程序内部将多个流放入到一个Enumeration中，在read的时候判断需不需要切换到下一个流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SequenceInputStream</span> <span class="keyword">extends</span> <span class="title">InputStream</span> </span>&#123;</div><div class="line">    Enumeration&lt;? extends InputStream&gt; e;</div><div class="line">    InputStream in;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SequenceInputStream</span><span class="params">(Enumeration&lt;? extends InputStream&gt; e)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.e = e;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            nextStream();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">            <span class="comment">// This should never happen</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"panic"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">nextStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">   <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</div><div class="line">       in.close();</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (e.hasMoreElements()) &#123;</div><div class="line">       in = (InputStream) e.nextElement();</div><div class="line">       <span class="keyword">if</span> (in == <span class="keyword">null</span>)</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">else</span> in = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">while</span> (in != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">int</span> c = in.read();</div><div class="line">        <span class="keyword">if</span> (c != -<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> c;</div><div class="line">        &#125;</div><div class="line">        nextStream();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>PrintStream允许你把格式化数据写入到底层OutputStream中。比如，写入格式化成文本的int，long以及其他原始数据类型到输出流中，而非它们的字节数据。通过其内部的构造方法可以看出，这个流内部其实用了Writer来写int ,long 类型的数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">PrintStream</span><span class="params">(<span class="keyword">boolean</span> autoFlush, OutputStream out, Charset charset)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(out);</div><div class="line">        <span class="keyword">this</span>.autoFlush = autoFlush;</div><div class="line">        <span class="keyword">this</span>.charOut = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">this</span>, charset);</div><div class="line">        <span class="keyword">this</span>.textOut = <span class="keyword">new</span> BufferedWriter(charOut);</div><div class="line">    &#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        write(String.valueOf(i));</div><div class="line">    &#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">     <span class="keyword">try</span> &#123;</div><div class="line">         <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">             ensureOpen();</div><div class="line">             textOut.write(s);</div><div class="line">             textOut.flushBuffer();</div><div class="line">             charOut.flushBuffer();</div><div class="line">             <span class="keyword">if</span> (autoFlush &amp;&amp; (s.indexOf(<span class="string">'\n'</span>) &gt;= <span class="number">0</span>))</div><div class="line">                 out.flush();</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">catch</span> (InterruptedIOException x) &#123;</div><div class="line">         Thread.currentThread().interrupt();</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">catch</span> (IOException x) &#123;</div><div class="line">         trouble = <span class="keyword">true</span>;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>从PrintWriter的最终的构造方法可以看出，PrintWriter内部只使用Wrtier来作为最终的输出流。它提供的方法和PrintStream基本一样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">PrintWriter</span><span class="params">(Writer out,<span class="keyword">boolean</span> autoFlush)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(out);</div><div class="line">        <span class="keyword">this</span>.out = out;</div><div class="line">        <span class="keyword">this</span>.autoFlush = autoFlush;</div><div class="line">        lineSeparator = java.security.AccessController.doPrivileged(</div><div class="line">            <span class="keyword">new</span> sun.security.action.GetPropertyAction(<span class="string">"line.separator"</span>));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">PrintWriter</span><span class="params">(OutputStream out, <span class="keyword">boolean</span> autoFlush)</span> </span>&#123;</div><div class="line">     <span class="keyword">this</span>(<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(out)), autoFlush);</div><div class="line"></div><div class="line">     <span class="comment">// save print stream for error propagation</span></div><div class="line">     <span class="keyword">if</span> (out <span class="keyword">instanceof</span> java.io.PrintStream) &#123;</div><div class="line">         psOut = (PrintStream) out;</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">long</span> l)</span> </span>&#123;</div><div class="line">      write(String.valueOf(l));</div><div class="line">  &#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String s, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">            ensureOpen();</div><div class="line">            out.write(s, off, len);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (InterruptedIOException x) &#123;</div><div class="line">        Thread.currentThread().interrupt();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (IOException x) &#123;</div><div class="line">        trouble = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>LineNumberReader类通过getLineNumber()方法获取当前行号，通过setLineNumber()方法设置当前行数。流的读取依然是顺序进行，不能通过setLineNumber()实现流的跳跃读取。使用这个流可以快速定位流读取过程中出现的错误。这个流的本质就是在读取的时候使用判断读到的字符是否是行结束符，如果是就lineNumber++（文件的行结束符视操作系统而定）。这个流没有LineNumberInputStream一说。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">            <span class="keyword">int</span> c = <span class="keyword">super</span>.read();</div><div class="line">            <span class="keyword">if</span> (skipLF) &#123;</div><div class="line">                <span class="keyword">if</span> (c == <span class="string">'\n'</span>)</div><div class="line">                    c = <span class="keyword">super</span>.read();</div><div class="line">                skipLF = <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">switch</span> (c) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'\r'</span>:</div><div class="line">                skipLF = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'\n'</span>:          <span class="comment">/* Fall through */</span></div><div class="line">                lineNumber++;</div><div class="line">                <span class="keyword">return</span> <span class="string">'\n'</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> c;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>StreamTokenizer通过循环调用nextToken()可以遍历底层输入流的所有符号。在每次调用nextToken()之后，StreamTokenizer有一些变量可以获取读取到的符号的类型和值。这些变量是：</p>
<ol>
<li>ttype 读取到的符号的类型(字符(TT_WORD)，数字(TT_NUMBER)，或者行结尾符(TT_EOL))</li>
<li>sval 如果读取到的符号是字符串类型，该变量的值就是读取到的字符串的值</li>
<li>nval 如果读取到的符号是数字类型，该变量的值就是读取到的数字的值</li>
</ol>
<p>以此类推，只要在需要的什么样的流的时候，使用对应的io流对象就行了。说到io，大家都会想到装饰器模式，其实装饰器模式很好理解。下面三个类就是io中一个简单的装饰器模式体现。使用io流的时候，主要注意的问题是几个对象之间能不能互相装饰。<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterInputStream</span> <span class="keyword">extends</span> <span class="title">InputStream</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">volatile</span> InputStream in;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">FilterInputStream</span><span class="params">(InputStream in)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.in = in;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">return</span> in.read();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        in.reset();</div><div class="line">    &#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedInputStream</span> <span class="keyword">extends</span> <span class="title">FilterInputStream</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BufferedInputStream</span><span class="params">(InputStream in, <span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">         <span class="keyword">super</span>(in);</div><div class="line">         buf = <span class="keyword">new</span> <span class="keyword">byte</span>[size];</div><div class="line">     &#125;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">       <span class="keyword">if</span> (pos &gt;= count) &#123;</div><div class="line">           fill();</div><div class="line">           <span class="keyword">if</span> (pos &gt;= count)</div><div class="line">               <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> getBufIfOpen()[pos++] &amp; <span class="number">0xff</span>;</div><div class="line">     &#125;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        getBufIfOpen(); <span class="comment">// Cause exception if closed</span></div><div class="line">        <span class="keyword">if</span> (markpos &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Resetting to invalid mark"</span>);</div><div class="line">        pos = markpos;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataInputStream</span> <span class="keyword">extends</span> <span class="title">FilterInputStream</span> <span class="keyword">implements</span> <span class="title">DataInput</span></span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DataInputStream</span><span class="params">(InputStream in)</span> </span>&#123;</div><div class="line">         <span class="keyword">super</span>(in);</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">readBoolean</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">      <span class="keyword">int</span> ch = in.read();</div><div class="line">      <span class="keyword">if</span> (ch &lt; <span class="number">0</span>)</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> EOFException();</div><div class="line">      <span class="keyword">return</span> (ch != <span class="number">0</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//没有reset(),mark()方法</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果想使用DataInputStream 同时使用BufferedInputStream的mark()方法，可以如下使用<br>DataInputStream dis = new DataInputStream(new BufferedInputStream(new FileInputStream(“filepath”)));</p>
<h1 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h1><ol>
<li><p>任何关于文件本身或者目录的操作在File类里面</p>
</li>
<li><p>int read()和 int read(byte[] b)方法返回值的区别<br>read()放回读取到的字节，read(byte[] b)返回读取到的字节数量。</p>
</li>
<li><p>System.out System.in. System.err 可以通过System.setErr()等重定向到任意输出流，</p>
</li>
<li><p>流关闭问题的两种解决方法，一统一写一个模板类，二使用try-with-resource风格编程</p>
</li>
<li><p>BufferedInputStream和BufferedOutputStream缓冲区大小设置为1024整数倍效率更高</p>
</li>
<li><p>ObjectInputStream和ObjectOutputStream所读写的对象对应的类必须实现了java.io.Serializable接口</p>
</li>
<li><p>InputStreamReader和OutputStreamWriter是一种字符流，主要目的是将字节流转化成字符流，使用字符流的形式来处理数据。</p>
</li>
<li><p>FilterInputStream和和FilterOuFilterReader和FilterReader是过滤流的基类， 都只是简单的覆盖了其父类的方法，主要使用它们的子类来处理读写。</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux里面一些文件或者目录的作用]]></title>
      <url>http://thinerzq.com/2016/05/29/linux/linux%E9%87%8C%E9%9D%A2%E4%B8%80%E4%BA%9B%E6%96%87%E4%BB%B6%E6%88%96%E7%9B%AE%E5%BD%95%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>linux里面文件或者目录作用索引表</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th style="text-align:center">文件</th>
<th style="text-align:center">目录</th>
<th style="text-align:center">功能</th>
<th style="text-align:center">全名</th>
<th style="text-align:center">适用于什么distribution</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">/ect/fstab</td>
<td style="text-align:center"></td>
<td style="text-align:center">文件系统表，配置开机需要挂载的分区，mount挂载分区写入参数到这个文件，添加了dump的支持</td>
<td style="text-align:center">filesystem table</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">/etc/mtab</td>
<td style="text-align:center"></td>
<td style="text-align:center">实际存放文件系统挂载信息的地方</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql存储引擎]]></title>
      <url>http://thinerzq.com/2016/05/10/mysql/mysql%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
      <content type="html"><![CDATA[<blockquote>
<p>mysql&gt; select version();<br>+—————–+<br>| version()       |<br>+—————–+<br>| 5.7.12-0ubuntu1 |<br>+—————–+</p>
</blockquote>
<a id="more"></a>
<p><strong>mysql支持的存储引擎</strong></p>
<blockquote>
<p>mysql&gt; SHOW ENGINES;</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">Engine</th>
<th style="text-align:center">Support</th>
<th style="text-align:center">Comment</th>
<th style="text-align:center">Transactions</th>
<th style="text-align:center">XA</th>
<th style="text-align:center">Savepoints</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CSV</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">CSV storage engine</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td style="text-align:center">MRG_MYISAM</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">Collection of identical MyISAM tables</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td style="text-align:center">MyISAM</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">MyISAM storage engine</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td style="text-align:center">BLACKHOLE</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">/dev/null storage engine (anything you write to it disappears)</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td style="text-align:center">PERFORMANCE_SCHEMA</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">Performance Schema</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td style="text-align:center">InnoDB</td>
<td style="text-align:center">DEFAULT</td>
<td style="text-align:center">Supports transactions, row-level locking, and foreign keys</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">ARCHIVE</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">Archive storage engine</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td style="text-align:center">MEMORY</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">Hash based, stored in memory, useful for temporary tables</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td style="text-align:center">FEDERATED</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">Federated MySQL storage engine</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">NULL</td>
<td style="text-align:center">NULL</td>
</tr>
</tbody>
</table>
<h1 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h1><p>MyISAM是mysql5.5之前默认的存储引擎，不支持失误，页不支持外键，访问速度快，适用于对事物完整性没有要求，或者以Select,Insert为主的应用。</p>
<p>MyISAM支持3种不同的存储格式：</p>
<ol>
<li>静态表（字段长度固定）</li>
<li>动态表（字段长度不固定</li>
<li>压缩表</li>
</ol>
<h1 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h1><p>InnoDB提供了具有，提交，回滚，崩溃能力恢复的事物安全。但是对比MyISAM,InnoDB的处理效率差一些，会占用更多的磁盘空间以保留数据和索引。</p>
<h2 id="自动增长列"><a href="#自动增长列" class="headerlink" title="自动增长列"></a>自动增长列</h2><p>可以手动插入，如果插入的值为空，或者为0，则实际插入的值为自动增长后的值。自动增长列必须是索引，如果是组合索引，页必须是组合索引的第一列，对于MyISAM，自动增长列可以是组合所应的其他列。</p>
<h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><p>只有InnoDB</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux命令大全]]></title>
      <url>http://thinerzq.com/2016/05/06/linux/linux%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
      <content type="html"><![CDATA[<p>主要是为了通过命令的目的或者全名，理解记忆各个命令的功能</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">功能</th>
<th style="text-align:center">全名</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">startX</td>
<td style="text-align:center">在tty下面开启图形化界面</td>
<td style="text-align:center">个人感觉应该是start X Window</td>
</tr>
<tr>
<td style="text-align:center">exit</td>
<td style="text-align:center">退出当前登陆的用户</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">date</td>
<td style="text-align:center">显示当前日期时间</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">echo</td>
<td style="text-align:center">输出一组值</td>
</tr>
<tr>
<td style="text-align:center">cal</td>
<td style="text-align:center">日历</td>
<td style="text-align:center">calendar</td>
</tr>
<tr>
<td style="text-align:center">bc</td>
<td style="text-align:center">简单的计算器，支持（+，-，×，/，^,%）</td>
<td style="text-align:center">bash calculator</td>
</tr>
<tr>
<td style="text-align:center">tab</td>
<td style="text-align:center">自动补全</td>
</tr>
<tr>
<td style="text-align:center">ctrl+c</td>
<td style="text-align:center">种植程序</td>
</tr>
<tr>
<td style="text-align:center">man</td>
<td style="text-align:center">帮助手册</td>
<td style="text-align:center">manual</td>
</tr>
<tr>
<td style="text-align:center">/word,?word</td>
<td style="text-align:center">查找，n,N向上向下</td>
</tr>
<tr>
<td style="text-align:center">whatis</td>
<td style="text-align:center">查找某一个命令是什么,等于 man -f</td>
<td style="text-align:center">what is</td>
</tr>
<tr>
<td style="text-align:center">info</td>
<td style="text-align:center">功能和man差不多，提供了文件节点的能力</td>
<td style="text-align:center">information</td>
</tr>
<tr>
<td style="text-align:center">/usr/share/doc/..</td>
<td style="text-align:center">存放了各个命令的说明</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">nano</td>
<td style="text-align:center">文本编辑</td>
<td style="text-align:center">//TODO</td>
</tr>
<tr>
<td style="text-align:center">who</td>
<td style="text-align:center">当前有谁在线</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">netstat -a</td>
<td style="text-align:center">当前网络情况</td>
<td style="text-align:center">netstat</td>
</tr>
<tr>
<td style="text-align:center">ps -aux</td>
<td style="text-align:center">进程相关</td>
<td style="text-align:center">process snapshot</td>
</tr>
<tr>
<td style="text-align:center">shutdown</td>
<td style="text-align:center">关机，重启</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">reboot</td>
<td style="text-align:center">重启</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">halt</td>
<td style="text-align:center">关机</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">poweroff</td>
<td style="text-align:center">关机</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sync</td>
<td style="text-align:center">同步</td>
<td style="text-align:center">Synchronize</td>
</tr>
<tr>
<td style="text-align:center">fsck</td>
<td style="text-align:center">磁盘扫描检查修复</td>
<td style="text-align:center">filesystem scan check and repair</td>
</tr>
<tr>
<td style="text-align:center">ls -al</td>
<td style="text-align:center">列出文件</td>
<td style="text-align:center">list</td>
</tr>
<tr>
<td style="text-align:center">chgrp</td>
<td style="text-align:center">更改文件所在组</td>
<td style="text-align:center">change group</td>
</tr>
<tr>
<td style="text-align:center">chown</td>
<td style="text-align:center">更改文件所有者</td>
<td style="text-align:center">change owner</td>
</tr>
<tr>
<td style="text-align:center">chmod</td>
<td style="text-align:center">更改文件权限</td>
<td style="text-align:center">change mode</td>
</tr>
<tr>
<td style="text-align:center">uname -r</td>
<td style="text-align:center">查看内核版本</td>
<td style="text-align:center">//TODO</td>
</tr>
<tr>
<td style="text-align:center">lsb_release -a</td>
<td style="text-align:center">查看distribution信息</td>
<td style="text-align:center">//TODO</td>
</tr>
<tr>
<td style="text-align:center">cd</td>
<td style="text-align:center">切换目录</td>
<td style="text-align:center">change Directory</td>
</tr>
<tr>
<td style="text-align:center">pwd</td>
<td style="text-align:center">显示当前目录</td>
<td style="text-align:center">print working Directory</td>
</tr>
<tr>
<td style="text-align:center">mkdir</td>
<td style="text-align:center">新建目录</td>
<td style="text-align:center">make Directory</td>
</tr>
<tr>
<td style="text-align:center">rmdir</td>
<td style="text-align:center">删除一个空目录</td>
<td style="text-align:center">remove Directory</td>
</tr>
<tr>
<td style="text-align:center">cp</td>
<td style="text-align:center">拷贝，文件属性不变</td>
<td style="text-align:center">copy</td>
</tr>
<tr>
<td style="text-align:center">rm</td>
<td style="text-align:center">删除文件</td>
<td style="text-align:center">remove</td>
</tr>
<tr>
<td style="text-align:center">mv</td>
<td style="text-align:center">移动文件,更改文件名</td>
<td style="text-align:center">move</td>
</tr>
<tr>
<td style="text-align:center">basename</td>
<td style="text-align:center">取得文件名</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">dirname</td>
<td style="text-align:center">取得目录名</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">cat</td>
<td style="text-align:center">由第一行开始显示文件类容</td>
<td style="text-align:center">concatenate files and print.不是很清楚</td>
</tr>
<tr>
<td style="text-align:center">tac</td>
<td style="text-align:center">从最后一行开始显示</td>
<td style="text-align:center">cat的倒写</td>
</tr>
<tr>
<td style="text-align:center">nl</td>
<td style="text-align:center">显示文件并输出行号</td>
<td style="text-align:center">number line of files</td>
</tr>
<tr>
<td style="text-align:center">more</td>
<td style="text-align:center">一页一页显示</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">less</td>
<td style="text-align:center">类似与more，可以向前翻页</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">head</td>
<td style="text-align:center">只看头几行</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">tail</td>
<td style="text-align:center">只看结尾几行</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">od</td>
<td style="text-align:center">以8进制方式读取文件</td>
<td style="text-align:center">octal dump files</td>
</tr>
<tr>
<td style="text-align:center">touch</td>
<td style="text-align:center">创建新文件，或者更改文件时间</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">umask</td>
<td style="text-align:center">设置或访问新建文件或目录的默认权限</td>
</tr>
<tr>
<td style="text-align:center">which</td>
<td style="text-align:center">在当前用户的PATH中寻找命令文件,找不到cd命令，应为是bash内置的</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">whereis</td>
<td style="text-align:center">根据数据库，查找特定的文件,-bmsu</td>
<td style="text-align:center">where is</td>
</tr>
<tr>
<td style="text-align:center">locate</td>
<td style="text-align:center">根据数据库，查找特定的文件,-ir忽略大小写，使用正则</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">updatedb</td>
<td style="text-align:center">更新locate命令依赖的数据库</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">find</td>
<td style="text-align:center">更加强大的查找命令</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">df</td>
<td style="text-align:center">查看目前挂载的设备</td>
<td style="text-align:center">disk filesystem usage</td>
</tr>
<tr>
<td style="text-align:center">du</td>
<td style="text-align:center">查看当前目录下文件与目录的信息</td>
<td style="text-align:center">Directory usage</td>
</tr>
<tr>
<td style="text-align:center">dumpe2fs</td>
<td style="text-align:center">查看某一个文件系统的所有情况</td>
<td style="text-align:center">dump ext2/ext3/ext4 filesystem information</td>
</tr>
<tr>
<td style="text-align:center">fdisk</td>
<td style="text-align:center">对磁盘进行管理，分区操作等，不能处理&gt;2T的磁盘</td>
<td style="text-align:center">manipulate disk partition table</td>
</tr>
<tr>
<td style="text-align:center">mkfs,mke2fs</td>
<td style="text-align:center">磁盘格式化,指定分区信息</td>
<td style="text-align:center">make file system</td>
</tr>
<tr>
<td style="text-align:center">fask</td>
<td style="text-align:center">磁盘检查,检查文件系统是否出错</td>
<td style="text-align:center">file system check</td>
</tr>
<tr>
<td style="text-align:center">badblocks</td>
<td style="text-align:center">检查扇区有没有坏道</td>
<td style="text-align:center">search a device for bad blocks</td>
</tr>
<tr>
<td style="text-align:center">mount</td>
<td style="text-align:center">挂载设备</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">umount</td>
<td style="text-align:center">弹出设备</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">mknod</td>
<td style="text-align:center">将设备文件，设置成外部输入设备，存储设备等，设置设备文件的major,minor</td>
<td style="text-align:center">make block or character special files</td>
</tr>
<tr>
<td style="text-align:center">e2label</td>
<td style="text-align:center">设置设备的卷标</td>
<td style="text-align:center">Change the label on an ext2/ext3/ext4 filesystem</td>
</tr>
<tr>
<td style="text-align:center">tune2fs</td>
<td style="text-align:center">修改卷标，升级文件系统，读super block数据</td>
<td style="text-align:center">adjust tunable filesystem parameters on ext2/ext3/ext4</td>
</tr>
<tr>
<td style="text-align:center">hdparm</td>
<td style="text-align:center">设置IDE借口的磁盘的高级参数</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">parted</td>
<td style="text-align:center">对高于2TB容量的硬盘进行分区</td>
</tr>
</tbody>
</table>
<p><strong>update in 2016-05-17</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux杂记]]></title>
      <url>http://thinerzq.com/2016/05/06/linux/linux%E6%9D%82%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>linux 中的一些琐碎知识点<br><a id="more"></a></p>
<h1 id="目录标识："><a href="#目录标识：" class="headerlink" title="目录标识："></a>目录标识：</h1><table>
<thead>
<tr>
<th style="text-align:center">目录</th>
<th style="text-align:center">意思</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:center">当前目录</td>
</tr>
<tr>
<td style="text-align:center">..</td>
<td style="text-align:center">上一层目录</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">前一个工作目录</td>
</tr>
<tr>
<td style="text-align:center">~</td>
<td style="text-align:center">用户所在主目录</td>
</tr>
<tr>
<td style="text-align:center">~account</td>
<td style="text-align:center">account所在主目录</td>
</tr>
</tbody>
</table>
<h1 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h1><blockquote>
<p><strong> -rw-r–r– l username group size last modify time filename </strong><br>这里的文件时间，指的是mtime,所谓的文件时间还包括 ctime, actime</p>
</blockquote>
<h3 id="系统挂载"><a href="#系统挂载" class="headerlink" title="系统挂载"></a>系统挂载</h3><ol>
<li>根目录必须挂载，而且一定要先于其他mount point被挂载进来</li>
<li>其他挂载点必须为已经新建的目录</li>
<li>所有的挂载点/分区，在同一时间只能挂载一次</li>
<li>如果要卸载，必须先将工作目录，移除到挂载点之外。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux 文件与目录权限问题]]></title>
      <url>http://thinerzq.com/2016/05/06/linux/linux-%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="File"><a href="#File" class="headerlink" title="File"></a>File</h1><table>
<thead>
<tr>
<th style="text-align:center">权限</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">r</td>
<td style="text-align:center">读取文件类容</td>
</tr>
<tr>
<td style="text-align:center">w</td>
<td style="text-align:center">编辑，新增，或者修改文件类容（不能删除）</td>
</tr>
<tr>
<td style="text-align:center">x</td>
<td style="text-align:center">可执行，不代表能执行成功</td>
</tr>
</tbody>
</table>
<h1 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h1><table>
<thead>
<tr>
<th style="text-align:center">权限</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">r</td>
<td style="text-align:center">读取目录结构列表的权限，查询该目录下的文件名列表，只能用ls看文件名，文件的其他属性看不到</td>
</tr>
<tr>
<td style="text-align:center">w</td>
<td style="text-align:center">更改该目录下面的目录结构列表，包括（新建，删除，重命名，转移）该目录下面的文件或目录</td>
</tr>
<tr>
<td style="text-align:center">x</td>
<td style="text-align:center">能够进入该目录工作，可以cd进入这个目录</td>
</tr>
</tbody>
</table>
<p>要将目录开放给任何人，一般要具有rx权限</p>
<a id="more"></a>
<h1 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h1><p>新建文件和目录的时候，他们的默认权限是由umask指定的，<br>umask的值是多少，那么新建的目录或者用户就没有这个权限，同时新建的文件是没有x权限的，而新建的目录有x权限。</p>
<h1 id="文件隐藏属性chattr-lsattr"><a href="#文件隐藏属性chattr-lsattr" class="headerlink" title="文件隐藏属性chattr,lsattr"></a>文件隐藏属性chattr,lsattr</h1><p>chattr -i filename 设置文件不可删除<br>lsattr a filename 显示我你见影藏属性</p>
<!--# 文件的特殊权限 SUID,SGID,SBIT-->
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[多线程知识点总结]]></title>
      <url>http://thinerzq.com/2016/05/04/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>java多线程中一些零碎的知识点总结</p>
<a id="more"></a>
<h1 id="LockSupport"><a href="#LockSupport" class="headerlink" title="LockSupport"></a>LockSupport</h1><p>它在线程类任意位置让线程阻塞，和Thread.suspend()相比，弥补了resume()提前发生，导致线程无法继续执行的情况。和Object.wait()相比，它不需要先获得对象的锁，也不会跑出InterruptedException异常，<br>方法：<br>part();<br>parkNanos()<br>parkUntil();<br>part(Object);</p>
<p>LockSupport为每一个线程准备了一个许可，默认不可用，如果可用park()函数会返回，并消费这个许可，如果不可用就会阻塞，unpark()会使得这个许可可用。</p>
<p>park()的挂起状态不会像suspend()那么给出令人费解的Runnable状态，而是WAITING状态，还会标注是part()引起的。<br>还可以使用park(Object) 在当前线程中设置一个阻塞对象，用于分析线程阻塞用。</p>
<p>LockSupport还能支持中断影响，但是LockSupport.park()不会跑出InterruptedException 异常，只会默默返回。配合上Thread.interrupted()方法可以获得中断标记，执行中断处理。</p>
<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><p> 使用submit(Runnable)方法执行任务，线程池可能会吃掉程序跑出的异常，改用execute(Runnable)方法执行任务，或者Future future = submit(Runnable);future.get()执行任务。另外还可以扩展线程池，包装一个新的Runnable扑捉异常。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java线程池的实现总结]]></title>
      <url>http://thinerzq.com/2016/05/03/java/java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="Thread-和Runnable-的区别"><a href="#Thread-和Runnable-的区别" class="headerlink" title="Thread 和Runnable 的区别"></a>Thread 和Runnable 的区别</h1><p>学了这么久的多线程，始终有一点迷惑</p>
<blockquote>
<p>往线程池里面提交的时候，提交的是一个实现了Runnable接口的对象，本来提交的时候就是一个Runnable,那么怎么实现线程复用。</p>
</blockquote>
<p>产生这个迷惑的原因是没有弄明白Thread 和Runnable的区别。</p>
<p>java中真正的线程执行类是Thread  </p>
<p>Runnable（可运行的）只是一个接口，中间定义了run()方法，实现了这个接口的类，实现了run()方法，通过把这个实现类交给Thread对象去运行。  </p>
<p>thread.start()方法里调用了start0()这个native函数来实现.start()函数的注释上写着，java虚拟机会自动调用这个线程的run()方法，然并卵。  </p>
<p>请看thread里面的run()怎么写的，如果target(一个Runnable实例对象)不为空，他就调用其中的run()方法。我相信start0()这个native方法里面肯定取调用了run()方法。见如下的代码</p>
<p>也可以把Runnable理解成只是JDK给出的一个标识性接口而已。看网上说了那么多都是浮云。<br><a id="more"></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Causes this thread to begin execution; the Java Virtual Machine</div><div class="line">    * calls the &lt;code&gt;run&lt;/code&gt; method of this thread.</div><div class="line">    * &lt;p&gt;</div><div class="line">    * The result is that two threads are running concurrently: the</div><div class="line">    * current thread (which returns from the call to the</div><div class="line">    * &lt;code&gt;start&lt;/code&gt; method) and the other thread (which executes its</div><div class="line">    * &lt;code&gt;run&lt;/code&gt; method).</div><div class="line">    * &lt;p&gt;</div><div class="line">    * It is never legal to start a thread more than once.</div><div class="line">    * In particular, a thread may not be restarted once it has completed</div><div class="line">    * execution.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@exception</span>  IllegalThreadStateException  if the thread was already</div><div class="line">    *               started.</div><div class="line">    * <span class="doctag">@see</span>        #run()</div><div class="line">    * <span class="doctag">@see</span>        #stop()</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * This method is not invoked for the main method thread or "system"</div><div class="line">         * group threads created/set up by the VM. Any new functionality added</div><div class="line">         * to this method in the future may have to also be added to the VM.</div><div class="line">         *</div><div class="line">         * A zero status value corresponds to state "NEW".</div><div class="line">         */</div><div class="line">        <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</div><div class="line"></div><div class="line">        <span class="comment">/* Notify the group that this thread is about to be started</span></div><div class="line">         * so that it can be added to the group's list of threads</div><div class="line">         * and the group's unstarted count can be decremented. */</div><div class="line">        group.add(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            start0();</div><div class="line">            started = <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span> (!started) &#123;</div><div class="line">                    group.threadStartFailed(<span class="keyword">this</span>);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</div><div class="line">                <span class="comment">/* do nothing. If start0 threw a Throwable then</span></div><div class="line">                  it will be passed up the call stack */</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">start0</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * If this thread was constructed using a separate</div><div class="line">     * &lt;code&gt;Runnable&lt;/code&gt; run object, then that</div><div class="line">     * &lt;code&gt;Runnable&lt;/code&gt; object's &lt;code&gt;run&lt;/code&gt; method is called;</div><div class="line">     * otherwise, this method does nothing and returns.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * Subclasses of &lt;code&gt;Thread&lt;/code&gt; should override this method.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span>     #start()</div><div class="line">     * <span class="doctag">@see</span>     #stop()</div><div class="line">     * <span class="doctag">@see</span>     #Thread(ThreadGroup, Runnable, String)</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</div><div class="line">            target.run();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h1 id="自己写一个线程池"><a href="#自己写一个线程池" class="headerlink" title="自己写一个线程池"></a>自己写一个线程池</h1><p>大家都知道要用线程池，也有一些讲Executor框架的博客之类的，咋一看理解起来不成问题，自己准备参照网上的一些例子，写一个最简单的线程池</p>
<blockquote>
<p>线程池说白了，一个List池子里面有一堆的<font color="red">Thread对象</font>，然后提交一个<font color="red">Runable对象</font>,这时候，<font color="red">从List池子里面取一个Thread对象来调用Runnable对象的run()方法而已</font>!   Thread才是真正的线程对象，他的创建才是需要开销的。</p>
</blockquote>
<h2 id="线程池类"><a href="#线程池类" class="headerlink" title="线程池类"></a>线程池类</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Intellij IDEA</div><div class="line"> * Date: 16-5-3</div><div class="line"> * Time: 下午2:39</div><div class="line"> * User: thinerzq</div><div class="line"> * Github: https://www.github.com/ThinerZQ</div><div class="line"> * Blog: http://www.thinerzq.me</div><div class="line"> * Email: thinerzq@gmail.com</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Collections;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 自定义线程池，学习线程池的原理</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadPool</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//单例模式</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyThreadPool instance = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="comment">//空闲线程队列</span></div><div class="line">    <span class="keyword">private</span> List&lt;MyThread&gt; idelThreadList;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;MyThread&gt; workerThreadList;</div><div class="line"></div><div class="line">    <span class="comment">//总的线程数量</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> threadCount;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isShutdown=<span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyThreadPool</span><span class="params">()</span></span>&#123;</div><div class="line">        idelThreadList = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</div><div class="line">        workerThreadList = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</div><div class="line">        threadCount = <span class="number">0</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//单例模式获取线程池实例</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> MyThreadPool <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</div><div class="line">            instance = <span class="keyword">new</span> MyThreadPool();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span>  <span class="title">submit</span><span class="params">(Runnable target)</span></span>&#123;</div><div class="line"></div><div class="line">        MyThread workThread = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (idelThreadList.size() &gt; <span class="number">0</span>)&#123;</div><div class="line"></div><div class="line">            <span class="comment">//随机取一个线程执行任务,这里取第1个空闲线程</span></div><div class="line">            workThread = idelThreadList.get(<span class="number">0</span>);</div><div class="line">            idelThreadList.remove(workThread);</div><div class="line">            <span class="comment">//开始工作了</span></div><div class="line">            workThread.setTarget(target);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="comment">//创建新的线程来执行任务</span></div><div class="line">            threadCount ++;</div><div class="line">            workThread = <span class="keyword">new</span> MyThread(instance,target);</div><div class="line">            workerThreadList.add(workThread);</div><div class="line">            workThread.start();</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shutdown</span><span class="params">()</span></span>&#123;</div><div class="line">        isShutdown = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; idelThreadList.size(); i++) &#123;</div><div class="line">            idelThreadList.get(i).shutdown();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">rePushToIdeaThreadList</span><span class="params">(MyThread myThread)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!isShutdown)&#123;</div><div class="line">            idelThreadList.add(myThread);</div><div class="line">        &#125;<span class="keyword">else</span></div><div class="line">            myThread.shutdown();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">pullToWorkThreadList</span><span class="params">(MyThread myThread)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (!isShutdown)&#123;</div><div class="line">            workerThreadList.remove(myThread);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            myThread.shutdown();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//等到线程池执行完所有任务，不一定准确，没想到好的实现方式</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">awaitTermination</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (workerThreadList.size()!=<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (workerThreadList.size() == <span class="number">0</span>)&#123;</div><div class="line">                Thread.sleep(<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getThreadCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> threadCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="线程池中的线程类"><a href="#线程池中的线程类" class="headerlink" title="线程池中的线程类"></a>线程池中的线程类</h2><p>为什么需要定义自己的线程？ 因为线程池里面的线程，执行完提交的任务之后，还需要复用（不能run()方法执行完就结束了）。所以需要自定线程来管理当前线程的生命周期。<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Intellij IDEA</div><div class="line"> * Date: 16-5-3</div><div class="line"> * Time: 下午2:42</div><div class="line"> * User: thinerzq</div><div class="line"> * Github: https://www.github.com/ThinerZQ</div><div class="line"> * Blog: http://www.thinerzq.me</div><div class="line"> * Email: thinerzq@gmail.com</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//当前线程所在的线程池</span></div><div class="line">    <span class="keyword">private</span> MyThreadPool pool;</div><div class="line"></div><div class="line">    <span class="comment">//当前线程需要执行的任务</span></div><div class="line">    <span class="keyword">private</span> Runnable target;</div><div class="line"></div><div class="line">    <span class="comment">//当前线程是不是结束了</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isShutDown = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="comment">//当前线程是不是空闲的</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isIdle = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(MyThreadPool myThreadPool,Runnable target)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.pool = myThreadPool;</div><div class="line">        <span class="keyword">this</span>.target = target;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//当前线程的处理逻辑,只要当前现成没有结束，就不退出</span></div><div class="line">        <span class="keyword">while</span> (!isShutDown)&#123;</div><div class="line"></div><div class="line">            <span class="comment">//</span></div><div class="line">            isIdle = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (target != <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="comment">//运行任务，单纯的调用target的run()方法</span></div><div class="line">                target.run();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            isIdle = <span class="keyword">true</span>;</div><div class="line">            pool.pullToWorkThreadList(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">//线程运行任务结束了，重新放入线程池</span></div><div class="line">                pool.rePushToIdeaThreadList(<span class="keyword">this</span>);</div><div class="line">                <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</div><div class="line">                    <span class="comment">//线程空闲，需要等待任务到来</span></div><div class="line">                    wait();</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">                <span class="comment">//放入线程池失败</span></div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            isIdle = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Runnable target)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.target = target;</div><div class="line">        notify();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.isShutDown = <span class="keyword">true</span>;</div><div class="line">        <span class="comment">//要关闭的时候，要把wait()的本线程唤醒，然后再让其运行完。</span></div><div class="line">        notify();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isIdle</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> isIdle;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>只要上面两个类，一个最基本的线程池就建立好了（每次提交任务的时候，如果有空闲线程就使用空闲线程，否则创建新的线程），每次只要使用submit()方法提交一个任务就好了。</p>
<p>下面使用一个例子，来测试一下</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="两个任务类"><a href="#两个任务类" class="headerlink" title="两个任务类"></a>两个任务类</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskThreadA</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"我是任务A,现在被执行"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskThreadB</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"我是任务B,现在被执行"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Client类"><a href="#Client类" class="headerlink" title="Client类"></a>Client类</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">            Runnable runnable = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span> (i%<span class="number">2</span> == <span class="number">0</span> )</div><div class="line">                runnable = <span class="keyword">new</span> TaskThreadA();</div><div class="line">            <span class="keyword">else</span></div><div class="line">                runnable = <span class="keyword">new</span> TaskThreadB();</div><div class="line">            MyThreadPool.getInstance().submit(runnable);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//等待所有任务执行完成</span></div><div class="line">        MyThreadPool.getInstance().awaitTermination();</div><div class="line"></div><div class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">        System.out.println(<span class="string">"time consume : "</span>+ (end-start)+<span class="string">" ms"</span>);</div><div class="line">        System.out.println(<span class="string">"一共启动了: "</span>+MyThreadPool.getInstance().getThreadCount()+<span class="string">" 个线程"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p> 我们提交了100个任务，可是最后只启动了42个线程，这就是线程池。Executor框架中的几种线程池都差不多是这种套路，只是控制策略根加的多。<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">...</div><div class="line">我是任务B,现在被执行</div><div class="line">我是任务B,现在被执行</div><div class="line">我是任务A,现在被执行</div><div class="line">我是任务B,现在被执行</div><div class="line">我是任务A,现在被执行</div><div class="line">我是任务A,现在被执行</div><div class="line">我是任务B,现在被执行</div><div class="line">我是任务A,现在被执行</div><div class="line">我是任务B,现在被执行</div><div class="line">我是任务B,现在被执行</div><div class="line">我是任务A,现在被执行</div><div class="line">我是任务B,现在被执行</div><div class="line">我是任务A,现在被执行</div><div class="line">我是任务B,现在被执行</div><div class="line">我是任务A,现在被执行</div><div class="line">我是任务B,现在被执行</div><div class="line">time consume : 11 ms</div><div class="line">一共启动了: 42 个线程</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[synchronized和ReentrantLock区别与联系]]></title>
      <url>http://thinerzq.com/2016/05/03/java/synchronized%E5%92%8CReentrantLock%E5%8C%BA%E5%88%AB%E4%B8%8E%E8%81%94%E7%B3%BB/</url>
      <content type="html"><![CDATA[<ol>
<li>synchronized是在JVM层面上实现的，不但可以通过一些监控工具监控synchronized的锁定，而且在代码执行时出现异常，JVM会自动释放锁定，但是使用ReentrantLock则不行，ReentrantLock是通过自己写代码实现加锁和释放的，要保证锁定一定会被释放，就必须将unLock()放到finally{}中</li>
<li><p>synchronized 采用了悲观锁的机制，ReentrantLock采用了乐观锁的机制，通过原子类来实现</p>
</li>
<li><p>ReentrantLock能做到synchronized能做到的所有事情，还包括如下<br>3.1. lock()方法,如果获取了锁立即返回，如果别的线程持有锁，当前线程则一直处于阻塞状态，直到获取锁<br>3.2. tryLock()方法，如果获取了锁立即返回true，如果别的线程正持有锁，立即返回false<br>3.3. tryLock(long timeout,TimeUnit unit)，如果获取了锁定立即返回true，如果别的线程正持有锁，会等待参数给定的时间，在等待的过程中，如果获取了锁定，就返回true，如果等待超时，返回false<br>3.4. lockInterruptibly(),如果获取了锁定立即返回，如果没有获取锁定，当前线程处于阻塞状态，直到或者锁定，或者当前线程被别的线程中断<br>3.5. ReentrantLock可以使用公平锁，synchronized不行。<br><code>ReentrantLock fairLock = new ReentrantLock(true);</code></p>
</li>
<li>在资源竞争不是很激烈的情况下，Synchronized的性能要优于ReetrantLock，但是在资源竞争很激烈的情况下，Synchronized的性能会下降几十倍，但是ReetrantLock的性能能维持常态；</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java反射基础]]></title>
      <url>http://thinerzq.com/2016/05/01/java/java%E5%8F%8D%E5%B0%84%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<center><h1>java 反射</h1></center>

<blockquote>
<p>使用Java反射机制可以在运行时期检查Java类的信息，<br>检查Java类的信息往往是你在使用Java反射机制的时候所做的第一件事情，<br>通过获取类的信息你可以获取以下相关的内容：</p>
</blockquote>
<ol>
<li>Class对象</li>
<li>类名</li>
<li>修饰符</li>
<li>包信息</li>
<li>父类</li>
<li>实现的接口</li>
<li>构造器</li>
<li>方法</li>
<li>变量</li>
<li>注解</li>
</ol>
<a id="more"></a>
<h1 id="Class对象"><a href="#Class对象" class="headerlink" title="Class对象"></a>Class对象</h1><p>在你想检查一个类的信息之前，你首先需要获取类的Class对象。Java中的所有类型包括基本类型(int, long, float等等)，即使是数组都有与之关联的Class类的对象。</p>
<h2 id="编译期间已知类名的获取Class对象的方法"><a href="#编译期间已知类名的获取Class对象的方法" class="headerlink" title="编译期间已知类名的获取Class对象的方法"></a>编译期间已知类名的获取Class对象的方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Class myObjectClass = MyObject.class;</div></pre></td></tr></table></figure>
<h2 id="编译期间不知道类名的获取Class对象的方法"><a href="#编译期间不知道类名的获取Class对象的方法" class="headerlink" title="编译期间不知道类名的获取Class对象的方法"></a>编译期间不知道类名的获取Class对象的方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">String className = ... ;<span class="comment">//在运行期获取的类名字符串===全限定名字：包括包名字</span></div><div class="line">Class <span class="class"><span class="keyword">class</span> </span>= Class.forName(className);</div></pre></td></tr></table></figure>
<font color="red">拿到这上述的Class对象之后，就能得到对象的所有<strong>元信息</strong></font>

<h1 id="使用Class对象获取信息"><a href="#使用Class对象获取信息" class="headerlink" title="使用Class对象获取信息"></a>使用Class对象获取信息</h1><h2 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Class aClass = ... <span class="comment">//获取Class对象</span></div><div class="line">String className = aClass.getName();<span class="comment">//获取到的是全限定名</span></div><div class="line">String simpleClassName = aClass.getSimpleName();<span class="comment">//获取到的是对象的名字</span></div></pre></td></tr></table></figure>
<h2 id="类的修饰符"><a href="#类的修饰符" class="headerlink" title="类的修饰符"></a>类的修饰符</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Class  aClass = ... <span class="comment">//获</span></div><div class="line"><span class="keyword">int</span> modifiers = aClass.getModifiers();</div></pre></td></tr></table></figure>
<p>修饰符都被包装成一个int类型的数字，这样每个修饰符都是一个位标识(flag bit)，这个位标识可以设置和清除修饰符的类型。<br>可以使用java.lang.reflect.Modifier类中的方法来检查修饰符的类型：</p>
<h3 id="Modifier类的判定方法"><a href="#Modifier类的判定方法" class="headerlink" title="Modifier类的判定方法"></a>Modifier类的判定方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Modifier.isAbstract(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isFinal(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isInterface(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isNative(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isPrivate(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isProtected(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isPublic(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isStatic(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isStrict(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isSynchronized(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isTransient(<span class="keyword">int</span> modifiers);</div><div class="line">Modifier.isVolatile(<span class="keyword">int</span> modifiers);</div></pre></td></tr></table></figure>
<h3 id="每一个类修饰符的具体定义"><a href="#每一个类修饰符的具体定义" class="headerlink" title="每一个类修饰符的具体定义"></a>每一个类修饰符的具体定义</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PUBLIC           = <span class="number">0x00000001</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PRIVATE          = <span class="number">0x00000002</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PROTECTED        = <span class="number">0x00000004</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATIC           = <span class="number">0x00000008</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FINAL            = <span class="number">0x00000010</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SYNCHRONIZED     = <span class="number">0x00000020</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VOLATILE         = <span class="number">0x00000040</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSIENT        = <span class="number">0x00000080</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NATIVE           = <span class="number">0x00000100</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INTERFACE        = <span class="number">0x00000200</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ABSTRACT         = <span class="number">0x00000400</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STRICT           = <span class="number">0x00000800</span>;</div></pre></td></tr></table></figure>
<h2 id="包信息"><a href="#包信息" class="headerlink" title="包信息"></a>包信息</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Class  aClass = ... <span class="comment">//</span></div><div class="line">Package <span class="keyword">package</span> = aClass.getPackage();</div></pre></td></tr></table></figure>
<p>通过Package对象你可以获取包的相关信息比如”包名“等</p>
<h2 id="父类"><a href="#父类" class="headerlink" title="父类"></a>父类</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Class superclass = aClass.getSuperclass();</div></pre></td></tr></table></figure>
<p>可以看到superclass对象其实就是一个Class类的实例，所以你可以继续在这个对象上进行反射操作。</p>
<h2 id="实现的接口"><a href="#实现的接口" class="headerlink" title="实现的接口"></a>实现的接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Class[] interfaces = aClass.getInterfaces();</div></pre></td></tr></table></figure>
<p>由于一个类可以实现多个接口，因此getInterfaces();方法返回一个Class数组，在Java中接口同样有对应的Class对象。注意：getInterfaces()方法仅仅只返回当前类所实现的接口。当前类的父类如果实现了接口，这些接口是不会在返回的Class集合中的，尽管实际上当前类其实已经实现了父类接口。</p>
<h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Constructor[] constructors = aClass.getConstructors();</div></pre></td></tr></table></figure>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Method[] method = aClass.getMethods();</div></pre></td></tr></table></figure>
<h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Field[] method = aClass.getFields();</div></pre></td></tr></table></figure>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Annotation[] annotations = aClass.getAnnotations();</div></pre></td></tr></table></figure>
<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p><pre>Info.java</pre><br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Info</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id=<span class="number">10</span>;</div><div class="line">    <span class="keyword">private</span> String name=<span class="string">"zhengqiang"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getNameAndId</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> name+<span class="string">" "</span>+id;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><pre>ReflectionBasic.java</pre> 解析类前面Info.java类的类<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionBasic</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</div><div class="line"></div><div class="line">        Class infoClass= Info.class;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"全限定名："</span>+infoClass.getName());</div><div class="line">        System.out.println(<span class="string">"类名："</span>+infoClass.getSimpleName());</div><div class="line"></div><div class="line">        <span class="keyword">int</span> modifier = infoClass.getModifiers();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"是否时public的： "</span>+Modifier.isPublic(modifier));</div><div class="line"></div><div class="line">        Package packagename = infoClass.getPackage();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"包名："</span>+packagename.getName());</div><div class="line"></div><div class="line">        Method[] methods = infoClass.getDeclaredMethods();</div><div class="line">        <span class="keyword">for</span> (Method method :</div><div class="line">                methods) &#123;</div><div class="line">            System.out.println(<span class="string">"方法签名： "</span>+method.getModifiers()+<span class="string">" "</span> +method.getReturnType()+<span class="string">" "</span>+method.getName());</div><div class="line">        &#125;</div><div class="line">        Field[] fields = infoClass.getDeclaredFields();</div><div class="line">        <span class="keyword">for</span> (Field field :</div><div class="line">                fields) &#123;</div><div class="line">            System.out.println(<span class="string">"属性签名： "</span>+field.getModifiers()+ <span class="string">" "</span>+ field.getType() +<span class="string">" "</span>+ field.getName());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果</p>
<blockquote>
<p>全限定名：com.zq.reflection.Info<br>类名：Info<br>是否时public的： true<br>包名：com.zq.reflection<br>方法签名： 2 class java.lang.String getNameAndId<br>属性签名： 2 int id<br>属性签名： 2 class java.lang.String name</p>
</blockquote>
<p> Process finished with exit code 0</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我眼中的http协议]]></title>
      <url>http://thinerzq.com/2016/04/28/http/%E6%88%91%E7%9C%BC%E4%B8%AD%E7%9A%84http%E5%8D%8F%E8%AE%AE/</url>
      <content type="html"><![CDATA[<p>URI是下面的这样的形式</p>
<blockquote>
<p><a href="http://user:pass@www.example.jp:80/dir/index.htm?uid=1#ch1" target="_blank" rel="external">http://user:pass@www.example.jp:80/dir/index.htm?uid=1#ch1</a></p>
</blockquote>
<pre><code>各部分标示的意思如下     
</code></pre><table>
<thead>
<tr>
<th style="text-align:center">字符串</th>
<th style="text-align:center">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">http</td>
<td style="text-align:center">协议类型</td>
</tr>
<tr>
<td style="text-align:center">user：pass</td>
<td style="text-align:center">登录服务器的用户名和密码</td>
</tr>
<tr>
<td style="text-align:center">www.example.jp</td>
<td style="text-align:center">服务器地址，还可以用ipv6的标示的表示形式[0:0:0:0:0:0:0:1]</td>
</tr>
<tr>
<td style="text-align:center">80</td>
<td style="text-align:center">端口号</td>
</tr>
<tr>
<td style="text-align:center">index.html</td>
<td style="text-align:center">带层次的文件路径</td>
</tr>
<tr>
<td style="text-align:center">uid=1</td>
<td style="text-align:center">查询字符串</td>
</tr>
<tr>
<td style="text-align:center">ch1</td>
<td style="text-align:center">片段标示符，锚</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h2><table>
<thead>
<tr>
<th style="text-align:center">方法类型</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">支持的协议版本</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">GET</td>
<td style="text-align:center">请求http服务器上的某一个页面资源, 如果请求的是文本资源，保持原样返回；如果是CGI一样的程序，则返回执行后的输出结果，主要目的是想访问资源</td>
<td style="text-align:center">1.0,1.1</td>
</tr>
<tr>
<td style="text-align:center">POST</td>
<td style="text-align:center">post的主要目的是把消息传递给服务器</td>
<td style="text-align:center">1.0,1.1</td>
</tr>
<tr>
<td style="text-align:center">PUT</td>
<td style="text-align:center">传输文件，但是HTTP/1.1的PUT方法不带验证机制，任何人都可以上传文件， 需要配合web应用程序的验证机制，或REST程序使用。</td>
<td style="text-align:center">1.0,1.1</td>
</tr>
<tr>
<td style="text-align:center">HEAD</td>
<td style="text-align:center">和GET方法一样，但是不返回报文主体，用于确认URI的有效性和资源更新的日期等</td>
<td style="text-align:center">1.0,1.1</td>
</tr>
<tr>
<td style="text-align:center">DELETE</td>
<td style="text-align:center">删除文件，但是HTTP/1.1的DELETE方法不带验证机制，任何人都可以删除文件， 需要配合web应用程序的验证机制，或REST程序使用。</td>
<td style="text-align:center">1.0,1.1</td>
</tr>
<tr>
<td style="text-align:center">OPTIONS</td>
<td style="text-align:center">询问服务器只会哪些请求方法</td>
<td style="text-align:center">1.1</td>
</tr>
<tr>
<td style="text-align:center">TRACE</td>
<td style="text-align:center">该方法需要配合请求头中的Max-Forwards字段使用，并指定一个初始值， 如果使用了<font color="red"> 代理服务器</font>，没经过一个代理服务器，该字段值就会减1， 直到为0，服务器就返回请求内容。可能会引起跨站追踪</td>
<td style="text-align:center">1.1</td>
</tr>
<tr>
<td style="text-align:center">CONNECT</td>
<td style="text-align:center">要求在于代理服务器通信时候，建立隧道</td>
<td style="text-align:center">1.1</td>
</tr>
<tr>
<td style="text-align:center">LINK</td>
<td style="text-align:center">建立与资源之间的联系</td>
<td style="text-align:center">1.0</td>
</tr>
<tr>
<td style="text-align:center">UNLINK</td>
<td style="text-align:center">断开连接关系</td>
<td style="text-align:center">1.0</td>
</tr>
</tbody>
</table>
<h2 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h2><p>没有持久连接之前，如果一个页面包含多个图片等请求，则每一服务图片的请求，都需要与服务器端建立TPC/IP连接，大大浪费了时间，有了持久连接之后，只需要建立一次TCP/IP连接，就能在其中保持多个HTTP请求和响应。<font color="red">HTTP1.1所有的连接，默认都是持久连接,主要的做法是在请求头中增加了，keep-alive选项</font></p>
<h2 id="管线化"><a href="#管线化" class="headerlink" title="管线化"></a>管线化</h2><p>持久化连接虽然能够，在一次TCP/IP连接内，进行多次HTTP请求，但是这些请求是串行的，只有一个请求结束了之后，才能继续第二个请求。管线化使得在一个TCP/IP连接内，多个请求可以并发执行</p>
<h2 id="使用Cookie做状态管理"><a href="#使用Cookie做状态管理" class="headerlink" title="使用Cookie做状态管理"></a>使用Cookie做状态管理</h2><p>HTTP是无状态的协议，它不对之前发生过的请求和响应的状态进行管理，无法根据之前的状态尽心Benin的处理。但是通过服务端向客户端指定一个cookie信息，每次客户端请求的使用，使用这个cookie信息请求服务端，服务端就知道客户端的情况了。</p>
<h1 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h1><table>
<thead>
<tr>
<th style="text-align:center">状态码</th>
<th style="text-align:center">字段值</th>
<th style="text-align:center">原因</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">200</td>
<td style="text-align:center">OK</td>
<td style="text-align:center">成功</td>
</tr>
<tr>
<td style="text-align:center">204</td>
<td style="text-align:center">No Content</td>
<td style="text-align:center">请求已经正确处理，不需要返回任何实体内容</td>
</tr>
<tr>
<td style="text-align:center">206</td>
<td style="text-align:center">Partial Contex</td>
<td style="text-align:center">客户端进行了范围请求，服务器成功执行了这部分范围请求，可用于断点续传</td>
</tr>
<tr>
<td style="text-align:center">301</td>
<td style="text-align:center">Move Permanently</td>
<td style="text-align:center">标示被请求的资源已经被分配了新的URI</td>
</tr>
<tr>
<td style="text-align:center">302</td>
<td style="text-align:center">Found</td>
<td style="text-align:center">临时性重定向，访问的URI临时的迁移到另外的地方了，以后还可能会变化, 禁止POST转化为GET</td>
</tr>
<tr>
<td style="text-align:center">303</td>
<td style="text-align:center">See Other</td>
<td style="text-align:center">指示客户端以Get形式重定向到另一个URI上去</td>
</tr>
<tr>
<td style="text-align:center">304</td>
<td style="text-align:center">Not Modified</td>
<td style="text-align:center">附带条件的请求时，但是没有找到合适的资源，不包含任何响应的主体部分</td>
</tr>
<tr>
<td style="text-align:center">307</td>
<td style="text-align:center">Temporary Redirect</td>
<td style="text-align:center">禁止POST变为GET</td>
</tr>
<tr>
<td style="text-align:center">400</td>
<td style="text-align:center">Bas Request</td>
<td style="text-align:center">请求报文中存在语法错误</td>
</tr>
<tr>
<td style="text-align:center">401</td>
<td style="text-align:center">Unauthorized</td>
<td style="text-align:center">发送的请求需要通过HTTP认证（BASIC,DIGEST）</td>
</tr>
<tr>
<td style="text-align:center">403</td>
<td style="text-align:center">Forbidden</td>
<td style="text-align:center">对请求资源的访问被服务器拒绝了</td>
</tr>
<tr>
<td style="text-align:center">404</td>
<td style="text-align:center">Not Found</td>
<td style="text-align:center">服务器没有请求的资源</td>
</tr>
<tr>
<td style="text-align:center">500</td>
<td style="text-align:center">Internal Server Error</td>
<td style="text-align:center">服务器端在执行请求时候发生了错误</td>
</tr>
<tr>
<td style="text-align:center">503</td>
<td style="text-align:center">Service Unavailable</td>
<td style="text-align:center">服务器处于超负载状态，一段时候后再访问</td>
</tr>
</tbody>
</table>
<h1 id="通信数据转发程序"><a href="#通信数据转发程序" class="headerlink" title="通信数据转发程序"></a>通信数据转发程序</h1><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>转发功能的应用程序</p>
<h2 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h2><p>转发其他服务器通信数据的服务器，除了具备代理服务器的相关功能之外，还能够使通信线路上的服务器提供非HTTP协议服务</p>
<h2 id="隧道"><a href="#隧道" class="headerlink" title="隧道"></a>隧道</h2><p>建立一条与其他服务器的通信线路，到时候使用SSL等加密手段进行通信。目的是为了确保客户端与服务器进行安全的通信</p>
<h1 id="http的瓶颈"><a href="#http的瓶颈" class="headerlink" title="http的瓶颈"></a>http的瓶颈</h1><ol>
<li>一条链接只可发送一个请求</li>
<li>请求只能从客户端开始。客户端不可以接受除了响应意外的指令</li>
<li>请求/响应首部未经过压缩就发送，首部信息越大延迟越大</li>
<li>发送冗长的首部。每次互相发送相同的首部造成浪费较多</li>
<li>可选择任意数据的压缩格式。非强制压缩发送</li>
</ol>
<h1 id="Ajax解决方法"><a href="#Ajax解决方法" class="headerlink" title="Ajax解决方法"></a>Ajax解决方法</h1><p>只用于更新一部分页面，使得响应中传输的数据因此减少，缺点：但是会导师大量请求产生。</p>
<h1 id="Comet解决方法"><a href="#Comet解决方法" class="headerlink" title="Comet解决方法"></a>Comet解决方法</h1><p>一旦服务器有内容更新，Comet不会让请求等待，而是直接给客户端访问响应，如果服务端没有内容更新，Comet挂起请求，当服务器有更新的时候，再返回响应。缺点：挂起了去请求，消耗服务端资源。</p>
<h1 id="SPDY的解决方法"><a href="#SPDY的解决方法" class="headerlink" title="SPDY的解决方法"></a>SPDY的解决方法</h1><p>在协议解决消除HTTP的瓶颈<br>要求在应用程和传输层之间如下会话层SPDY，并在表示层使用SSL，带来的改变如下：</p>
<h2 id="多路复用流"><a href="#多路复用流" class="headerlink" title="多路复用流"></a>多路复用流</h2><p>单一的TCP连接，可以无限制处理多个HTTP请求</p>
<h2 id="赋予请求优先级"><a href="#赋予请求优先级" class="headerlink" title="赋予请求优先级"></a>赋予请求优先级</h2><p>这样主要是为了在发送多个请求时候，解决因为带宽低而导致的响应变慢的问题（TODO）</p>
<h2 id="压缩HTTP首部"><a href="#压缩HTTP首部" class="headerlink" title="压缩HTTP首部"></a>压缩HTTP首部</h2><p>通信的数据量少了</p>
<h2 id="推送功能"><a href="#推送功能" class="headerlink" title="推送功能"></a>推送功能</h2><p>支持服务端主动向客户端发送数据</p>
<h1 id="全双工通信的WebSocket"><a href="#全双工通信的WebSocket" class="headerlink" title="全双工通信的WebSocket"></a>全双工通信的WebSocket</h1><p>WebSocket协议的特点</p>
<h2 id="推送功能-1"><a href="#推送功能-1" class="headerlink" title="推送功能"></a>推送功能</h2><p>支持服务端向客户端推送数据</p>
<h2 id="减少通信量"><a href="#减少通信量" class="headerlink" title="减少通信量"></a>减少通信量</h2><p>只要建立了WebSocket连接，就希望一直保持连接状态<br>为了实现WebSocket通信，在HTTP连接之后，需要完成一次“握手“步骤</p>
<h3 id="握手-请求"><a href="#握手-请求" class="headerlink" title="握手*请求"></a>握手*请求</h3><p>设置HTTP hearder</p>
<blockquote>
<p>Upgrade: wbsocket<br>Connection: Upgrade<br>Sec-WebSocket-Key: XXXXXXXXXXXX<br>Sec-WebSocket-Protocol : chat, superchat<br>Sec-WebSocket-Version : 13</p>
</blockquote>
<h3 id="握手-响应"><a href="#握手-响应" class="headerlink" title="握手*响应"></a>握手*响应</h3><p>对应之前的请求，返回状态码<font color="red">101 Switching Protocols</font>响应</p>
<p>成功确立WebSocket连接之后，通行时不再使用HTTP数据帧，而采用WebSocket独立的数据帧</p>
<blockquote>
<p>http不具备必要的安全功能，</p>
</blockquote>
<h1 id="因输出值转义不完全而应发的安全漏洞"><a href="#因输出值转义不完全而应发的安全漏洞" class="headerlink" title="因输出值转义不完全而应发的安全漏洞"></a>因输出值转义不完全而应发的安全漏洞</h1><p>一般是用户点击了某一个<font color="red">别人写好的 有各种陷阱的链接</font></p>
<h2 id="跨站脚本攻击"><a href="#跨站脚本攻击" class="headerlink" title="跨站脚本攻击"></a>跨站脚本攻击</h2><h2 id="SQL注入攻击"><a href="#SQL注入攻击" class="headerlink" title="SQL注入攻击"></a>SQL注入攻击</h2><h2 id="OS命名注入攻击"><a href="#OS命名注入攻击" class="headerlink" title="OS命名注入攻击"></a>OS命名注入攻击</h2><h2 id="HTTP首部注入攻击"><a href="#HTTP首部注入攻击" class="headerlink" title="HTTP首部注入攻击"></a>HTTP首部注入攻击</h2><h2 id="邮件首部注入攻击"><a href="#邮件首部注入攻击" class="headerlink" title="邮件首部注入攻击"></a>邮件首部注入攻击</h2><h2 id="目录遍历攻击"><a href="#目录遍历攻击" class="headerlink" title="目录遍历攻击"></a>目录遍历攻击</h2><h2 id="远程文件包含攻击"><a href="#远程文件包含攻击" class="headerlink" title="远程文件包含攻击"></a>远程文件包含攻击</h2><h1 id="因设置或设计上的缺陷引发的安全漏洞"><a href="#因设置或设计上的缺陷引发的安全漏洞" class="headerlink" title="因设置或设计上的缺陷引发的安全漏洞"></a>因设置或设计上的缺陷引发的安全漏洞</h1><h2 id="强制浏览"><a href="#强制浏览" class="headerlink" title="强制浏览"></a>强制浏览</h2><h2 id="不正确的错误消息处理"><a href="#不正确的错误消息处理" class="headerlink" title="不正确的错误消息处理"></a>不正确的错误消息处理</h2><h2 id="开放重定向"><a href="#开放重定向" class="headerlink" title="开放重定向"></a>开放重定向</h2><h1 id="因会话管理疏忽的安全漏洞"><a href="#因会话管理疏忽的安全漏洞" class="headerlink" title="因会话管理疏忽的安全漏洞"></a>因会话管理疏忽的安全漏洞</h1><h2 id="会话劫持"><a href="#会话劫持" class="headerlink" title="会话劫持"></a>会话劫持</h2><h2 id="会话固定攻击"><a href="#会话固定攻击" class="headerlink" title="会话固定攻击"></a>会话固定攻击</h2><h2 id="跨站点请求伪造"><a href="#跨站点请求伪造" class="headerlink" title="跨站点请求伪造"></a>跨站点请求伪造</h2><h1 id="其他安全漏洞"><a href="#其他安全漏洞" class="headerlink" title="其他安全漏洞"></a>其他安全漏洞</h1><h2 id="密码破解"><a href="#密码破解" class="headerlink" title="密码破解"></a>密码破解</h2><h2 id="点击劫持"><a href="#点击劫持" class="headerlink" title="点击劫持"></a>点击劫持</h2><h2 id="DOS攻击"><a href="#DOS攻击" class="headerlink" title="DOS攻击"></a>DOS攻击</h2><h2 id="后门程序"><a href="#后门程序" class="headerlink" title="后门程序"></a>后门程序</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[spring注解]]></title>
      <url>http://thinerzq.com/2016/04/26/spring/spring%E6%B3%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>注解名</th>
<th style="text-align:center">参数</th>
<th style="text-align:center">放置位置</th>
<th style="text-align:center">作用</th>
<th style="text-align:center">近义词 / 来源</th>
</tr>
</thead>
<tbody>
<tr>
<td>@Required</td>
<td style="text-align:center"></td>
<td style="text-align:center">setter方法</td>
<td style="text-align:center">强调这个bean的该属性必须被注入</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>@Autowired</td>
<td style="text-align:center">required</td>
<td style="text-align:center">方法，构造器，属性</td>
<td style="text-align:center">强调该属性ByType自动注入</td>
<td style="text-align:center">@Resource,@Inject</td>
</tr>
<tr>
<td>@Qualifier</td>
<td style="text-align:center"></td>
<td style="text-align:center">属性，构造器参数，方法参数</td>
<td style="text-align:center">和@Autowire配合使用，当ByType冲突时候，使用ByName</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>@Primary</td>
<td style="text-align:center"></td>
<td style="text-align:center">方法，构造器，属性</td>
<td style="text-align:center">当@Autowired ByType冲突的时候，自动选择有该注解的对象</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>@Resource</td>
<td style="text-align:center">name</td>
<td style="text-align:center">setter方法，属性</td>
<td style="text-align:center">同@Autowired</td>
<td style="text-align:center">@Autowired,@Inject</td>
</tr>
<tr>
<td>@PostConstruct</td>
<td style="text-align:center"></td>
<td style="text-align:center">方法</td>
<td style="text-align:center">强调该方法, 会在实例化之后自动调用</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>@PreDestroy</td>
<td style="text-align:center"></td>
<td style="text-align:center">方法</td>
<td style="text-align:center">强调该方法, 会在销毁之前自动调用</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>@Component</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">更加一般会的组件, 不确定该组件作用的时候，使用这个组件</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>@Service</td>
<td style="text-align:center">bane</td>
<td style="text-align:center">类</td>
<td style="text-align:center">表示服务层</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>@Repository</td>
<td style="text-align:center"></td>
<td style="text-align:center">类</td>
<td style="text-align:center">表示数据处理层</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>@ComponentScan</td>
<td style="text-align:center">basePackages, includeFilters, excludeFilters</td>
<td style="text-align:center">类</td>
<td style="text-align:center">自动发现组件</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>@Bean</td>
<td style="text-align:center">name, initMethod, destroyMethod</td>
<td style="text-align:center">特定方法</td>
<td style="text-align:center">生成一个bean定义</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>@Description</td>
<td style="text-align:center"></td>
<td style="text-align:center">方法</td>
<td style="text-align:center">和@Bean一起配合使用，指定bean的描述</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>@Repository</td>
<td style="text-align:center">name</td>
<td style="text-align:center">类</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>@Controller</td>
<td style="text-align:center">name</td>
<td style="text-align:center">类</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>@Scope</td>
<td style="text-align:center">name, proxyMode</td>
<td style="text-align:center">类</td>
<td style="text-align:center">表示bean的scope域</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>@Inject</td>
<td style="text-align:center"></td>
<td style="text-align:center">方法，构造器，属性</td>
<td style="text-align:center">强调该属性ByType自动注入</td>
<td style="text-align:center">@Autowire / JSR-330</td>
</tr>
<tr>
<td>@Named</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">更加一般会的组件, 不确定该组件作用的时候，使用这个组件</td>
<td style="text-align:center">@Component / JSR-330</td>
</tr>
<tr>
<td>@Configuration</td>
<td style="text-align:center"></td>
<td style="text-align:center">类</td>
<td style="text-align:center">和标签很像，最好和@Bean搭配使用，可以解决内部依赖问题</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>@Import</td>
<td style="text-align:center"></td>
<td style="text-align:center">类</td>
<td style="text-align:center">和@Configuration搭配使用</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>@PropertySource</td>
<td style="text-align:center"></td>
<td style="text-align:center">类</td>
<td style="text-align:center">注入属性资源</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h1 id="在web应用程序中启动Spring注解配置"><a href="#在web应用程序中启动Spring注解配置" class="headerlink" title="在web应用程序中启动Spring注解配置"></a>在web应用程序中启动Spring注解配置</h1><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">web‐app</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">!‐‐</span> <span class="attr">Configure</span> <span class="attr">ContextLoaderListener</span> <span class="attr">to</span> <span class="attr">use</span> <span class="attr">AnnotationConfigWebApplicationContext</span></span></div><div class="line"><span class="attr">instead</span> <span class="attr">of</span> <span class="attr">the</span> <span class="attr">default</span> <span class="attr">XmlWebApplicationContext</span> ‐‐&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">context‐param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param‐name</span>&gt;</span>contextClass<span class="tag">&lt;/<span class="name">param‐name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param‐value</span>&gt;</span></div><div class="line">        org.springframework.web.context.support.AnnotationConfigWebApplicationContext</div><div class="line">        <span class="tag">&lt;/<span class="name">param‐value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">context‐param</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">!‐‐</span> <span class="attr">Configuration</span> <span class="attr">locations</span> <span class="attr">must</span> <span class="attr">consist</span> <span class="attr">of</span> <span class="attr">one</span> <span class="attr">or</span> <span class="attr">more</span> <span class="attr">comma</span>‐ <span class="attr">or</span> <span class="attr">space</span>‐<span class="attr">delimited</span></span></div><div class="line"><span class="attr">fully</span>‐<span class="attr">qualified</span> @<span class="attr">Configuration</span> <span class="attr">classes.</span> <span class="attr">Fully</span>‐<span class="attr">qualified</span> <span class="attr">packages</span> <span class="attr">may</span> <span class="attr">also</span> <span class="attr">be</span></div><div class="line"><span class="attr">specified</span> <span class="attr">for</span> <span class="attr">component</span>‐<span class="attr">scanning</span> ‐‐&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">context‐param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param‐name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param‐name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param‐value</span>&gt;</span>com.acme.AppConfig<span class="tag">&lt;/<span class="name">param‐value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">context‐param</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">!‐‐</span> <span class="attr">Bootstrap</span> <span class="attr">the</span> <span class="attr">root</span> <span class="attr">application</span> <span class="attr">context</span> <span class="attr">as</span> <span class="attr">usual</span> <span class="attr">using</span> <span class="attr">ContextLoaderListener</span> ‐‐&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listener‐class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener‐class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">!‐‐</span> <span class="attr">Declare</span> <span class="attr">a</span> <span class="attr">Spring</span> <span class="attr">MVC</span> <span class="attr">DispatcherServlet</span> <span class="attr">as</span> <span class="attr">usual</span> ‐‐&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet‐name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet‐name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet‐class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet‐class</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">!‐‐</span> <span class="attr">Configure</span> <span class="attr">DispatcherServlet</span> <span class="attr">to</span> <span class="attr">use</span> <span class="attr">AnnotationConfigWebApplicationContext</span></span></div><div class="line"><span class="attr">instead</span> <span class="attr">of</span> <span class="attr">the</span> <span class="attr">default</span> <span class="attr">XmlWebApplicationContext</span> ‐‐&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">init‐param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param‐name</span>&gt;</span>contextClass<span class="tag">&lt;/<span class="name">param‐name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param‐value</span>&gt;</span></div><div class="line">        org.springframework.web.context.support.AnnotationConfigWebApplicationContext</div><div class="line">        <span class="tag">&lt;/<span class="name">param‐value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init‐param</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">!‐‐</span> <span class="attr">Again</span>, <span class="attr">config</span> <span class="attr">locations</span> <span class="attr">must</span> <span class="attr">consist</span> <span class="attr">of</span> <span class="attr">one</span> <span class="attr">or</span> <span class="attr">more</span> <span class="attr">comma</span>‐ <span class="attr">or</span> <span class="attr">space</span>‐<span class="attr">delimited</span></span></div><div class="line"><span class="attr">and</span> <span class="attr">fully</span>‐<span class="attr">qualified</span> @<span class="attr">Configuration</span> <span class="attr">classes</span> ‐‐&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">init‐param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param‐name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param‐name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param‐value</span>&gt;</span>com.acme.web.MvcConfig<span class="tag">&lt;/<span class="name">param‐value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init‐param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">!‐‐</span> <span class="attr">map</span> <span class="attr">all</span> <span class="attr">requests</span> <span class="attr">for</span> /<span class="attr">app</span>/* <span class="attr">to</span> <span class="attr">the</span> <span class="attr">dispatcher</span> <span class="attr">servlet</span> ‐‐&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet‐mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet‐name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet‐name</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">url‐pattern</span>&gt;</span>/app/*<span class="tag">&lt;/<span class="name">url‐pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet‐mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web‐app</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NanoHTTPD简易http服务器解读]]></title>
      <url>http://thinerzq.com/2016/04/26/http/NanoHTTPD%E7%AE%80%E6%98%93http%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%A3%E8%AF%BB/</url>
      <content type="html"><![CDATA[<p>前两天学RMI的时候，看java core上说有一个简易的HTTP服务器，只有一个类文件。就像去瞧瞧，结果发现这个类里面有20+个内部类和接口。看了源代码之后，对http服务器的理解也更加深入了。<a href="https://github.com/NanoHttpd/nanohttpd" target="_blank" rel="external">源代码</a></p>
<h1 id="NanoHTTPD-服务器的请求流程图"><a href="#NanoHTTPD-服务器的请求流程图" class="headerlink" title="NanoHTTPD 服务器的请求流程图"></a>NanoHTTPD 服务器的请求流程图</h1><p><img src="/images/NanoHTTPD.jpg" alt="NanoHTTPD服务器请求流程的序列图"></p>
<p><font color="red"> 图上3中不同颜色的箭头，分别代表三种线程。</font>&gt;<br><a id="more"></a></p>
<ol>
<li><p>首先通过继承NanoHTTPD 类，自定义一个服务器启动的main入口，接下来继承NanoHTTPD里面的serve(HttpSession)方法 实现自定义的请求处理。  </p>
</li>
<li><p>服务器启动之后，会简历一个监听线程(ServerRunnable),在这个线程内部监听 ServerScoket的连接。如果有客户端连接，就为每一个连接分配一个线程去处理连接请求。在这个连接线程里面，取得inputstream，和outputstream。  </p>
</li>
<li><p>然后新建HttpSession对象，调用HttpSession对象的execute()方法,  在ClientHandler里面就用循环不断的监听接受到的这个Socket关闭了没有。  </p>
</li>
<li><p>HttpSession对象然后根据inputstream里面的值，读取请求行，请求头，读完之后这两部分之后，就调用自定义的serve()方法调用解析请求body，</p>
</li>
<li><p>解析完body之后就需要返回Response,最后利用response里面的输出流，将返回的数据输出到 当前的Socket连接里面。最后就由浏览器来解析数据了。  </p>
</li>
<li><p>将输出流，socket流，clienthandler线程依次关闭。完成一个处理</p>
</li>
</ol>
<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="NanoHTTPD-start-timeout-deamo-方法"><a href="#NanoHTTPD-start-timeout-deamo-方法" class="headerlink" title="NanoHTTPD.start(timeout,deamo)方法"></a>NanoHTTPD.start(timeout,deamo)方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> timeout, <span class="keyword">boolean</span> daemon)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">       <span class="keyword">this</span>.myServerSocket = <span class="keyword">this</span>.getServerSocketFactory().create();</div><div class="line">       <span class="comment">//  该选项用来决定如果网络上仍然有数据向旧的ServerSocket传输数据，</span></div><div class="line">       <span class="comment">// 是否允许新的ServerSocket绑定到与旧的ServerSocket同样的端口上，</span></div><div class="line">       <span class="comment">// 该选项的默认值与操作系统有关，在某些操作系统中，允许重用端口，而在某些系统中不允许重用端口。</span></div><div class="line"></div><div class="line">       <span class="comment">//当ServerSocket关闭时，如果网络上还有发送到这个serversocket上的数据，</span></div><div class="line">       <span class="comment">// 这个ServerSocket不会立即释放本地端口，而是等待一段时间，确保接收到了网络上发送过来的延迟数据，然后再释放端口</span></div><div class="line"></div><div class="line">       <span class="comment">//值得注意的是，该方法必须在ServerSocket还没有绑定到一个本地端口之前使用，</span></div><div class="line">       <span class="comment">// 否则执行该方法无效。此外，两个公用同一个端口的进程必须都调用serverSocket.setReuseAddress(true)方法，</span></div><div class="line">       <span class="comment">// 才能使得一个进程关闭ServerSocket之后，另一个进程的ServerSocket还能够立刻重用相同的端口</span></div><div class="line">       <span class="keyword">this</span>.myServerSocket.setReuseAddress(<span class="keyword">true</span>);<span class="comment">//绑定端口是否可以重用</span></div><div class="line"></div><div class="line"></div><div class="line">       <span class="comment">//绑定ServerSocket,返回一个可执行的Server线程</span></div><div class="line">       ServerRunnable serverRunnable = createServerRunnable(timeout);</div><div class="line"></div><div class="line">       <span class="comment">//将返回的ServerRunable 绑定到线程上。这个线程就是监听线程</span></div><div class="line">       <span class="keyword">this</span>.myThread = <span class="keyword">new</span> Thread(serverRunnable);</div><div class="line">       <span class="comment">//是否设置设置为守护线程</span></div><div class="line">       <span class="keyword">this</span>.myThread.setDaemon(daemon);</div><div class="line">       <span class="comment">//设置线程名字</span></div><div class="line">       <span class="keyword">this</span>.myThread.setName(<span class="string">"NanoHttpd Main Listener"</span>);</div><div class="line">       <span class="comment">//然后启动监听线程</span></div><div class="line">       <span class="keyword">this</span>.myThread.start();</div><div class="line"></div><div class="line">       <span class="comment">//TODO：main线程就隔一段时间判断监听线程是否出错了，出错了就跑出异常</span></div><div class="line">       <span class="keyword">while</span> (!serverRunnable.hasBinded &amp;&amp; serverRunnable.bindException == <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               Thread.sleep(<span class="number">10L</span>);</div><div class="line">           &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">               <span class="comment">// on android this may not be allowed, that's why we</span></div><div class="line">               <span class="comment">// catch throwable the wait should be very short because we are</span></div><div class="line">               <span class="comment">// just waiting for the bind of the socket</span></div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (serverRunnable.bindException != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">throw</span> serverRunnable.bindException;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="监听线程（ServerRunnable）类"><a href="#监听线程（ServerRunnable）类" class="headerlink" title="监听线程（ServerRunnable）类"></a>监听线程（ServerRunnable）类</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">       <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> timeout;</div><div class="line"></div><div class="line">       <span class="keyword">private</span> IOException bindException;</div><div class="line"></div><div class="line">       <span class="keyword">private</span> <span class="keyword">boolean</span> hasBinded = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">       <span class="function"><span class="keyword">private</span> <span class="title">ServerRunnable</span><span class="params">(<span class="keyword">int</span> timeout)</span> </span>&#123;</div><div class="line">           <span class="keyword">this</span>.timeout = timeout;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               myServerSocket.bind(hostname != <span class="keyword">null</span> ? <span class="keyword">new</span> InetSocketAddress(hostname, myPort) : <span class="keyword">new</span> InetSocketAddress(myPort));</div><div class="line">               hasBinded = <span class="keyword">true</span>;</div><div class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">               <span class="keyword">this</span>.bindException = e;</div><div class="line">               <span class="keyword">return</span>;</div><div class="line">           &#125;</div><div class="line">           do &#123;</div><div class="line">               <span class="keyword">try</span> &#123;</div><div class="line">                   <span class="keyword">final</span> Socket finalAccept = NanoHTTPD.<span class="keyword">this</span>.myServerSocket.accept();</div><div class="line">                   <span class="keyword">if</span> (<span class="keyword">this</span>.timeout &gt; <span class="number">0</span>) &#123;</div><div class="line">                       finalAccept.setSoTimeout(<span class="keyword">this</span>.timeout);<span class="comment">//设置两次连接之间的，</span></div><div class="line">                       <span class="comment">// 如果ServerSocket等待超过这个时间，从accept处返回。</span></div><div class="line">                   &#125;</div><div class="line">                   <span class="keyword">final</span> InputStream inputStream = finalAccept.getInputStream();</div><div class="line">                   <span class="comment">//启动ClientHandler线程</span></div><div class="line">                   NanoHTTPD.<span class="keyword">this</span>.asyncRunner.exec(createClientHandler(finalAccept, inputStream));</div><div class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                   NanoHTTPD.LOG.log(Level.FINE, <span class="string">"Communication with the client broken"</span>, e);</div><div class="line">               &#125;</div><div class="line">           &#125; <span class="keyword">while</span> (!NanoHTTPD.<span class="keyword">this</span>.myServerSocket.isClosed());</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="DefaultAsyncRunner类"><a href="#DefaultAsyncRunner类" class="headerlink" title="DefaultAsyncRunner类"></a>DefaultAsyncRunner类</h2><p>做这个类就是为了提供一个可插拔的策略，可以统计当前的连接数，方便管理连接等<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultAsyncRunner</span> <span class="keyword">implements</span> <span class="title">AsyncRunner</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> requestCount;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ClientHandler&gt; running = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;NanoHTTPD.ClientHandler&gt;());</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@return</span> a list with currently running clients.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;ClientHandler&gt; <span class="title">getRunning</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> running;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeAll</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// copy of the list for concurrency</span></div><div class="line">        <span class="keyword">for</span> (ClientHandler clientHandler : <span class="keyword">new</span> ArrayList&lt;ClientHandler&gt;(<span class="keyword">this</span>.running)) &#123;</div><div class="line">            clientHandler.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//感觉源码里面，没有在这里减去requestCount</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closed</span><span class="params">(ClientHandler clientHandler)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.running.remove(clientHandler);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">(ClientHandler clientHandler)</span> </span>&#123;</div><div class="line">        ++<span class="keyword">this</span>.requestCount;</div><div class="line">        Thread t = <span class="keyword">new</span> Thread(clientHandler);</div><div class="line">        t.setDaemon(<span class="keyword">true</span>);</div><div class="line">        t.setName(<span class="string">"NanoHttpd Request Processor (#"</span> + <span class="keyword">this</span>.requestCount + <span class="string">")"</span>);</div><div class="line">        <span class="keyword">this</span>.running.add(clientHandler);</div><div class="line">        <span class="comment">//这里才是真正的启动客户连接处理线程</span></div><div class="line">        t.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="ClientHandler-线程"><a href="#ClientHandler-线程" class="headerlink" title="ClientHandler 线程"></a>ClientHandler 线程</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 对应着每一个新的客户端连接的线程,线程里面有对应的当前连接的输入流，和取得的Socket连接对象，同时还取得了输出流</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientHandler</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> InputStream inputStream;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Socket acceptSocket;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ClientHandler</span><span class="params">(InputStream inputStream, Socket acceptSocket)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.inputStream = inputStream;</div><div class="line">        <span class="keyword">this</span>.acceptSocket = acceptSocket;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</div><div class="line">        safeClose(<span class="keyword">this</span>.inputStream);</div><div class="line">        safeClose(<span class="keyword">this</span>.acceptSocket);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        OutputStream outputStream = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//得到当前连接的输出流</span></div><div class="line">            outputStream = <span class="keyword">this</span>.acceptSocket.getOutputStream();</div><div class="line">            <span class="comment">//创建临时文件管理器</span></div><div class="line">            TempFileManager tempFileManager = NanoHTTPD.<span class="keyword">this</span>.tempFileManagerFactory.create();</div><div class="line">            <span class="comment">//---------------创建了当前连接对应的  session对象，---------------线程私有的。</span></div><div class="line">            HTTPSession session = <span class="keyword">new</span> HTTPSession(tempFileManager, <span class="keyword">this</span>.inputStream, outputStream, <span class="keyword">this</span>.acceptSocket.getInetAddress());</div><div class="line">            <span class="keyword">while</span> (!<span class="keyword">this</span>.acceptSocket.isClosed()) &#123;</div><div class="line">                <span class="comment">//调用session对象的execute方法，取得请求行，请求头等信息。</span></div><div class="line">                session.execute();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="comment">// When the socket is closed by the client,</span></div><div class="line">            <span class="comment">// we throw our own SocketException</span></div><div class="line">            <span class="comment">// to break the "keep alive" loop above. If</span></div><div class="line">            <span class="comment">// the exception was anything other</span></div><div class="line">            <span class="comment">// than the expected SocketException OR a</span></div><div class="line">            <span class="comment">// SocketTimeoutException, print the</span></div><div class="line">            <span class="comment">// stacktrace</span></div><div class="line">            <span class="keyword">if</span> (!(e <span class="keyword">instanceof</span> SocketException &amp;&amp; <span class="string">"NanoHttpd Shutdown"</span>.equals(e.getMessage())) &amp;&amp; !(e <span class="keyword">instanceof</span> SocketTimeoutException)) &#123;</div><div class="line">                NanoHTTPD.LOG.log(Level.SEVERE, <span class="string">"Communication with the client broken, or an bug in the handler code"</span>, e);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            safeClose(outputStream);</div><div class="line">            safeClose(<span class="keyword">this</span>.inputStream);</div><div class="line">            safeClose(<span class="keyword">this</span>.acceptSocket);</div><div class="line">            NanoHTTPD.<span class="keyword">this</span>.asyncRunner.closed(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="httpsession-execute-方法"><a href="#httpsession-execute-方法" class="headerlink" title="httpsession.execute()方法"></a>httpsession.execute()方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">            Response r = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">// Read the first 8192 bytes. 读取第一个8192字节</span></div><div class="line">                <span class="comment">// The full header should fit in here.</span></div><div class="line">                <span class="comment">// Apache's default header limit is 8KB.</span></div><div class="line">                <span class="comment">// Do NOT assume that a single read will get the entire header</span></div><div class="line">                <span class="comment">// at once!</span></div><div class="line">                <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[HTTPSession.BUFSIZE];</div><div class="line">                <span class="keyword">this</span>.splitbyte = <span class="number">0</span>;</div><div class="line">                <span class="keyword">this</span>.rlen = <span class="number">0</span>;</div><div class="line"></div><div class="line">                <span class="keyword">int</span> read = -<span class="number">1</span>;</div><div class="line">                <span class="keyword">this</span>.inputStream.mark(HTTPSession.BUFSIZE);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="comment">//开始读取输入流里面的数据</span></div><div class="line">                    read = <span class="keyword">this</span>.inputStream.read(buf, <span class="number">0</span>, HTTPSession.BUFSIZE);</div><div class="line">                &#125; <span class="keyword">catch</span> (SSLException e) &#123;</div><div class="line">                    <span class="keyword">throw</span> e;</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    safeClose(<span class="keyword">this</span>.inputStream);</div><div class="line">                    safeClose(<span class="keyword">this</span>.outputStream);</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> SocketException(<span class="string">"NanoHttpd Shutdown"</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//上面的代码没读出来，</span></div><div class="line">                <span class="keyword">if</span> (read == -<span class="number">1</span>) &#123;</div><div class="line">                    <span class="comment">// socket was been closed</span></div><div class="line">                    safeClose(<span class="keyword">this</span>.inputStream);</div><div class="line">                    safeClose(<span class="keyword">this</span>.outputStream);</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> SocketException(<span class="string">"NanoHttpd Shutdown"</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//</span></div><div class="line">                <span class="keyword">while</span> (read &gt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">this</span>.rlen += read;</div><div class="line">                    <span class="keyword">this</span>.splitbyte = findHeaderEnd(buf, <span class="keyword">this</span>.rlen);<span class="comment">//多少个字节开始，出现header和body的分隔</span></div><div class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.splitbyte &gt; <span class="number">0</span>) &#123;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    read = <span class="keyword">this</span>.inputStream.read(buf, <span class="keyword">this</span>.rlen, HTTPSession.BUFSIZE - <span class="keyword">this</span>.rlen);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.splitbyte &lt; <span class="keyword">this</span>.rlen) &#123;</div><div class="line">                    <span class="keyword">this</span>.inputStream.reset();</div><div class="line">                    <span class="keyword">this</span>.inputStream.skip(<span class="keyword">this</span>.splitbyte);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">//设置parms 属性,params就是url中 ？后面跟的东西</span></div><div class="line">                <span class="keyword">this</span>.parms = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">                <span class="comment">//确保header为空</span></div><div class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == <span class="keyword">this</span>.headers) &#123;</div><div class="line">                    <span class="keyword">this</span>.headers = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">this</span>.headers.clear();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// C创建BufferReader解析 Header</span></div><div class="line">                BufferedReader hin = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> ByteArrayInputStream(buf, <span class="number">0</span>, <span class="keyword">this</span>.rlen)));</div><div class="line"></div><div class="line">                <span class="comment">// 解析头部</span></div><div class="line">                Map&lt;String, String&gt; pre = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">                decodeHeader(hin, pre, <span class="keyword">this</span>.parms, <span class="keyword">this</span>.headers);</div><div class="line"></div><div class="line">                <span class="comment">//添加远程主机信息</span></div><div class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != <span class="keyword">this</span>.remoteIp) &#123;</div><div class="line">                    <span class="keyword">this</span>.headers.put(<span class="string">"remote-addr"</span>, <span class="keyword">this</span>.remoteIp);</div><div class="line">                    <span class="keyword">this</span>.headers.put(<span class="string">"http-client-ip"</span>, <span class="keyword">this</span>.remoteIp);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">//方法字符串转化为对象</span></div><div class="line">                <span class="keyword">this</span>.method = Method.lookup(pre.get(<span class="string">"method"</span>));</div><div class="line">                <span class="comment">//请求的方法不能为空</span></div><div class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.method == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ResponseException(Response.Status.BAD_REQUEST, <span class="string">"BAD REQUEST: Syntax error. HTTP verb "</span> + pre.get(<span class="string">"method"</span>) + <span class="string">" unhandled."</span>);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">this</span>.uri = pre.get(<span class="string">"uri"</span>);</div><div class="line">                <span class="comment">//新疆一个Cookies处理器，持有头部信息</span></div><div class="line">                <span class="keyword">this</span>.cookies = <span class="keyword">new</span> CookieHandler(<span class="keyword">this</span>.headers);</div><div class="line"></div><div class="line">                <span class="comment">//判断连接类型，长连接还是短连接</span></div><div class="line">                String connection = <span class="keyword">this</span>.headers.get(<span class="string">"connection"</span>);</div><div class="line">                <span class="keyword">boolean</span> keepAlive = <span class="string">"HTTP/1.1"</span>.equals(protocolVersion) &amp;&amp; (connection == <span class="keyword">null</span> || !connection.matches(<span class="string">"(?i).*close.*"</span>));</div><div class="line"></div><div class="line">                <span class="comment">// Ok, now do the serve()</span></div><div class="line">                <span class="comment">// (requires implementation for totalRead())</span></div><div class="line">                <span class="comment">// 请求行，和请求头都解析出来了，去处理业务逻辑，并且给出返回Response对象</span></div><div class="line">                r = serve(<span class="keyword">this</span>);</div><div class="line">                <span class="comment">// <span class="doctag">TODO:</span> this.inputStream.skip(body_size -</span></div><div class="line">                <span class="comment">// (this.inputStream.totalRead() - pos_before_serve))</span></div><div class="line"></div><div class="line">                <span class="comment">//开始返回Response, 如果返回的响应为空</span></div><div class="line">                <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ResponseException(Response.Status.INTERNAL_ERROR, <span class="string">"SERVER INTERNAL ERROR: Serve() returned a null response."</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">//设置返回的响应内容的编码方式</span></div><div class="line">                    String acceptEncoding = <span class="keyword">this</span>.headers.get(<span class="string">"accept-encoding"</span>);</div><div class="line">                    <span class="keyword">this</span>.cookies.unloadQueue(r);</div><div class="line">                    r.setRequestMethod(<span class="keyword">this</span>.method);</div><div class="line">                    r.setGzipEncoding(useGzipWhenAccepted(r) &amp;&amp; acceptEncoding != <span class="keyword">null</span> &amp;&amp; acceptEncoding.contains(<span class="string">"gzip"</span>));</div><div class="line">                    r.setKeepAlive(keepAlive);</div><div class="line">                    <span class="comment">//之后调用response的发送方法，将数据发送出去了。</span></div><div class="line">                    r.send(<span class="keyword">this</span>.outputStream);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//如果不是长连接</span></div><div class="line">                <span class="keyword">if</span> (!keepAlive || r.isCloseConnection()) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> SocketException(<span class="string">"NanoHttpd Shutdown"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (SocketException e) &#123;</div><div class="line">                <span class="comment">// throw it out to close socket object (finalAccept)</span></div><div class="line">                <span class="keyword">throw</span> e;</div><div class="line">            &#125; <span class="keyword">catch</span> (SocketTimeoutException ste) &#123;</div><div class="line">                <span class="comment">// treat socket timeouts the same way we treat socket exceptions</span></div><div class="line">                <span class="comment">// i.e. close the stream &amp; finalAccept object by throwing the</span></div><div class="line">                <span class="comment">// exception up the call stack.</span></div><div class="line">                <span class="keyword">throw</span> ste;</div><div class="line">            &#125; <span class="keyword">catch</span> (SSLException ssle) &#123;</div><div class="line">                Response resp = newFixedLengthResponse(Response.Status.INTERNAL_ERROR, NanoHTTPD.MIME_PLAINTEXT, <span class="string">"SSL PROTOCOL FAILURE: "</span> + ssle.getMessage());</div><div class="line">                resp.send(<span class="keyword">this</span>.outputStream);</div><div class="line">                safeClose(<span class="keyword">this</span>.outputStream);</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</div><div class="line">                Response resp = newFixedLengthResponse(Response.Status.INTERNAL_ERROR, NanoHTTPD.MIME_PLAINTEXT, <span class="string">"SERVER INTERNAL ERROR: IOException: "</span> + ioe.getMessage());</div><div class="line">                resp.send(<span class="keyword">this</span>.outputStream);</div><div class="line">                safeClose(<span class="keyword">this</span>.outputStream);</div><div class="line">            &#125; <span class="keyword">catch</span> (ResponseException re) &#123;</div><div class="line">                Response resp = newFixedLengthResponse(re.getStatus(), NanoHTTPD.MIME_PLAINTEXT, re.getMessage());</div><div class="line">                resp.send(<span class="keyword">this</span>.outputStream);</div><div class="line">                safeClose(<span class="keyword">this</span>.outputStream);</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                <span class="comment">//最后关闭Response, 清除零时文件管理器</span></div><div class="line">                safeClose(r);</div><div class="line">                <span class="keyword">this</span>.tempFileManager.clear();</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h2 id="serve-httpsession-方法"><a href="#serve-httpsession-方法" class="headerlink" title="serve(httpsession )方法"></a>serve(httpsession )方法</h2><p>参数里面的hettpsession其实已经经过了请求行，和请求头的解析，只需要覆盖server方法里面，在里面解析请求body，处理我们自己的业务逻辑，比如说是post形式表单，那么表单数据在请求body里面,根据表单数据内容，返回响应的response对象，</p>
<h2 id="HelloService重载的serve-方法"><a href="#HelloService重载的serve-方法" class="headerlink" title="HelloService重载的serve()方法"></a>HelloService重载的serve()方法</h2><p>不过这个这个重载的方法没有调用解析请求body的方法，他只是简单的返回一个response对象<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> Response <span class="title">serve</span><span class="params">(IHTTPSession session)</span> </span>&#123;</div><div class="line">       Method method = session.getMethod();</div><div class="line">       String uri = session.getUri();</div><div class="line">       HelloServer.LOG.info(method + <span class="string">" '"</span> + uri + <span class="string">"' "</span>);</div><div class="line"></div><div class="line">       String msg = <span class="string">"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello server&lt;/h1&gt;\n"</span>;</div><div class="line">       Map&lt;String, String&gt; parms = session.getParms();</div><div class="line">       <span class="keyword">if</span> (parms.get(<span class="string">"username"</span>) == <span class="keyword">null</span>) &#123;</div><div class="line">           msg += <span class="string">"&lt;form action='?' method='get'&gt;\n"</span> + <span class="string">"  &lt;p&gt;Your name: &lt;input type='text' name='username'&gt;&lt;/p&gt;\n"</span> + <span class="string">"&lt;/form&gt;\n"</span>;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           msg += <span class="string">"&lt;p&gt;Hello, "</span> + parms.get(<span class="string">"username"</span>) + <span class="string">"!&lt;/p&gt;"</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       msg += <span class="string">"&lt;/body&gt;&lt;/html&gt;\n"</span>;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> newFixedLengthResponse(msg);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h2 id="session-的-parseBody-方法"><a href="#session-的-parseBody-方法" class="headerlink" title="session 的 parseBody()方法"></a>session 的 parseBody()方法</h2><p>把所有请求体里面的内容，解析好，存放在files里面<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parseBody</span><span class="params">(Map&lt;String, String&gt; files)</span> <span class="keyword">throws</span> IOException, ResponseException </span>&#123;</div><div class="line">            RandomAccessFile randomAccessFile = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">long</span> size = getBodySize(); <span class="comment">//返回请求body有多大</span></div><div class="line">                ByteArrayOutputStream baos = <span class="keyword">null</span>;</div><div class="line">                DataOutput requestDataOutput = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">                <span class="comment">// Store the request in memory or a file, depending on size</span></div><div class="line">                <span class="comment">//根据文件大小，决定吧这个请求存在内存中还是文件中</span></div><div class="line">                <span class="keyword">if</span> (size &lt; MEMORY_STORE_LIMIT) &#123;</div><div class="line">                    baos = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">                    requestDataOutput = <span class="keyword">new</span> DataOutputStream(baos);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">//得到一个随机访问的文件</span></div><div class="line">                    randomAccessFile = getTmpBucket();</div><div class="line">                    requestDataOutput = randomAccessFile;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// Read all the body and write it to request_data_output</span></div><div class="line">                <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[REQUEST_BUFFER_LEN];</div><div class="line">                <span class="keyword">while</span> (<span class="keyword">this</span>.rlen &gt;= <span class="number">0</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">this</span>.rlen = <span class="keyword">this</span>.inputStream.read(buf, <span class="number">0</span>, (<span class="keyword">int</span>) Math.min(size, REQUEST_BUFFER_LEN));</div><div class="line">                    size -= <span class="keyword">this</span>.rlen;</div><div class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.rlen &gt; <span class="number">0</span>) &#123;</div><div class="line">                        requestDataOutput.write(buf, <span class="number">0</span>, <span class="keyword">this</span>.rlen);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                ByteBuffer fbuf = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">if</span> (baos != <span class="keyword">null</span>) &#123;</div><div class="line">                    fbuf = ByteBuffer.wrap(baos.toByteArray(), <span class="number">0</span>, baos.size());</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    fbuf = randomAccessFile.getChannel().map(FileChannel.MapMode.READ_ONLY, <span class="number">0</span>, randomAccessFile.length());</div><div class="line">                    randomAccessFile.seek(<span class="number">0</span>);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// If the method is POST, there may be parameters</span></div><div class="line">                <span class="comment">// in data section, too, read it:</span></div><div class="line">                <span class="keyword">if</span> (Method.POST.equals(<span class="keyword">this</span>.method)) &#123;</div><div class="line">                    ContentType contentType = <span class="keyword">new</span> ContentType(<span class="keyword">this</span>.headers.get(<span class="string">"content-type"</span>));</div><div class="line">                    <span class="keyword">if</span> (contentType.isMultipart()) &#123;</div><div class="line">                        String boundary = contentType.getBoundary();</div><div class="line">                        <span class="keyword">if</span> (boundary == <span class="keyword">null</span>) &#123;</div><div class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> ResponseException(Response.Status.BAD_REQUEST,</div><div class="line">                                    <span class="string">"BAD REQUEST: Content type is multipart/form-data but boundary missing. Usage: GET /example/file.html"</span>);</div><div class="line">                        &#125;</div><div class="line">                        decodeMultipartFormData(contentType, fbuf, <span class="keyword">this</span>.parms, files);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">byte</span>[] postBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[fbuf.remaining()];</div><div class="line">                        fbuf.get(postBytes);</div><div class="line">                        String postLine = <span class="keyword">new</span> String(postBytes, contentType.getEncoding()).trim();</div><div class="line">                        <span class="comment">// Handle application/x-www-form-urlencoded</span></div><div class="line">                        <span class="keyword">if</span> (<span class="string">"application/x-www-form-urlencoded"</span>.equalsIgnoreCase(contentType.getContentType())) &#123;</div><div class="line">                            decodeParms(postLine, <span class="keyword">this</span>.parms);</div><div class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (postLine.length() != <span class="number">0</span>) &#123;</div><div class="line">                            <span class="comment">// Special case for raw POST data =&gt; create a</span></div><div class="line">                            <span class="comment">// special files entry "postData" with raw content</span></div><div class="line">                            <span class="comment">// data</span></div><div class="line">                            files.put(<span class="string">"postData"</span>, postLine);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Method.PUT.equals(<span class="keyword">this</span>.method)) &#123;</div><div class="line">                    files.put(<span class="string">"content"</span>, saveTmpFile(fbuf, <span class="number">0</span>, fbuf.limit(), <span class="keyword">null</span>));</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                safeClose(randomAccessFile);</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<h2 id="返回的response-对象的send-方法"><a href="#返回的response-对象的send-方法" class="headerlink" title="返回的response 对象的send()方法"></a>返回的response 对象的send()方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">        * 发送给定的响应到Socket</div><div class="line">        */</div><div class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(OutputStream outputStream)</span> </span>&#123;</div><div class="line">           SimpleDateFormat gmtFrmt = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"E, d MMM yyyy HH:mm:ss 'GMT'"</span>, Locale.US);</div><div class="line">           gmtFrmt.setTimeZone(TimeZone.getTimeZone(<span class="string">"GMT"</span>));</div><div class="line"></div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               <span class="keyword">if</span> (<span class="keyword">this</span>.status == <span class="keyword">null</span>) &#123;</div><div class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"sendResponse(): Status can't be null."</span>);</div><div class="line">               &#125;</div><div class="line">               PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(outputStream, <span class="keyword">new</span> ContentType(<span class="keyword">this</span>.mimeType).getEncoding())), <span class="keyword">false</span>);</div><div class="line">               pw.append(<span class="string">"HTTP/1.1 "</span>).append(<span class="keyword">this</span>.status.getDescription()).append(<span class="string">" \r\n"</span>);</div><div class="line">               <span class="keyword">if</span> (<span class="keyword">this</span>.mimeType != <span class="keyword">null</span>) &#123;</div><div class="line">                   printHeader(pw, <span class="string">"Content-Type"</span>, <span class="keyword">this</span>.mimeType);</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">if</span> (getHeader(<span class="string">"date"</span>) == <span class="keyword">null</span>) &#123;</div><div class="line">                   printHeader(pw, <span class="string">"Date"</span>, gmtFrmt.format(<span class="keyword">new</span> Date()));</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : <span class="keyword">this</span>.header.entrySet()) &#123;</div><div class="line">                   printHeader(pw, entry.getKey(), entry.getValue());</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">if</span> (getHeader(<span class="string">"connection"</span>) == <span class="keyword">null</span>) &#123;</div><div class="line">                   printHeader(pw, <span class="string">"Connection"</span>, (<span class="keyword">this</span>.keepAlive ? <span class="string">"keep-alive"</span> : <span class="string">"close"</span>));</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">if</span> (getHeader(<span class="string">"content-length"</span>) != <span class="keyword">null</span>) &#123;</div><div class="line">                   encodeAsGzip = <span class="keyword">false</span>;</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">if</span> (encodeAsGzip) &#123;</div><div class="line">                   printHeader(pw, <span class="string">"Content-Encoding"</span>, <span class="string">"gzip"</span>);</div><div class="line">                   setChunkedTransfer(<span class="keyword">true</span>);</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">long</span> pending = <span class="keyword">this</span>.data != <span class="keyword">null</span> ? <span class="keyword">this</span>.contentLength : <span class="number">0</span>;</div><div class="line">               <span class="keyword">if</span> (<span class="keyword">this</span>.requestMethod != Method.HEAD &amp;&amp; <span class="keyword">this</span>.chunkedTransfer) &#123;</div><div class="line">                   printHeader(pw, <span class="string">"Transfer-Encoding"</span>, <span class="string">"chunked"</span>);</div><div class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!encodeAsGzip) &#123;</div><div class="line">                   pending = sendContentLengthHeaderIfNotAlreadyPresent(pw, pending);</div><div class="line">               &#125;</div><div class="line">               pw.append(<span class="string">"\r\n"</span>);</div><div class="line">               <span class="comment">//像样子是想输出响应行和响应头，再输出响应body,//发送响应body</span></div><div class="line">               pw.flush();</div><div class="line">               sendBodyWithCorrectTransferAndEncoding(outputStream, pending);</div><div class="line">               outputStream.flush();</div><div class="line">               <span class="comment">//客户端已经显示了传输的数据了</span></div><div class="line">               safeClose(<span class="keyword">this</span>.data);</div><div class="line">           &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</div><div class="line">               NanoHTTPD.LOG.log(Level.SEVERE, <span class="string">"Could not send response to the client"</span>, ioe);</div><div class="line">           &#125;</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<p>接下来就是关闭流，关闭socket，关闭线程的工作了。</p>
<p>现在看的还比较浅显，至于里面在解析请求头，请求行，请求体的时候的注意事项，编码方式，chunkedTransfer传输都了解的不深，接下来好好看一下。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring in my mind]]></title>
      <url>http://thinerzq.com/2016/04/24/spring/Spring-in-my-mind/</url>
      <content type="html"><![CDATA[<p>Spring最为最强大的java 企业级开发框架，大约3年前有接触过，但是学的不深，读研的日子没有多少时间去学习这个框架，现在找实习就要用并且之前的学的是Spring 3的内容，现在都Spring 4, Servlt 3.0了变化好大，有必要重新系统的学习一边，从看官方文档开始。<a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/" target="_blank" rel="external">spring framework</a></p>
<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><h2 id="Spring的核心容器"><a href="#Spring的核心容器" class="headerlink" title="Spring的核心容器"></a>Spring的核心容器</h2><p>Spring的核心模块包括：<code>spring‐core</code> , <code>spring‐beans</code> , <code>spring‐context</code> , <code>spring‐context‐support</code> , and<br><code>spring‐expression</code> modules.</p>
<p><code>spring‐core</code>，<code>spring‐beans</code> ：Beans和Core提供了最基本的DI功能  </p>
<p><code>spring‐context</code>: Context提供了在应用程序中访问对象的方式，并且在Beans和Core的基础上提供了，国际化，事件传播，资源加载的功能,同时也支持EJB,JMX等JavaEE特征，其中最重要的<code>ApplicationContext</code>&gt;接口  </p>
<p><code>spring‐context‐support</code>：提供了整合第三方类库到Spring Context中，例如：(EhCache, Guava, JCache), 邮件 (JavaMail), 调度 (CommonJ, Quartz)，和模板引擎(FreeMarker, JasperReports, Velocity).  </p>
<p><code>spring‐expression</code>：spring的表达式语言，扩展自 JSP规范里面的EL表达式，提供了在运行时查询或者访问对象属性值的功能，同时还支持投影，选择和聚合功能</p>
<a id="more"></a>
<h2 id="AOP模块"><a href="#AOP模块" class="headerlink" title="AOP模块"></a>AOP模块</h2><p><code>spring-aop</code>&gt;: 提供了面向切面编程的功能，实现了功能的解耦<br><code>spring‐aspects</code>: 提供了和AspectJ整合的功能</p>
<h2 id="Messaging模块"><a href="#Messaging模块" class="headerlink" title="Messaging模块"></a>Messaging模块</h2><p><code>spring-messaging</code> 模块为集成messaging api和消息协议提供支持。</p>
<h2 id="Data-Access-Integration模块"><a href="#Data-Access-Integration模块" class="headerlink" title="Data Access/Integration模块"></a>Data Access/Integration模块</h2><p><code>spring‐jdbc</code>: 提供了JDBC的抽象<br><code>spring‐tx</code>: 提供了声明式的实物管理<br><code>spring‐orm</code>: 提供了和其他ORM框架的整合能力，例如：including JPA, JDO, and Hibernate<br><code>pring‐oxm</code>: provides an abstraction layer that supports Object/XML mapping implementations such as JAXB, Castor, 没了解过<br>XMLBeans, JiBX and XStream. （不是很了解）<br><code>spring‐jms</code>: 提供了产生和消费的功能，从spring 4.1以后，这个模块逐渐和<code>spring-messaging</code>模块进行整合了。</p>
<h2 id="Web-部分"><a href="#Web-部分" class="headerlink" title="Web 部分"></a>Web 部分</h2><p><code>spring‐web</code>&gt;: 提供了基础的web相关的整合，例如文件上传，使用面向web应用程序的监听器去初始化IOC容器等。<br><code>spring‐webmvc</code>&gt;： 包含了Web MVC模式和REST web service的实现<br><code>spring‐webmvc-portlet</code>&gt;：提供了在Portlet环境下的Web mvc模式的实现  </p>
<h2 id="Test-部分"><a href="#Test-部分" class="headerlink" title="Test 部分"></a>Test 部分</h2><p><code>spring-test</code>: 支持Junit和TestNG的单元测试和整合测试，他提供了加载Spring应用程序上下文和cache的功能，同时还提供了Mock 对象的功能。  </p>
<h2 id="Spring-框架Artifacts"><a href="#Spring-框架Artifacts" class="headerlink" title="Spring 框架Artifacts"></a>Spring 框架Artifacts</h2><table>
<thead>
<tr>
<th>Group id</th>
<th style="text-align:center">Artifact id</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>org.springframework</td>
<td style="text-align:center">spring-aop</td>
<td style="text-align:center">Proxybased AOP support</td>
</tr>
<tr>
<td>org.springframework</td>
<td style="text-align:center">spring-aspects</td>
<td style="text-align:center">AspectJ based aspects</td>
</tr>
<tr>
<td>org.springframework</td>
<td style="text-align:center">spring-beans</td>
<td style="text-align:center">Beans support, including Groovy</td>
</tr>
<tr>
<td>org.springframework</td>
<td style="text-align:center">spring-context</td>
<td style="text-align:center">Application context runtime, including scheduling and remoting abstractions</td>
</tr>
<tr>
<td>org.springframework</td>
<td style="text-align:center">spring-context-support</td>
<td style="text-align:center">Support classes for integrating common thirdparty libraries into a Spring application context</td>
</tr>
<tr>
<td>org.springframework</td>
<td style="text-align:center">spring-core</td>
<td style="text-align:center">Core utilities, used by many other Spring modules</td>
</tr>
<tr>
<td>org.springframework</td>
<td style="text-align:center">spring-expression</td>
<td style="text-align:center">Spring Expression Language (SpEL)</td>
</tr>
<tr>
<td>org.springframework</td>
<td style="text-align:center">spring-instrument</td>
<td style="text-align:center">Instrumentation agent for JVM bootstrapping</td>
</tr>
<tr>
<td>org.springframework</td>
<td style="text-align:center">spring-instrument-tomcat</td>
<td style="text-align:center">Instrumentation agent for Tomcat</td>
</tr>
<tr>
<td>org.springframework</td>
<td style="text-align:center">spring-jdbc</td>
<td style="text-align:center">JDBC support package, including DataSource setup and JDBC access support</td>
</tr>
<tr>
<td>org.springframework</td>
<td style="text-align:center">spring-jms</td>
<td style="text-align:center">JMS support package, including helper classes to send and receive JMS messages</td>
</tr>
<tr>
<td>org.springframework</td>
<td style="text-align:center">spring-messaging</td>
<td style="text-align:center">Support for messaging architectures and protocols</td>
</tr>
<tr>
<td>org.springframework</td>
<td style="text-align:center">spring-orm</td>
<td style="text-align:center">Object/Relational Mapping, including JPA and Hibernate support</td>
</tr>
<tr>
<td>org.springframework</td>
<td style="text-align:center">spring-oxm</td>
<td style="text-align:center">Object/XML Mapping</td>
</tr>
<tr>
<td>org.springframework</td>
<td style="text-align:center">spring-test</td>
<td style="text-align:center">Support for unit testing and integration testing Spring components</td>
</tr>
<tr>
<td>org.springframework</td>
<td style="text-align:center">spring-tx</td>
<td style="text-align:center">Transaction infrastructure, including DAO support and JCA integration</td>
</tr>
<tr>
<td>org.springframework</td>
<td style="text-align:center">spring-web</td>
<td style="text-align:center">Web support packages, including client and web remoting</td>
</tr>
<tr>
<td>org.springframework</td>
<td style="text-align:center">spring-webmvc</td>
<td style="text-align:center">REST Web Services and modelviewcontroller</td>
</tr>
</tbody>
</table>
<p>implementation for web applications|<br>|org.springframework |spring-webmvc-portlet|MVC implementation to be used in a Portlet environment|<br>|org.springframework |spring-websocket|WebSocket and SockJS implementations, including STOMP support|</p>
<h2 id="使用Maven管理依赖"><a href="#使用Maven管理依赖" class="headerlink" title="使用Maven管理依赖"></a>使用Maven管理依赖</h2><h3 id="Spring远程仓库"><a href="#Spring远程仓库" class="headerlink" title="Spring远程仓库"></a>Spring远程仓库</h3><p>for release<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>io.spring.repo.maven.release<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo.spring.io/release/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>for milestones<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>io.spring.repo.maven.milestone<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo.spring.io/milestone/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>for snapshot<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>io.spring.repo.maven.snapshot<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo.spring.io/snapshot/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="BOM-依赖"><a href="#BOM-依赖" class="headerlink" title="BOM 依赖"></a>BOM 依赖</h3><p>使用这个依赖可以不用指定spring模块的版本号<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐framework‐bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="如何选择Spring中的日志框架"><a href="#如何选择Spring中的日志框架" class="headerlink" title="如何选择Spring中的日志框架"></a>如何选择Spring中的日志框架</h2><p>首先Spring里面默认使用了 <code>commons-logging</code>作为内部的日志框架。</p>
<h3 id="1、commons-logging-log4j-搭配"><a href="#1、commons-logging-log4j-搭配" class="headerlink" title="1、commons-logging  + log4j 搭配"></a>1、commons-logging  + log4j 搭配</h3><p>依赖配置如下<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>commons-logging 会自动发现类路径下的log4j类库和log4j.propertites文件，使用log4j来记录日志</p>
<h3 id="2、不使用commons-logging-，改为-SLF4J-log4j记录日志"><a href="#2、不使用commons-logging-，改为-SLF4J-log4j记录日志" class="headerlink" title="2、不使用commons-logging ，改为 SLF4J +log4j记录日志"></a>2、不使用commons-logging ，改为 SLF4J +log4j记录日志</h3><p>依赖配置如下<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons‐logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons‐logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl‐over‐slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j‐api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j‐log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>首先将在<code>Spring-core</code>包里面使用的commons-logging 框架去掉，然后加上slf4j和 log4j的包，spring会自动调用slf4j的接口，由slf4j区发现真正的日志实现框架log4j。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java8 HashMap详解]]></title>
      <url>http://thinerzq.com/2016/04/22/java/java8-HashMap%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>HashMap的原理：<br>HashMap基于Hash算法，通过put(key,value)存储，get(key)来获取。当传入key时，HashMap会根据hash(K key)计算出hash值，根据hash值将value保存在数组里。  </p>
<p>当计算出的hash值相同时使用链表或者红黑树来解决Hash冲突，HashMap的做法是用链表和红黑树存储相同hash值的value。当Hash冲突的个数比较少时，使用链表，否则使用红黑树。这样做的好处是，最坏的情况下即所有的key都Hash冲突，采用链表的话查找时间为O(n),而采用红黑树为O(lgn)。  </p>
<p>java里面还有一些方法定义了没有实现，不知道会不会在1.9里面加入一些新功能</p>
<a id="more"></a>
<h1 id="HashMap的构造"><a href="#HashMap的构造" class="headerlink" title="HashMap的构造"></a>HashMap的构造</h1><h2 id="内部的变量"><a href="#内部的变量" class="headerlink" title="内部的变量"></a>内部的变量</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">//初始化容量</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></div><div class="line"><span class="comment">//最大容量</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</div><div class="line"><span class="comment">//装载因子，扩容条件：size &gt;= 装载因子*容量的</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</div><div class="line"><span class="comment">//一个Node节点的数组，</span></div><div class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</div><div class="line"><span class="comment">//一个所有建值对的集合</span></div><div class="line"><span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</div><div class="line"><span class="comment">//当前大小</span></div><div class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</div><div class="line"><span class="comment">//被修改的次数</span></div><div class="line"><span class="keyword">transient</span> <span class="keyword">int</span> modCount;</div><div class="line"></div><div class="line"><span class="comment">//需要扩容是，扩容到threshold值</span></div><div class="line"><span class="keyword">int</span> threshold;</div><div class="line"></div><div class="line"><span class="comment">//扩容因子</span></div><div class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</div><div class="line"><span class="comment">//当某一个index冲突因子达到这个值得时候，改为红黑树来存储冲突的节点</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</div></pre></td></tr></table></figure>
<h2 id="三个构造方法"><a href="#三个构造方法" class="headerlink" title="三个构造方法"></a>三个构造方法</h2><pre><code><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span></span></div><div class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</div><div class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);<span class="comment">//得到的threshold (是一个2的整数次幂-1) &gt;=initialCapacity</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><h1 id="HashMap-的存储实现"><a href="#HashMap-的存储实现" class="headerlink" title="HashMap 的存储实现"></a>HashMap 的存储实现</h1><h2 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h2><p><img src="/images/HashMap.jpg" alt="hashMap原理图存储"></p>
<h2 id="hash算法"><a href="#hash算法" class="headerlink" title="hash算法"></a>hash算法</h2><p>计算存储到哪一个table下标处<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> h;</div><div class="line">       <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);<span class="comment">//为什么这么做，不是很了解//<span class="doctag">TODO:</span></span></div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h2 id="Node节点"><a href="#Node节点" class="headerlink" title="Node节点"></a>Node节点</h2><p>链表节点，存储键值对，并含有一个next引用。<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</div><div class="line">        <span class="keyword">final</span> K key;</div><div class="line">        V value;</div><div class="line">        Node&lt;K,V&gt; next;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="红黑树节点"><a href="#红黑树节点" class="headerlink" title="红黑树节点"></a>红黑树节点</h2><p>红黑树节点的接口定义来自于LinkedHashMap<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">       TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></div><div class="line">       TreeNode&lt;K,V&gt; left;</div><div class="line">       TreeNode&lt;K,V&gt; right;</div><div class="line">       TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></div><div class="line">       <span class="keyword">boolean</span> red;</div><div class="line">       TreeNode(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</div><div class="line">           <span class="keyword">super</span>(hash, key, val, next);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h2 id="put方法实现"><a href="#put方法实现" class="headerlink" title="put方法实现"></a>put方法实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">//我们能够调用的put方法</span></div><div class="line"> <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 内部自己调用的put方法，</div><div class="line">  *</div><div class="line">  * <span class="doctag">@param</span> hash hash值</div><div class="line">  * <span class="doctag">@param</span> key key值</div><div class="line">  * <span class="doctag">@param</span> value value值</div><div class="line">  * <span class="doctag">@param</span> onlyIfAbsent 如果是true，就不要改变原来已经有的值</div><div class="line">  * <span class="doctag">@param</span> evict 如果是false，标示table处于creation mode.TODO</div><div class="line">  * <span class="doctag">@return</span> 返回原来的值</div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></div><div class="line">                <span class="keyword">boolean</span> evict) &#123;</div><div class="line">     Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</div><div class="line">     <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</div><div class="line">         n = (tab = resize()).length;<span class="comment">//先判断了table是否没初始化，或者长度为0</span></div><div class="line">     <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</div><div class="line">         tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);<span class="comment">//判断hash是否冲突，不冲突直接放下。冲突就else</span></div><div class="line">     <span class="keyword">else</span> &#123;</div><div class="line">         Node&lt;K,V&gt; e; K k;</div><div class="line">         <span class="keyword">if</span> (p.hash == hash &amp;&amp;</div><div class="line">             ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">             e = p;<span class="comment">//判断是不是要覆盖当前key</span></div><div class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)<span class="comment">//判断是不是采用红黑树存储的，TreeNode和Node之间是一种继承关系，HashMap.Node --&gt;LinkedHashMap.Entry--&gt;HashMap.TreeNode.</span></div><div class="line">             e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);<span class="comment">//插入值</span></div><div class="line">         <span class="keyword">else</span> &#123;</div><div class="line">             <span class="comment">//不是用红黑树存储的，就遍历当前的链表查找插入位置或者覆盖已经存在的Key</span></div><div class="line">             <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</div><div class="line">                 <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</div><div class="line">                     p.next = newNode(hash, key, value, <span class="keyword">null</span>);<span class="comment">//插入新节点</span></div><div class="line">                     <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></div><div class="line">                         treeifyBin(tab, hash);<span class="comment">//冲突的个数特别高的时候，改为红黑树存储节点</span></div><div class="line">                     <span class="keyword">break</span>;</div><div class="line">                 &#125;</div><div class="line">                 <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                     ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">                     <span class="keyword">break</span>;</div><div class="line">                 p = e;</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// 不是插入新节点，而是替换原来已经存在的值。</span></div><div class="line">             V oldValue = e.value;</div><div class="line">             <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</div><div class="line">                 e.value = value;</div><div class="line">             afterNodeAccess(e);</div><div class="line">             <span class="keyword">return</span> oldValue;</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line">     ++modCount;</div><div class="line">     <span class="comment">//判断是否是扩容</span></div><div class="line">     <span class="keyword">if</span> (++size &gt; threshold)</div><div class="line">         resize();</div><div class="line">         <span class="comment">//目前这个方法还是空方法，应该会在1.9里面实现一些新功能</span></div><div class="line">     afterNodeInsertion(evict);</div><div class="line">     <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h2 id="get-方法实现"><a href="#get-方法实现" class="headerlink" title="get 方法实现"></a>get 方法实现</h2><p>get方法比较简单，主要看如果是采用红黑树存储冲突的节点值的时候，怎么查找，这里有很多疑惑，在循环中多次判断hash值得大小，不应该是冲突的元素中的hash值都是一样的码，欢迎一起交流。<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">        * Finds the node starting at root p with the given hash and key.</div><div class="line">        * The kc argument caches comparableClassFor(key) upon first use</div><div class="line">        * comparing keys.</div><div class="line">        */</div><div class="line">       <span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k, Class&lt;?&gt; kc)</span> </span>&#123;</div><div class="line">           TreeNode&lt;K,V&gt; p = <span class="keyword">this</span>;</div><div class="line">           do &#123;</div><div class="line">               <span class="keyword">int</span> ph, dir; K pk;</div><div class="line">               TreeNode&lt;K,V&gt; pl = p.left, pr = p.right, q;</div><div class="line">               <span class="keyword">if</span> ((ph = p.hash) &gt; h)<span class="comment">// 为什么要判断hash值。</span></div><div class="line">                   p = pl;</div><div class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</div><div class="line">                   p = pr;</div><div class="line">               <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (k != <span class="keyword">null</span> &amp;&amp; k.equals(pk)))</div><div class="line">                   <span class="keyword">return</span> p;<span class="comment">//找到了</span></div><div class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (pl == <span class="keyword">null</span>)</div><div class="line">                   p = pr;</div><div class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (pr == <span class="keyword">null</span>)</div><div class="line">                   p = pl;</div><div class="line">               <span class="keyword">else</span> <span class="keyword">if</span> ((kc != <span class="keyword">null</span> ||</div><div class="line">                         (kc = comparableClassFor(k)) != <span class="keyword">null</span>) &amp;&amp;</div><div class="line">                        (dir = compareComparables(kc, k, pk)) != <span class="number">0</span>)</div><div class="line">                   p = (dir &lt; <span class="number">0</span>) ? pl : pr;</div><div class="line">               <span class="keyword">else</span> <span class="keyword">if</span> ((q = pr.find(h, k, kc)) != <span class="keyword">null</span>)</div><div class="line">                   <span class="keyword">return</span> q;</div><div class="line">               <span class="keyword">else</span></div><div class="line">                   p = pl;</div><div class="line">           &#125; <span class="keyword">while</span> (p != <span class="keyword">null</span>);</div><div class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">       &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java8 ArrayList详解]]></title>
      <url>http://thinerzq.com/2016/04/20/java/java8-ArrayList%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>以前一直听说ArrayList底层通过数组实现，没有去阅读过源代码，为了知其然也知其所以然，开始啃源代码，ArrayList的源代码其实蛮简单的，容易理解，</p>
<p> ArrayList是按照插入顺序放入其内部的ElementData数组中的，元素也是可以重复放入 ，他的查询操作是直接通过数组下标的形式实现，效率高，但是删除和插入操作效率较低，需要大量移动元素。并且不是线程安全的,因为add,remove的操作都不是在原子步内进行的，单一个线程改变了size值后不会马上对另外一个线程感知。<br> 使用ArrayList的注意事项：</p>
<blockquote>
<p>默认数组大小10，每次扩容1.5倍<br>subList()方法返回的是一个虚拟的List视图，所有的add,remove操作都是在原来集合上，<br>clone()是浅拷贝<br>toArray()是深拷贝<br>循环遍历过程中如果要删除元素，请使用Iterator迭代器的remove()方法删除元素。<br>1.8新增了forEach()方法和Spliterator，可以接受lambda表达式</p>
</blockquote>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> java.util;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.function.Consumer;</div><div class="line"><span class="keyword">import</span> java.util.function.Predicate;<span class="comment">//函数式编程东东</span></div><div class="line"><span class="keyword">import</span> java.util.function.UnaryOperator;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189L</span>;</div><div class="line">    <span class="comment">//默认容量</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</div><div class="line">    <span class="comment">//默认元素数组</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</div><div class="line">    <span class="comment">//也是默认的，但是似乎没什么用</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</div><div class="line">    <span class="comment">//存放元素的数组</span></div><div class="line">    <span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access，语法有点高深，不是很明白</span></div><div class="line"></div><div class="line">    <span class="comment">//实际存放了多少元素</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</div><div class="line"></div><div class="line">    <span class="comment">//指定了初始化容量，新创建一个对象数组</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</div><div class="line">                                               initialCapacity);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//没有指定初始容量，默认的初始容量是10</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">     <span class="comment">//以参数的迭代器返回元素的顺序加入到element数组中。</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">        elementData = c.toArray();</div><div class="line">        <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></div><div class="line">            <span class="keyword">if</span> (elementData.getClass() != Object[].class)</div><div class="line">                elementData = Arrays.copyOf(elementData, size, Object[].class);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// replace with empty array.</span></div><div class="line">            <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//将集合的容量调整为已经存在多少元素的大小，感觉应该是等集合稳定了，提高内存利用率在调用。</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>&#123;</div><div class="line">        modCount++; <span class="comment">//这个变量是用来Iterator迭代的时候判断集合有没有再被更改过的。表示的意思是这个集合被修改（添加，删除，更新）等的次数</span></div><div class="line">        <span class="keyword">if</span> (size &lt; elementData.length) &#123;</div><div class="line">            elementData = (size == <span class="number">0</span>)</div><div class="line">              ? EMPTY_ELEMENTDATA</div><div class="line">              : Arrays.copyOf(elementData, size);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">     <span class="comment">//确保集合能够保存 minCapacity这么多的元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</div><div class="line">            <span class="comment">// any size if not default element table</span></div><div class="line">            ? <span class="number">0</span></div><div class="line">            <span class="comment">// larger than default for default empty table. It's already</span></div><div class="line">            <span class="comment">// supposed to be at default size.</span></div><div class="line">            : DEFAULT_CAPACITY;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (minCapacity &gt; minExpand) &#123;</div><div class="line">            ensureExplicitCapacity(minCapacity);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    	<span class="comment">//第一次添加元素的时候，minCapacity=10;</span></div><div class="line">        <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</div><div class="line">            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ensureExplicitCapacity(minCapacity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">        modCount++;<span class="comment">//记录修改过了</span></div><div class="line"></div><div class="line">        <span class="comment">// 将要添加的元素，没有地方了，去扩容</span></div><div class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</div><div class="line">            grow(minCapacity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//能够分配的最大容量，应该ElementData数组对象头需要占用了其他的64个字节。</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</div><div class="line"></div><div class="line">   	<span class="comment">//一些简答你的扩容规则</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">        <span class="comment">// overflow-conscious code</span></div><div class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</div><div class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>); <span class="comment">//每次扩容当前容量的0.5倍</span></div><div class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</div><div class="line">            newCapacity = minCapacity;</div><div class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</div><div class="line">            newCapacity = hugeCapacity(minCapacity);</div><div class="line">        <span class="comment">// minCapacity is usually close to size, so this is a win:</span></div><div class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</div><div class="line">        <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</div><div class="line">            Integer.MAX_VALUE :</div><div class="line">            MAX_ARRAY_SIZE;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//大小</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   	<span class="comment">//为不为空</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//null 元素也要去查找有没有包含null元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//看名字</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</div><div class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</div><div class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   	<span class="comment">//一份浅拷贝</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) <span class="keyword">super</span>.clone();</div><div class="line">            v.elementData = Arrays.copyOf(elementData, size);</div><div class="line">            v.modCount = <span class="number">0</span>;</div><div class="line">            <span class="keyword">return</span> v;</div><div class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</div><div class="line">            <span class="comment">// this shouldn't happen, since we are Cloneable</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">     <span class="comment">//返回一个新的数组，深拷贝，可以看成是数组和集合API的桥梁</span></div><div class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</div><div class="line">        <span class="keyword">return</span> Arrays.copyOf(elementData, size);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   <span class="comment">//返回一个指定类型新的数组，深拷贝，</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</div><div class="line">        <span class="keyword">if</span> (a.length &lt; size)</div><div class="line">            <span class="comment">// Make a new array of a's runtime type, but my contents:</span></div><div class="line">            <span class="keyword">return</span> (T[]) Arrays.copyOf(elementData, size, a.getClass());</div><div class="line">        System.arraycopy(elementData, <span class="number">0</span>, a, <span class="number">0</span>, size);</div><div class="line">        <span class="keyword">if</span> (a.length &gt; size)</div><div class="line">            a[size] = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Positional Access Operations</span></div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="function">E <span class="title">elementData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (E) elementData[index];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        rangeCheck(index);<span class="comment">//确保不会越界</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> elementData(index);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">        rangeCheck(index);</div><div class="line"></div><div class="line">        E oldValue = elementData(index);</div><div class="line">        elementData[index] = element;</div><div class="line">        <span class="keyword">return</span> oldValue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></div><div class="line">        elementData[size++] = e;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">        rangeCheckForAdd(index);</div><div class="line"></div><div class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></div><div class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</div><div class="line">                         size - index);</div><div class="line">        elementData[index] = element;</div><div class="line">        size++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        rangeCheck(index);</div><div class="line"></div><div class="line">        modCount++;</div><div class="line">        E oldValue = elementData(index);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</div><div class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</div><div class="line">                             numMoved);</div><div class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> oldValue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</div><div class="line">                <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</div><div class="line">                    fastRemove(index); <span class="comment">//调用私有的方法</span></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</div><div class="line">                <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</div><div class="line">                    fastRemove(index); <span class="comment">//调用私有的方法</span></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//忽略了边界检查，快速溢出，</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</div><div class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</div><div class="line">                             numMoved);</div><div class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line"></div><div class="line">        <span class="comment">// clear to let GC do its work</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">            elementData[i] = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        size = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">//在末尾添加所有元素   </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">        Object[] a = c.toArray();</div><div class="line">        <span class="keyword">int</span> numNew = a.length;</div><div class="line">        ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></div><div class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew);</div><div class="line">        size += numNew;</div><div class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   	<span class="comment">//从指定的索引处添加指定元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">        rangeCheckForAdd(index);</div><div class="line"></div><div class="line">        Object[] a = c.toArray();</div><div class="line">        <span class="keyword">int</span> numNew = a.length;</div><div class="line">        ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></div><div class="line"></div><div class="line">        <span class="keyword">int</span> numMoved = size - index;</div><div class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</div><div class="line">            System.arraycopy(elementData, index, elementData, index + numNew,</div><div class="line">                             numMoved);</div><div class="line"></div><div class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</div><div class="line">        size += numNew;</div><div class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//移除指定范围的元素</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">removeRange</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line">        <span class="keyword">int</span> numMoved = size - toIndex;</div><div class="line">        System.arraycopy(elementData, toIndex, elementData, fromIndex,</div><div class="line">                         numMoved);</div><div class="line"></div><div class="line">        <span class="comment">// clear to let GC do its work</span></div><div class="line">        <span class="keyword">int</span> newSize = size - (toIndex-fromIndex);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = newSize; i &lt; size; i++) &#123;</div><div class="line">            elementData[i] = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        size = newSize;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &gt;= size)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">outOfBoundsMsg</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span>+size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   	<span class="comment">//移除集合中在c中的所有元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</div><div class="line">        Objects.requireNonNull(c);</div><div class="line">        <span class="keyword">return</span> batchRemove(c, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//保留集合中在c中出现过的所有元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</div><div class="line">        Objects.requireNonNull(c);</div><div class="line">        <span class="keyword">return</span> batchRemove(c, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">batchRemove</span><span class="params">(Collection&lt;?&gt; c, <span class="keyword">boolean</span> complement)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Object[] elementData = <span class="keyword">this</span>.elementData;</div><div class="line">        <span class="keyword">int</span> r = <span class="number">0</span>, w = <span class="number">0</span>;</div><div class="line">        <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">for</span> (; r &lt; size; r++)</div><div class="line">                <span class="keyword">if</span> (c.contains(elementData[r]) == complement)</div><div class="line">                    elementData[w++] = elementData[r];</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="comment">// Preserve behavioral compatibility with AbstractCollection,</span></div><div class="line">            <span class="comment">// even if c.contains() throws.</span></div><div class="line">            <span class="keyword">if</span> (r != size) &#123;</div><div class="line">                System.arraycopy(elementData, r,</div><div class="line">                                 elementData, w,</div><div class="line">                                 size - r);</div><div class="line">                w += size - r;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (w != size) &#123;</div><div class="line">                <span class="comment">// clear to let GC do its work</span></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = w; i &lt; size; i++)</div><div class="line">                    elementData[i] = <span class="keyword">null</span>;</div><div class="line">                modCount += size - w;</div><div class="line">                size = w;</div><div class="line">                modified = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> modified;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//序列化</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></div><div class="line">        <span class="keyword">throws</span> java.io.IOException&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></div><div class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">   <span class="comment">//返回一个从index位置开始的list迭代器</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItr(index);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//返回一个从0开始的list迭代器</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItr(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   	<span class="comment">//返回一个普通迭代器</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Itr();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 一个Iterator的内部类，AbstractList.Itr的优化版本</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></div><div class="line">        <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></div><div class="line">        <span class="keyword">int</span> expectedModCount = modCount;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> cursor != size;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">            checkForComodification();</div><div class="line">            <span class="keyword">int</span> i = cursor;</div><div class="line">            <span class="keyword">if</span> (i &gt;= size)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">            Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</div><div class="line">            <span class="keyword">if</span> (i &gt;= elementData.length)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">            cursor = i + <span class="number">1</span>;</div><div class="line">            <span class="keyword">return</span> (E) elementData[lastRet = i];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">            checkForComodification(); <span class="comment">//fast-faild模式，移除一个元素的时候，检查其有没有被修改过</span></div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                ArrayList.<span class="keyword">this</span>.remove(lastRet);</div><div class="line">                cursor = lastRet;</div><div class="line">                lastRet = -<span class="number">1</span>;</div><div class="line">                expectedModCount = modCount;</div><div class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; consumer)</span> </span>&#123;</div><div class="line">            Objects.requireNonNull(consumer);</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> size = ArrayList.<span class="keyword">this</span>.size;</div><div class="line">            <span class="keyword">int</span> i = cursor;</div><div class="line">            <span class="keyword">if</span> (i &gt;= size) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</div><div class="line">            <span class="keyword">if</span> (i &gt;= elementData.length) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</div><div class="line">                consumer.accept((E) elementData[i++]);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// update once at end of iteration to reduce heap write traffic</span></div><div class="line">            cursor = i;</div><div class="line">            lastRet = i - <span class="number">1</span>;</div><div class="line">            checkForComodification();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *一个ListIterator的内部类，AbstractList.ListItr的优化版本.</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">extends</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">        ListItr(<span class="keyword">int</span> index) &#123;</div><div class="line">            <span class="keyword">super</span>();</div><div class="line">            cursor = index;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> cursor != <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> cursor;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> cursor - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;</div><div class="line">            checkForComodification();</div><div class="line">            <span class="keyword">int</span> i = cursor - <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">            Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</div><div class="line">            <span class="keyword">if</span> (i &gt;= elementData.length)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">            cursor = i;</div><div class="line">            <span class="keyword">return</span> (E) elementData[lastRet = i];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">            checkForComodification();</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                ArrayList.<span class="keyword">this</span>.set(lastRet, e);</div><div class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">            checkForComodification();</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">int</span> i = cursor;</div><div class="line">                ArrayList.<span class="keyword">this</span>.add(i, e);</div><div class="line">                cursor = i + <span class="number">1</span>;</div><div class="line">                lastRet = -<span class="number">1</span>;</div><div class="line">                expectedModCount = modCount;</div><div class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   <span class="comment">//返回原来列表的一个（视图，视图中的元素还是原来ArrayList中的元素，任何修改都会反映到原来的ArrayList） [fromIndex,toindex) ，</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</div><div class="line">        subListRangeCheck(fromIndex, toIndex, size);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SubList(<span class="keyword">this</span>, <span class="number">0</span>, fromIndex, toIndex);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">subListRangeCheck</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex, <span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (fromIndex &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"fromIndex = "</span> + fromIndex);</div><div class="line">        <span class="keyword">if</span> (toIndex &gt; size)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"toIndex = "</span> + toIndex);</div><div class="line">        <span class="keyword">if</span> (fromIndex &gt; toIndex)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"fromIndex("</span> + fromIndex +</div><div class="line">                                               <span class="string">") &gt; toIndex("</span> + toIndex + <span class="string">")"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SubList</span> <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">RandomAccess</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AbstractList&lt;E&gt; parent;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> parentOffset;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> offset;</div><div class="line">        <span class="keyword">int</span> size;</div><div class="line"></div><div class="line">        SubList(AbstractList&lt;E&gt; parent,</div><div class="line">                <span class="keyword">int</span> offset, <span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex) &#123;</div><div class="line">            <span class="keyword">this</span>.parent = parent;</div><div class="line">            <span class="keyword">this</span>.parentOffset = fromIndex;</div><div class="line">            <span class="keyword">this</span>.offset = offset + fromIndex;</div><div class="line">            <span class="keyword">this</span>.size = toIndex - fromIndex;</div><div class="line">            <span class="keyword">this</span>.modCount = ArrayList.<span class="keyword">this</span>.modCount; <span class="comment">//将子列表和原来的列表的修改次数联系起来了</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E e)</span> </span>&#123;</div><div class="line">            rangeCheck(index);</div><div class="line">            checkForComodification();</div><div class="line">            E oldValue = ArrayList.<span class="keyword">this</span>.elementData(offset + index); <span class="comment">//可以看出子列表的所有操作都是在ArrayList这个外部类的实例上操作的。</span></div><div class="line">            ArrayList.<span class="keyword">this</span>.elementData[offset + index] = e;</div><div class="line">            <span class="keyword">return</span> oldValue;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">            rangeCheck(index);</div><div class="line">            checkForComodification();</div><div class="line">            <span class="keyword">return</span> ArrayList.<span class="keyword">this</span>.elementData(offset + index);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">            checkForComodification();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.size;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E e)</span> </span>&#123;</div><div class="line">            rangeCheckForAdd(index);</div><div class="line">            checkForComodification();</div><div class="line">            parent.add(parentOffset + index, e);<span class="comment">//调用的是 ArrayList实例的add方法</span></div><div class="line">            <span class="keyword">this</span>.modCount = parent.modCount;</div><div class="line">            <span class="keyword">this</span>.size++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">            rangeCheck(index);</div><div class="line">            checkForComodification();</div><div class="line">            E result = parent.remove(parentOffset + index);</div><div class="line">            <span class="keyword">this</span>.modCount = parent.modCount;</div><div class="line">            <span class="keyword">this</span>.size--;</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">removeRange</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</div><div class="line">            checkForComodification();</div><div class="line">            parent.removeRange(parentOffset + fromIndex,</div><div class="line">                               parentOffset + toIndex);</div><div class="line">            <span class="keyword">this</span>.modCount = parent.modCount;</div><div class="line">            <span class="keyword">this</span>.size -= toIndex - fromIndex;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> addAll(<span class="keyword">this</span>.size, c);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">            rangeCheckForAdd(index);</div><div class="line">            <span class="keyword">int</span> cSize = c.size();</div><div class="line">            <span class="keyword">if</span> (cSize==<span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">            checkForComodification();</div><div class="line">            parent.addAll(parentOffset + index, c);</div><div class="line">            <span class="keyword">this</span>.modCount = parent.modCount;</div><div class="line">            <span class="keyword">this</span>.size += cSize;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> listIterator();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">            checkForComodification();</div><div class="line">            rangeCheckForAdd(index);</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="keyword">this</span>.offset;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ListIterator&lt;E&gt;() &#123;</div><div class="line">             	<span class="comment">//...</span></div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</div><div class="line">            subListRangeCheck(fromIndex, toIndex, size);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SubList(<span class="keyword">this</span>, offset, fromIndex, toIndex);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="keyword">this</span>.size)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; <span class="keyword">this</span>.size)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> String <span class="title">outOfBoundsMsg</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span>+<span class="keyword">this</span>.size;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (ArrayList.<span class="keyword">this</span>.modCount != <span class="keyword">this</span>.modCount)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Spliterator&lt;E&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</div><div class="line">            checkForComodification();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayListSpliterator&lt;E&gt;(ArrayList.<span class="keyword">this</span>, offset,</div><div class="line">                                               offset + <span class="keyword">this</span>.size, <span class="keyword">this</span>.modCount);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// jdk 1.8里面lambda表达式的的东西，对每一个元素调用Comsumer接口的抽象方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</div><div class="line">        Objects.requireNonNull(action);</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        <span class="keyword">final</span> E[] elementData = (E[]) <span class="keyword">this</span>.elementData;<span class="comment">//强制转化，为了</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = <span class="keyword">this</span>.size;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</div><div class="line">            action.accept(elementData[i]);<span class="comment">//对每一个元素调用Comsumer接口的抽象方法</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回一个分片迭代器，1.8里面的东西，</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Spliterator&lt;E&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayListSpliterator&lt;&gt;(<span class="keyword">this</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** Index-based split-by-two, lazily initialized Spliterator */</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListSpliterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Spliterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;E&gt; list;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> index; <span class="comment">// current index, modified on advance/split</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> fence; <span class="comment">// -1 until used; then one past last index</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> expectedModCount; <span class="comment">// initialized when fence set</span></div><div class="line"></div><div class="line">        <span class="comment">/** Create new spliterator covering the given  range */</span></div><div class="line">        ArrayListSpliterator(ArrayList&lt;E&gt; list, <span class="keyword">int</span> origin, <span class="keyword">int</span> fence,</div><div class="line">                             <span class="keyword">int</span> expectedModCount) &#123;</div><div class="line">            <span class="keyword">this</span>.list = list; <span class="comment">// OK if null unless traversed</span></div><div class="line">            <span class="keyword">this</span>.index = origin;</div><div class="line">            <span class="keyword">this</span>.fence = fence;</div><div class="line">            <span class="keyword">this</span>.expectedModCount = expectedModCount;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getFence</span><span class="params">()</span> </span>&#123; <span class="comment">// initialize fence to size on first use</span></div><div class="line">            <span class="keyword">int</span> hi; <span class="comment">// (a specialized variant appears in method forEach)</span></div><div class="line">            ArrayList&lt;E&gt; lst;</div><div class="line">            <span class="keyword">if</span> ((hi = fence) &lt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">if</span> ((lst = list) == <span class="keyword">null</span>)</div><div class="line">                    hi = fence = <span class="number">0</span>;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    expectedModCount = lst.modCount;</div><div class="line">                    hi = fence = lst.size;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> hi;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> ArrayListSpliterator&lt;E&gt; <span class="title">trySplit</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">int</span> hi = getFence(), lo = index, mid = (lo + hi) &gt;&gt;&gt; <span class="number">1</span>;</div><div class="line">            <span class="keyword">return</span> (lo &gt;= mid) ? <span class="keyword">null</span> : <span class="comment">// divide range in half unless too small</span></div><div class="line">                <span class="keyword">new</span> ArrayListSpliterator&lt;E&gt;(list, lo, index = mid,</div><div class="line">                                            expectedModCount);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAdvance</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">            <span class="keyword">int</span> hi = getFence(), i = index;</div><div class="line">            <span class="keyword">if</span> (i &lt; hi) &#123;</div><div class="line">                index = i + <span class="number">1</span>;</div><div class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) E e = (E)list.elementData[i];</div><div class="line">                action.accept(e);</div><div class="line">                <span class="keyword">if</span> (list.modCount != expectedModCount)</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</div><div class="line">            <span class="keyword">int</span> i, hi, mc; <span class="comment">// hoist accesses and checks from loop</span></div><div class="line">            ArrayList&lt;E&gt; lst; Object[] a;</div><div class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">            <span class="keyword">if</span> ((lst = list) != <span class="keyword">null</span> &amp;&amp; (a = lst.elementData) != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> ((hi = fence) &lt; <span class="number">0</span>) &#123;</div><div class="line">                    mc = lst.modCount;</div><div class="line">                    hi = lst.size;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    mc = expectedModCount;</div><div class="line">                <span class="keyword">if</span> ((i = index) &gt;= <span class="number">0</span> &amp;&amp; (index = hi) &lt;= a.length) &#123;</div><div class="line">                    <span class="keyword">for</span> (; i &lt; hi; ++i) &#123;</div><div class="line">                        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) E e = (E) a[i];</div><div class="line">                        action.accept(e);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (lst.modCount == mc)</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">estimateSize</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> (<span class="keyword">long</span>) (getFence() - index);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">characteristics</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> Spliterator.ORDERED | Spliterator.SIZED | Spliterator.SUBSIZED;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeIf</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> E&gt; filter)</span> </span>&#123;</div><div class="line">        Objects.requireNonNull(filter);</div><div class="line">        <span class="comment">// figure out which elements are to be removed</span></div><div class="line">        <span class="comment">// any exception thrown from the filter predicate at this stage</span></div><div class="line">        <span class="comment">// will leave the collection unmodified</span></div><div class="line">        <span class="keyword">int</span> removeCount = <span class="number">0</span>;</div><div class="line">        <span class="keyword">final</span> BitSet removeSet = <span class="keyword">new</span> BitSet(size);</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = <span class="keyword">this</span>.size;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</div><div class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">            <span class="keyword">final</span> E element = (E) elementData[i];</div><div class="line">            <span class="keyword">if</span> (filter.test(element)) &#123;</div><div class="line">                removeSet.set(i);</div><div class="line">                removeCount++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// shift surviving elements left over the spaces left by removed elements</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> anyToRemove = removeCount &gt; <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (anyToRemove) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> newSize = size - removeCount;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>; (i &lt; size) &amp;&amp; (j &lt; newSize); i++, j++) &#123;</div><div class="line">                i = removeSet.nextClearBit(i);</div><div class="line">                elementData[j] = elementData[i];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=newSize; k &lt; size; k++) &#123;</div><div class="line">                elementData[k] = <span class="keyword">null</span>;  <span class="comment">// Let gc do its work</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">this</span>.size = newSize;</div><div class="line">            <span class="keyword">if</span> (modCount != expectedModCount) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">            &#125;</div><div class="line">            modCount++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> anyToRemove;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(UnaryOperator&lt;E&gt; operator)</span> </span>&#123;</div><div class="line">        Objects.requireNonNull(operator);</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = <span class="keyword">this</span>.size;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</div><div class="line">            elementData[i] = operator.apply((E) elementData[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        &#125;</div><div class="line">        modCount++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</div><div class="line">        Arrays.sort((E[]) elementData, <span class="number">0</span>, size, c);</div><div class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        &#125;</div><div class="line">        modCount++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java集合类详解]]></title>
      <url>http://thinerzq.com/2016/04/20/java/java%E9%9B%86%E5%90%88%E7%B1%BB%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>学了挺久java的了，但是发现对java里面的集合类没有达到融汇贯通的地步，之前都只是看别人的Blog，用一些常用的集合类，慢慢发现如果想再上一个台阶必须要自己去看源代码，自己去分析理解。</p>
<h1 id="集合框架图"><a href="#集合框架图" class="headerlink" title="集合框架图"></a>集合框架图</h1><p>网上流传的集合框架图基本上都来自Core java这本书里面的集合类介绍，结合自己的理解，自己再画了一次。<br><img src="/images/java_collection.jpg" alt="Java Collection"></p>
<a id="more"></a>
<h1 id="常用集合类的对比"><a href="#常用集合类的对比" class="headerlink" title="常用集合类的对比"></a>常用集合类的对比</h1><table>
<thead>
<tr>
<th style="text-align:left">接口</th>
<th style="text-align:left">实现类</th>
<th style="text-align:left">元素有无顺序</th>
<th style="text-align:left">元素是否重复</th>
<th style="text-align:left">功能，特点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">List</td>
<td style="text-align:left">ArrayList</td>
<td style="text-align:left">插入顺序</td>
<td style="text-align:left">可重复</td>
<td style="text-align:left">数组实现，查询快，增删慢，线程不安全，轻量级</td>
</tr>
<tr>
<td style="text-align:left">List</td>
<td style="text-align:left">Vector</td>
<td style="text-align:left">插入顺序</td>
<td style="text-align:left">可重复</td>
<td style="text-align:left">数组实现，查询快，增删慢，线程安全，重量级</td>
</tr>
<tr>
<td style="text-align:left">List</td>
<td style="text-align:left">LinkedList</td>
<td style="text-align:left">插入顺序</td>
<td style="text-align:left">可重复</td>
<td style="text-align:left">链表实现，增删快，查询慢，线程不安全</td>
</tr>
<tr>
<td style="text-align:left">Set</td>
<td style="text-align:left">HashSet</td>
<td style="text-align:left">无序</td>
<td style="text-align:left">不可重复</td>
<td style="text-align:left">HashMap实现，允许存在一个null元素</td>
</tr>
<tr>
<td style="text-align:left">Set</td>
<td style="text-align:left">LinkedHashSet</td>
<td style="text-align:left">插入顺序</td>
<td style="text-align:left">不可重复</td>
<td style="text-align:left">HashMap实现，允许存在一个null元素，维护一个双重链接列表</td>
</tr>
<tr>
<td style="text-align:left">Set</td>
<td style="text-align:left">TreeSet</td>
<td style="text-align:left">自定义排序</td>
<td style="text-align:left">不可重复</td>
<td style="text-align:left">默认使用元素自然顺序排序，或者自定义，通过红黑树实现排序</td>
</tr>
<tr>
<td style="text-align:left">Map</td>
<td style="text-align:left">HashMap</td>
<td style="text-align:left">无序</td>
<td style="text-align:left">key不能重复</td>
<td style="text-align:left">允许一个null的key，线程不安全</td>
</tr>
<tr>
<td style="text-align:left">Map</td>
<td style="text-align:left">LinkedHashMap</td>
<td style="text-align:left">插入顺序</td>
<td style="text-align:left">key不能重复</td>
<td style="text-align:left">许一个null的key，线程不安全,维护一个双重链接列表</td>
</tr>
<tr>
<td style="text-align:left">Map</td>
<td style="text-align:left">Hashtable</td>
<td style="text-align:left">无序</td>
<td style="text-align:left">key不能重复</td>
<td style="text-align:left">不允许null的key或者value，线程安全</td>
</tr>
<tr>
<td style="text-align:left">Map</td>
<td style="text-align:left">TreeMap</td>
<td style="text-align:left">自定义key顺序</td>
<td style="text-align:left">可重复</td>
<td style="text-align:left">通过红黑树实现排序</td>
</tr>
</tbody>
</table>
<h1 id="ArrayList详解"><a href="#ArrayList详解" class="headerlink" title="ArrayList详解"></a>ArrayList详解</h1><p><a href="../java8-ArrayList详解">ArrayList详解</a></p>
<h1 id="HashMap详解"><a href="#HashMap详解" class="headerlink" title="HashMap详解"></a>HashMap详解</h1><p><a href="../java8-HashMap详解">HashMap详解</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[实习面试碰到的问题]]></title>
      <url>http://thinerzq.com/2016/03/25/%E6%9D%82%E8%AE%B0/%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E7%A2%B0%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>最近找实习，被问到了不少问题，来记录一下，第一次面试面的腾讯，先从腾讯说起吧</p>
<h1 id="腾讯一电面"><a href="#腾讯一电面" class="headerlink" title="腾讯一电面"></a>腾讯一电面</h1><p> 由于是第一次电面，当时4点过，我在外面吃饭，接着电话找了一个角落开始聊了</p>
<p> 先是自我介绍，巴拉巴拉<br> 然后问了我的研究方向，我简单的介绍了一个之后，越问越深，你的研究方向里面有哪些算法啊，介绍一下啊……<br> 然后问了数据库的三大范式<br> 然后问了一道算法，关于爬楼梯的：一次只能爬1级和2级台阶，问到第N 级台阶有多少种爬法，这题还好，以前在了leetcode上刷过，属于简单类型，当时想了一下就答上来了。<br> 然后问了操作系统怎么做内存管理，程序是怎么被转入内存的，怎么切换的。我简单的说了一下，说的不详细也就这样过去了。这段时间一直忙着写论文，根本没复习过好嘛。<br> 然后问了设计模型的单例模式怎么实现的，我回答饿汉和懒汉，然后简单的解释了一下。后来回来百度才发现有5中实现方式…..<br> 然后问了java中hashmap 和hashtable的区别，这个比较好说。<br> 然后问了TCP/IP 三次握手，四次挥手，为什么要3次，2次行不行。这是老问题了。<br> 然后….想不起来了。</p>
<a id="more"></a>
<h1 id="CVTE现场面"><a href="#CVTE现场面" class="headerlink" title="CVTE现场面"></a>CVTE现场面</h1><p> 这家公司名声不好，但是为了刷经验还是去面了，<br> 首先自我介绍，然后问我的项目和研究方向<br> 然后开始问数据库的范式<br> 然后出了一个写sql 在某一个表增加某一个列的语句<br> 然后给了我三张表，让我查出想要的数据，但是没写出来，我想了一下大概要2次子查询，外加group by 和order by. 发现自己sql语句其很差<br> 然后来了一道算法题：“给出一个字符串，找出字符串中第一个只出现一次的字符”，当时我回答是用 String 类的 indexof 和 lastindexof 比较下标，一样就返回。这个方法没错，但是似乎不是他们想要的，然后他们就说，能不能用什么集合来实现<br> ，我想了想hashmap，然后果然就中计了。接下来hashmap各种问<br> 递归程序怎么转化为非递归<br> hashmap和hashtap有什么区别啊，有哪些集合类啊，<br> hashmap底层是怎么实现的啊<br> 有没有用过currenthashmap 啊<br> 然后问了Linux 上的ls命令，kill命令，chmod 命令，文件属性中各个位置代表了什么信息</p>
<p> 然后问我都关注哪些技术网站啊，最近看的印象最深的博客或者其他的东西是什么啊。<br> 然后让我简单的介绍一下hibernate。</p>
<p> 然后他们公司给哪些答得不怎么样的人，二面，HR面。（我们班去HR面的人回来说的，他基本上一个问题都没答上来，日了狗了）</p>
<h1 id="阿里一电面"><a href="#阿里一电面" class="headerlink" title="阿里一电面"></a>阿里一电面</h1><p> 刚面完CVTE,就接到了阿里的电面<br> 先介绍一下自己的研究方向 与项目。这个老生常谈了，<br> 然后问数据库的范式，和事务隔离级别，这个也还好<br> 然后让我讲java的历史<br> 然后讲到Servlet的时候，他问没有servlet以前是怎么实现动态页面的。<br> 然后问hibernate和ibaits异同<br> 然后问平时用过哪些设计模式，这个我说了几个。<br> 然后问感觉阿里怎么样，我说阿里有很多开源项目，很好，随便说了一个项目，<br> 然后问有没有用Haddop ，我说我跑过WordCount..<br> 然后还有的，我记不起来了。</p>
<h1 id="网易游戏现场面"><a href="#网易游戏现场面" class="headerlink" title="网易游戏现场面"></a>网易游戏现场面</h1><p> 这是难度最大的面试了。<br> 先是介绍自己的研究方向，项目情况。<br> 然后数据库范式，数据库索引有哪些种类，怎么实现的。<br> 然后问操作系统怎么做内存管理的<br> 然后让我描述计算机计网络中traceroute 命令怎么的原理,各种信息传递的过程。<br> 然后问我linux中，cat和cd的区别，在底层系统调用上有什么区别。<br> 然后出了一道算法题，O(1)空间复杂度内，反转单链表。<br> 然后出了一道多线程题的题。<br> int x=y=i=j=0;<br> int run1(){<br> x=1;<br> i=1;<br> }<br> int run2(){<br> j=1;<br> y=1;<br> }<br> 问会不会出现i =j=0的情况，提示我分单核和多核考虑。我就蒙了。如果两个线程都有执行的话单核不会出现，多核就不知道了</p>
<h1 id="阿里二电面"><a href="#阿里二电面" class="headerlink" title="阿里二电面"></a>阿里二电面</h1><p> 自我介绍<br> 研究内容，项目介绍，项目上线没有，<br> 从Object开始谈起，问Object中有哪些方法，hashcode,equals,notify,notifyall，接下来从这些方法开始问 java 集合，多线程，数据库，<br> hahscode 和equals的区别，在一个集合中怎么判两个对象是否相等。<br> java的集合类有哪些，巴拉巴拉，简单说一下各个map的区别，各个list的区别<br> hashmap的底层怎么实现的<br> java中数据库怎么连接的，介绍一下整个过程，<br> Http协议中get和post的区别<br> 数据库的范式<br> java怎么实现多线程，有没有用过线程池，<br> java 1.5以前的特性，这个我没答上来，然后问1.8的新特性，这个我说了4个，就过去了。<br> 对象之间有依赖关系，会怎么样，<br> Servlet的session怎么实现的，怎么设置Session过期时间，<br> ajax怎么跨域调用。<br> 在搜索引擎的输入栏类，输入一个词，同时搜索引擎给出几个可能相关的词，怎么实现的。</p>
<p> 大概就这么多。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[你一定爱都的极简欧洲史]]></title>
      <url>http://thinerzq.com/2016/03/09/history/%E4%BD%A0%E4%B8%80%E5%AE%9A%E7%88%B1%E9%83%BD%E7%9A%84%E6%9E%81%E7%AE%80%E6%AC%A7%E6%B4%B2%E5%8F%B2/</url>
      <content type="html"><![CDATA[<p>欧洲文明是一个混合体。</p>
<h1 id="1-从希腊说起，讲到日耳曼–古典时期到中世纪"><a href="#1-从希腊说起，讲到日耳曼–古典时期到中世纪" class="headerlink" title="1 从希腊说起，讲到日耳曼–古典时期到中世纪"></a>1 从希腊说起，讲到日耳曼–古典时期到中世纪</h1><p>欧洲文明发端之处，由三部分组成</p>
<ol>
<li>古希腊和罗马文化</li>
<li>基督教–犹太教的一个奇特分支</li>
<li>对罗马帝国进行侵略的日耳曼蛮族的战士文化</li>
</ol>
<a id="more"></a>
<h2 id="1-1-现代文明的源头：古希腊"><a href="#1-1-现代文明的源头：古希腊" class="headerlink" title="1.1 现代文明的源头：古希腊"></a>1.1 现代文明的源头：古希腊</h2><p>现在的哲学、艺术、文学、数学、科学、医学以及政治思想的源头，都可以从古希腊说起。希腊慢慢的发展壮大，当时的罗马只是罗马城旁边的一个小村落，慢慢的接触到了希腊人，就向他们学习。然后建立起了一个庞大的帝国。即便如此强大的罗马人，他们也要把自己的孩子送去雅典上大学，要不就雇佣希腊奴隶在家教小孩。慢慢的就形成了罗马人，希腊味。 希腊人发送了几何学，在他们眼里，几何学是引导人类认知宇宙本质的一个途径。</p>
<h2 id="1-2-基督教："><a href="#1-2-基督教：" class="headerlink" title="1.2 基督教："></a>1.2 基督教：</h2><p>犹太人一直相信，宇宙间只有一个真身，希腊人罗马人崇奉多神。犹太人认为自己是上帝的选民，必须遵守上帝的法律，于是就有了基督教十诫</p>
<blockquote>
<p>“我是耶和华你的天主，是我领你出了埃及地奴隶之所。<br><br>“除我以外，你不可有别的神。<br><br>“不可为自己雕刻偶像，也不可作什么形象，仿佛上天、下地和地底下、水中的百物。 “不可妄呼耶和华你天主的名；因为凡妄呼他名的人，耶和华决不让他们免受惩罚。 “当纪念安息日，守为圣日。六日要劳碌做你一切的工，因为六日之内，耶和华造天、地、海和其中的万物，第七日便安息，所以耶和华赐福与安息日并定为圣日。<br><br>“当孝敬父母，好使你在耶和华你的天主所赐给你的地方延年益寿。<br><br>“不可杀人。<br><br>“不可奸淫。<br><br>“不可偷盗。<br><br>“不可作假见证陷害人。<br><br>“不可贪你近人的房屋，也不可贪恋他人的妻子、仆婢、牛驴及他一切所有的。”</p>
</blockquote>
<p>虽然犹太人相信自己是上帝的选民，但他们并没有逐梦的空间。他们常常遭受屈辱，被外族占领、放逐；可是，他们从不怀疑上帝的存在或他对他们的关爱。当苦难降临，他们的结论是自己没有恪遵上帝的规定，以至于触怒了神。因此，在犹太民族的宗教里，一如基督教中，道德与宗教是密不可分的，但其他宗教就不见得如此。 耶稣，基督教的始祖，就是个犹太人，他所有的门徒也都是犹太人。在耶稣传道之时，犹太人再度丧失了国家主权；巴勒斯坦是罗马帝国的一个偏远省份。 耶稣一些徒众对他寄予厚望，希望他能领导起义，对抗罗马。他的敌人设计于他，想骗他说出带有谋反意图的话。他们问，我们应该纳税给罗马吗？耶稣回答，拿一个银钱给我看—-这上头是什么图案？对方回答，是恺撒的像。耶稣就说：”恺撒的，就应归给恺撒，天主的就应归还天主。”</p>
<p>耶稣在传道中把犹太人的道德教训转化成了宇宙大爱。 当时有许多讲道人和先知，耶稣只是其一。犹太教的领导阶层对这些讲道人心生疑忌，跟罗马人联手合作，并将耶稣处以死刑的也是这些犹太领袖。但不同于其他精神导师的是，耶稣在死后复活了—-至少他的信徒这样相信。</p>
<p>这样的教义是只对犹太人有效，还是所有人类共有？耶稣死后，他的跟随者对这个问题意见分歧。传统派主张，唯有先变成犹太人，遵奉《旧约》中针对犹太人订下的所有严格规定，包括割包皮，一种对成人男子来说颇为痛苦的 手术，你才有可能成为基督徒。当初如果这一派获胜，今天的基督教很可能就只是犹太信仰的一个小旁支而已，甚或已经灰飞烟灭，就算不灭绝也势必无足轻重。 结果胜出的是另一方。他们说，这是一种完全不同的崭新宗教。你不必先变成犹太人，所有法规都可以置诸脑后，基督已经把我们从那些戒律当中解放出来；他关于爱的教诲凌驾于一切律法之上。这是早期基督教会一位伟大传教士保罗的观点，有人甚至尊保罗为基督教的鼻祖，因为耶稣死的时候，这个信仰还只是犹太人的家务事。耶稣是犹太人，他的徒众也是，有些人希望就这样保持下去，而因为保罗确凿地指出这是所有人的宗教，自此而后，基督教就成了一种世界性的宗教—-至少开启了这样的可能。接下去的…</p>
<h2 id="1-3-日耳曼蛮族的逻辑"><a href="#1-3-日耳曼蛮族的逻辑" class="headerlink" title="1.3 日耳曼蛮族的逻辑"></a>1.3 日耳曼蛮族的逻辑</h2><p>这个混合体的第三组人马，是入侵罗马帝国的日耳曼蛮族。他们原本住在北方边界处，在公元400年之后大举入侵，到了公元476年，西罗马帝国已被他们毁灭。欧洲文明这个混合体，就在法国、西班牙和意大利这些地方初具了它的雏形。</p>
<p><strong>希腊人的观点：这是一个简单、符合逻辑、能以数学表达的世界。基督教的观点：这是个邪恶的世界，唯有耶稣能拯救它。日耳曼蛮族的观点则是：打仗是好玩的事。这些看似天差地远的元素组合在一起，造就了欧洲的文明。</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[世界上下五千年历史变迁]]></title>
      <url>http://thinerzq.com/2016/02/22/history/%E4%B8%96%E7%95%8C%E4%B8%8A%E4%B8%8B%E4%BA%94%E5%8D%83%E5%B9%B4%E5%8E%86%E5%8F%B2%E5%8F%98%E8%BF%81/</url>
      <content type="html"><![CDATA[<h1 id="1、四分钟尽览世界各国地图变迁史"><a href="#1、四分钟尽览世界各国地图变迁史" class="headerlink" title="1、四分钟尽览世界各国地图变迁史"></a>1、四分钟尽览世界各国地图变迁史</h1><embed wmode="window" flashvars="vid=u0155c4a7w8&amp;duration=253&amp;cid=blqw3ozm7fo096m&amp;tpid=27&amp;showend=1&amp;showcfg=1&amp;searchbar=1&amp;shownext=1&amp;list=2&amp;autoplay=1&amp;outhost=http%3A%2F%2Fv.qq.com%2Fcover%2Fb%2Fblqw3ozm7fo096m.html%3Fvid%3Du0155c4a7w8&amp;openbc=1&amp;fakefull=1&amp;bullet=1&amp;bulletid=&amp;title=%E9%9C%87%E6%92%BC%E8%A7%86%E8%A7%89%EF%BC%81%E5%9B%9B%E5%88%86%E9%92%9F%E5%B0%BD%E8%A7%88%E4%B8%96%E7%95%8C%E5%90%84%E5%9B%BD%E5%9C%B0%E5%9B%BE%E5%8F%98%E8%BF%81%E5%8F%B2" src="http://imgcache.qq.com/tencentvideo_v1/player/TencentPlayer.swf?max_age=86400&amp;v=20151010" quality="high" name="tenvideo_flash_player_1456151610454" id="tenvideo_flash_player_1456151610454" bgcolor="#000000" width="650px" height="530px" align="middle" allowscriptaccess="always" allowfullscreen="true" type="application/x-shockwave-flash" pluginspage="http://get.adobe.com/cn/flashplayer/" style="width: 100%; height: 530px;">

 <a id="more"></a>
<h1 id="2、全球历史变迁动态展示-混乱三千年-大国变迁"><a href="#2、全球历史变迁动态展示-混乱三千年-大国变迁" class="headerlink" title="2、全球历史变迁动态展示 混乱三千年 大国变迁"></a>2、全球历史变迁动态展示 混乱三千年 大国变迁</h1><embed wmode="window" flashvars="vid=y01795jzonj&amp;tpid=27&amp;showend=1&amp;showcfg=1&amp;searchbar=1&amp;shownext=1&amp;list=2&amp;autoplay=1&amp;ptag=%7Csearch.zhonghe.datu&amp;outhost=http%3A%2F%2Fv.qq.com%2Fpage%2Fy%2F0%2Fj%2Fy01795jzonj.html&amp;refer=http%3A%2F%2Fv.qq.com%2Fsearch.html%3Fpagetype%3D3%26stj2%3Dsearch.search%26stag%3Dtxt.index%26ms_key%3D%25E5%258E%2586%25E5%258F%25B2%25E5%258F%2598%25E8%25BF%2581&amp;openbc=0&amp;fakefull=1&amp;bullet=1&amp;bulletid=&amp;title=%E5%85%A8%E7%90%83%E5%8E%86%E5%8F%B2%E5%8F%98%E8%BF%81%E5%8A%A8%E6%80%81%E5%B1%95%E7%A4%BA%20%E6%B7%B7%E4%B9%B1%E4%B8%89%E5%8D%83%E5%B9%B4%20%E5%A4%A7%E5%9B%BD%E5%8F%98%E8%BF%81" src="http://imgcache.qq.com/tencentvideo_v1/player/TencentPlayer.swf?max_age=86400&amp;v=20140714" quality="high" name="tenvideo_flash_player_1456151577098" id="tenvideo_flash_player_1456151577098" bgcolor="#000000" width="650px" height="530px" align="middle" allowscriptaccess="always" allowfullscreen="true" type="application/x-shockwave-flash" pluginspage="http://get.adobe.com/cn/flashplayer/" style="width: 100%; height: 530px;">
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[计算机中的基础知识]]></title>
      <url>http://thinerzq.com/2016/02/15/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h1 id="有符号数与无符号数之间的转换"><a href="#有符号数与无符号数之间的转换" class="headerlink" title="有符号数与无符号数之间的转换"></a>有符号数与无符号数之间的转换</h1><h2 id="补码转化"><a href="#补码转化" class="headerlink" title="补码转化"></a>补码转化</h2><p>负数的原码 = (符号位+1) + 对应正数的原码。</p>
<h3 id="已知一个负数，求其补码"><a href="#已知一个负数，求其补码" class="headerlink" title="已知一个负数，求其补码"></a>已知一个负数，求其补码</h3><ol>
<li>先求负数的原码</li>
<li>符号位不变，其余位取反</li>
<li>+1</li>
</ol>
<h3 id="已知一个负数的补码，求它对应的原码："><a href="#已知一个负数的补码，求它对应的原码：" class="headerlink" title="已知一个负数的补码，求它对应的原码："></a>已知一个负数的补码，求它对应的原码：</h3><ol>
<li>符号位不变，其余取反</li>
<li>+1</li>
</ol>
<h3 id="有符号数与无符号数之间的简单的转化"><a href="#有符号数与无符号数之间的简单的转化" class="headerlink" title="有符号数与无符号数之间的简单的转化"></a>有符号数与无符号数之间的简单的转化</h3><pre><code>int i = b&gt;=0 ? b :2^32 + b
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[State Chart XML (SCXML) 状态机规范]]></title>
      <url>http://thinerzq.com/2016/02/01/Apache%20Commons/W3C-SCXML%E6%A0%87%E5%87%86%E7%BF%BB%E8%AF%91/</url>
      <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>这篇文档描述了SCXML，或者说是“状态图可扩展标记语言”。SCXML基于CCXML和Harel State Tables为状态机提供了一个一般性的可执行环境，</p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>这篇文档描述的SCXML，是一种基于事件的状态机语言。它是CCXML和Harel State Tables 结合的产物。CCXML是一种基于事件的状态机语言，被设计用来在语音应用中支持通话控制。CCXML1.0规范定义了一个状态机和事件处理语法以及一系列的通话控制元素。Harel State Table由David Harel于1987年提出的一种状态机记号，后来UML中的状态机沿用了这些记号。Harel State Tables 提供了一个简洁、语义良好和功能强大的控制结构。这篇文章就是使用XML语法和Harel State Table语义来描述CCXML中状态和事件转移的逻辑概念</p>
<a id="more"></a>
<h1 id="核心结构"><a href="#核心结构" class="headerlink" title="核心结构"></a>核心结构</h1><p>[这部分是非正式的]</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="基础的状态机概念"><a href="#基础的状态机概念" class="headerlink" title="基础的状态机概念"></a>基础的状态机概念</h3><h3 id="组合状态"><a href="#组合状态" class="headerlink" title="组合状态"></a>组合状态</h3><h3 id="并行状态"><a href="#并行状态" class="headerlink" title="并行状态"></a>并行状态</h3><h3 id="初始化，终止和历史状态"><a href="#初始化，终止和历史状态" class="headerlink" title="初始化，终止和历史状态"></a>初始化，终止和历史状态</h3><h3 id="转移类型"><a href="#转移类型" class="headerlink" title="转移类型"></a>转移类型</h3><h2 id="scxml"><a href="#scxml" class="headerlink" title="scxml"></a>scxml</h2><p>[这部分是规范的]<br>文档的顶层元素，携带了版本信息。一个状态机由&lt;scxml&gt;和他的孩子元素共同组成。</p>
<blockquote>
<p>提示：任何时候只有一个孩子是处于活跃状态。  </p>
</blockquote>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><table>
<thead>
<tr>
<th style="text-align:left">名字</th>
<th style="text-align:left">必须</th>
<th style="text-align:left">约束</th>
<th style="text-align:left">类型</th>
<th style="text-align:left">默认值</th>
<th style="text-align:left">有效值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">inital</td>
<td style="text-align:left">False</td>
<td style="text-align:left">None</td>
<td style="text-align:left">Id引用</td>
<td style="text-align:left">None</td>
<td style="text-align:left"></td>
<td style="text-align:left">初始状态的id值，如果没有指定，默认的初始状态是文档中第一个孩子状态</td>
</tr>
<tr>
<td style="text-align:left">name</td>
<td style="text-align:left">False</td>
<td style="text-align:left">None</td>
<td style="text-align:left">名称记号</td>
<td style="text-align:left">None</td>
<td style="text-align:left"></td>
<td style="text-align:left">任何有效的名称记号    状态机的名字</td>
</tr>
<tr>
<td style="text-align:left">xmlns</td>
<td style="text-align:left">True</td>
<td style="text-align:left">None</td>
<td style="text-align:left">URI</td>
<td style="text-align:left">None</td>
<td style="text-align:left">必须是：“<a href="http://w3.org/005/07/scxml”" target="_blank" rel="external">http://w3.org/005/07/scxml”</a></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">version</td>
<td style="text-align:left">True</td>
<td style="text-align:left">None</td>
<td style="text-align:left">数字</td>
<td style="text-align:left">None</td>
<td style="text-align:left">必须是：“1.0”</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">datamodel</td>
<td style="text-align:left">False</td>
<td style="text-align:left">None</td>
<td style="text-align:left">名称记号</td>
<td style="text-align:left">自定义</td>
<td style="text-align:left">“null”,“ecmascript”,”xpath”，或者实现者定义的值</td>
<td style="text-align:left">表示状态机中的数据模型</td>
</tr>
<tr>
<td style="text-align:left">binding</td>
<td style="text-align:left">False</td>
<td style="text-align:left">None</td>
<td style="text-align:left">Enum</td>
<td style="text-align:left">early</td>
<td style="text-align:left">“early”,”late”</td>
<td style="text-align:left">指明数据绑定的时间</td>
</tr>
</tbody>
</table>
<h3 id="孩子元素"><a href="#孩子元素" class="headerlink" title="孩子元素"></a>孩子元素</h3><table>
<thead>
<tr>
<th style="text-align:left">名字名字</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">出现次数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&lt;state&gt;</td>
<td style="text-align:left">一个组合状态或者原子状态</td>
<td style="text-align:left">0…*</td>
</tr>
<tr>
<td style="text-align:left">&lt;parallel&gt;</td>
<td style="text-align:left">一个并行状态</td>
<td style="text-align:left">0…*</td>
</tr>
<tr>
<td style="text-align:left">&lt;final&gt;</td>
<td style="text-align:left">一个顶层的终止状态，当状态机达到这个状态必须终止</td>
<td style="text-align:left">0…*</td>
</tr>
<tr>
<td style="text-align:left">&lt;datamodel&gt;</td>
<td style="text-align:left">定义了部分或者所有的数据模型</td>
<td style="text-align:left">0…1</td>
</tr>
<tr>
<td style="text-align:left">&lt;script&gt;</td>
<td style="text-align:left">提供了全局脚本的能力</td>
<td style="text-align:left">0…1</td>
</tr>
</tbody>
</table>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>一个结构良好的SCXML文档必须至少有一个&lt;state&gt;,或者&lt;parallel&gt;或者&lt;final&gt;孩子，在系统初始化的时候，如果执行呢‘initial’属性，SCXML Processer必须进入 ‘initial’属性指定的状态中。如果没有执行‘initial’属性，Processer必须进入文档中的第一个状态。平台应该顶一个默认的datamodel值。</p>
<h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p>[这部分是规范的]  </p>
<h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><table>
<thead>
<tr>
<th style="text-align:left">名字</th>
<th style="text-align:left">必须</th>
<th style="text-align:left">约束</th>
<th style="text-align:left">类型</th>
<th style="text-align:left">默认值</th>
<th style="text-align:left">有效值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">id</td>
<td style="text-align:left">False</td>
<td style="text-align:left">None</td>
<td style="text-align:left">Id引用</td>
<td style="text-align:left">None</td>
<td style="text-align:left">一个有效的id定义</td>
<td style="text-align:left">状态的标识符</td>
</tr>
<tr>
<td style="text-align:left">initial</td>
<td style="text-align:left">False</td>
<td style="text-align:left">不能和&lt;initial&gt;元素同时指定，不能在原子状态内部指定</td>
<td style="text-align:left">名称记号</td>
<td style="text-align:left">None</td>
<td style="text-align:left"></td>
<td style="text-align:left">另一个状态的ID标识符，但是要保证配置后是合法的状态机配置    复合状态或者并发状态默认初始化的状态</td>
</tr>
</tbody>
</table>
<h3 id="孩子元素-1"><a href="#孩子元素-1" class="headerlink" title="孩子元素"></a>孩子元素</h3><table>
<thead>
<tr>
<th style="text-align:left">名字名字</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">出现次数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&lt;onentry&gt;</td>
<td style="text-align:left">可选的元素，用来呈现进入这个状态时可执行内容</td>
<td style="text-align:left">0…*</td>
</tr>
<tr>
<td style="text-align:left">&lt;onexit&gt;</td>
<td style="text-align:left">可选的元素，用来呈现退出这个状态时可执行内容</td>
<td style="text-align:left">0…*</td>
</tr>
<tr>
<td style="text-align:left">&lt;transition&gt;</td>
<td style="text-align:left">定义了一个转移，源状态是当前状态</td>
<td style="text-align:left">0…*</td>
</tr>
<tr>
<td style="text-align:left">&lt;initial&gt;</td>
<td style="text-align:left">复合状态机的子状态，定义了默认的初始化状态</td>
<td style="text-align:left">0…1</td>
</tr>
<tr>
<td style="text-align:left">&lt;parallel&gt;</td>
<td style="text-align:left">定义了并发子状态</td>
<td style="text-align:left">0…*</td>
</tr>
<tr>
<td style="text-align:left">&lt;final&gt;</td>
<td style="text-align:left">定义了一个final子状态</td>
<td style="text-align:left">0…*</td>
</tr>
<tr>
<td style="text-align:left">&lt;history&gt;</td>
<td style="text-align:left">一个伪状态机，记录了上转移出此状态机的子孙状态</td>
<td style="text-align:left">0…*</td>
</tr>
<tr>
<td style="text-align:left">&lt;datamodel&gt;</td>
<td style="text-align:left">定义了部分或者所有的数据模型</td>
<td style="text-align:left">0…1</td>
</tr>
<tr>
<td style="text-align:left">&lt;invoke&gt;</td>
<td style="text-align:left">调用一个外部服务</td>
<td style="text-align:left">0…*</td>
</tr>
</tbody>
</table>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>定义1 ：一个原子（atomic）状态是一个没有&lt;state&gt;元素，&lt;parallel&gt;或者&lt;final&gt;孩子的&lt;state&gt;    </p>
<p>定义2 ：一个复合（compound）状态是一个有&lt;state&gt;元素，&lt;parallel&gt;或者&lt;final&gt;孩子（或者这几者的组合）的&lt;state&gt;  </p>
<p>定义3 ：一个复合状态的默认的初始化状态由‘initial’属性或者&lt;initial&gt;元素指定，如果前两者都没有出现，那么初始化状态就是当前复合状态的按文档顺序来说的第一个孩子状态</p>
<h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><p>在一个结构良好的SCXML文档，一个复合状态必须制定‘initial’属性或者一个&lt;initial&gt;元素，但是二者不能同时指定。</p>
<h2 id="parallel"><a href="#parallel" class="headerlink" title="parallel"></a>parallel</h2><p>[这部分是规范的]<br>&lt;parallel&gt;元素封装了一系列的孩子状态，如果并行状态是处于活跃状态，当孩子元素的父元素是active的，这些孩子状态会同时处于active状态</p>
<h3 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h3><table>
<thead>
<tr>
<th style="text-align:left">名字</th>
<th style="text-align:left">必须</th>
<th style="text-align:left">约束</th>
<th style="text-align:left">类型</th>
<th style="text-align:left">默认值</th>
<th style="text-align:left">有效值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">id</td>
<td style="text-align:left">False</td>
<td style="text-align:left"></td>
<td style="text-align:left">Id</td>
<td style="text-align:left">None</td>
<td style="text-align:left">一个有效的id定义</td>
<td style="text-align:left">状态的标识符</td>
</tr>
<tr>
<td style="text-align:left">initial</td>
<td style="text-align:left">False</td>
<td style="text-align:left">不能和&lg;initial&gt;元素同时指定，不能在原子状态内部指定</td>
<td style="text-align:left">名称记号</td>
<td style="text-align:left">None</td>
<td style="text-align:left"></td>
<td style="text-align:left">另一个状态的ID标识符，但是要保证配置后是合法的状态机配置    复合状态或者并发状态默认初始化的状态</td>
</tr>
</tbody>
</table>
<h3 id="孩子元素-2"><a href="#孩子元素-2" class="headerlink" title="孩子元素"></a>孩子元素</h3><table>
<thead>
<tr>
<th style="text-align:left">名字名字</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">出现次数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&lt;onentry&gt;</td>
<td style="text-align:left">可选的元素，用来呈现进入这个状态时可执行内容</td>
<td style="text-align:left">0…*</td>
</tr>
<tr>
<td style="text-align:left">&lt;onexit&gt;</td>
<td style="text-align:left">可选的元素，用来呈现退出这个状态时可执行内容</td>
<td style="text-align:left">0…*</td>
</tr>
<tr>
<td style="text-align:left">&lt;transition&gt;</td>
<td style="text-align:left">定义了一个转移，源状态是当前状态</td>
<td style="text-align:left">0…*</td>
</tr>
<tr>
<td style="text-align:left">&lt;initial&gt;</td>
<td style="text-align:left">复合状态机的子状态，定义了默认的初始化状态</td>
<td style="text-align:left">0…1</td>
</tr>
<tr>
<td style="text-align:left">&lt;parallel&gt;</td>
<td style="text-align:left">定义了并发子状态</td>
<td style="text-align:left">0…*</td>
</tr>
<tr>
<td style="text-align:left">&lt;final&gt;</td>
<td style="text-align:left">定义了一个final子状态</td>
<td style="text-align:left">0…*</td>
</tr>
<tr>
<td style="text-align:left">&lt;history&gt;</td>
<td style="text-align:left">一个伪状态机，记录了上转移出此状态机的子孙状态</td>
<td style="text-align:left">0…*</td>
</tr>
<tr>
<td style="text-align:left">&lt;datamodel&gt;</td>
<td style="text-align:left">定义了部分或者所有的数据模型</td>
<td style="text-align:left">0…1</td>
</tr>
<tr>
<td style="text-align:left">&lt;invoke&gt;</td>
<td style="text-align:left">调用一个外部服务</td>
<td style="text-align:left">0…*</td>
</tr>
</tbody>
</table>
<h2 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h2><p>[这部分是规范的]<br>states 之间的Transition是有 事件（Events）和条件（Condition）触发的。在Transition中可以包含可执行内容（executable content），当转移发生的时候这些可执行内容将会执行。</p>
<h3 id="属性-3"><a href="#属性-3" class="headerlink" title="属性"></a>属性</h3><table>
<thead>
<tr>
<th style="text-align:left">名字</th>
<th style="text-align:left">必须</th>
<th style="text-align:left">约束</th>
<th style="text-align:left">类型</th>
<th style="text-align:left">默认值</th>
<th style="text-align:left">有效值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">event</td>
<td style="text-align:left">False</td>
<td style="text-align:left"></td>
<td style="text-align:left">EventTypes.datatype</td>
<td style="text-align:left">None</td>
<td style="text-align:left">一个使用”.”分割符指定的字符串</td>
<td style="text-align:left">触发这个转移的事件</td>
</tr>
<tr>
<td style="text-align:left">cond</td>
<td style="text-align:left">False</td>
<td style="text-align:left"></td>
<td style="text-align:left">Boolean表达式</td>
<td style="text-align:left">True</td>
<td style="text-align:left">任何boolean表达式</td>
<td style="text-align:left">转移的守护条件</td>
</tr>
<tr>
<td style="text-align:left">target</td>
<td style="text-align:left">False</td>
<td style="text-align:left"></td>
<td style="text-align:left">ID引用</td>
<td style="text-align:left">None</td>
<td style="text-align:left"></td>
<td style="text-align:left">转向的状态或者并行状态的标识符</td>
</tr>
<tr>
<td style="text-align:left">type</td>
<td style="text-align:left">False</td>
<td style="text-align:left"></td>
<td style="text-align:left">Enum</td>
<td style="text-align:left">external</td>
<td style="text-align:left">“internal”,”external”</td>
<td style="text-align:left">当目标状态是子孙状态的时候,决定是否源状态要不要退出再重新进入</td>
</tr>
</tbody>
</table>
<h3 id="孩子元素-3"><a href="#孩子元素-3" class="headerlink" title="孩子元素"></a>孩子元素</h3><p>可执行内容都可以作为孩子元素，</p>
<h3 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h3><p>一份结构良好的SCXML文档必须至少指定 ‘event’ ,’cond’ 或者’target’中的一个。</p>
<h2 id="initial"><a href="#initial" class="headerlink" title="initial"></a>initial</h2><p>[这部分是规范的]  </p>
<p>这个元素表示一个复合状态默认的初始化状态</p>
<h3 id="属性-4"><a href="#属性-4" class="headerlink" title="属性"></a>属性</h3><p>本元素没有属性</p>
<h3 id="孩子元素-4"><a href="#孩子元素-4" class="headerlink" title="孩子元素"></a>孩子元素</h3><table>
<thead>
<tr>
<th style="text-align:left">名字名字</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">出现次数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&lt;transition&gt;</td>
<td style="text-align:left">定义了一个转移，这个转移不能指定cond和event属性，但是必须指定一个非空的有效的target属性，属性值必须是当前容器状态的子孙状态.可以包含可执行内容</td>
<td style="text-align:left">1</td>
</tr>
</tbody>
</table>
<h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>[这部分是规范的]<br>这个元素表示&lt;scxml&gt;或者复合状态中的最终状态</p>
<h3 id="属性-5"><a href="#属性-5" class="headerlink" title="属性"></a>属性</h3><table>
<thead>
<tr>
<th style="text-align:left">名字</th>
<th style="text-align:left">必须</th>
<th style="text-align:left">约束</th>
<th style="text-align:left">类型</th>
<th style="text-align:left">默认值</th>
<th style="text-align:left">有效值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">id</td>
<td style="text-align:left">False</td>
<td style="text-align:left"></td>
<td style="text-align:left">Id</td>
<td style="text-align:left">None</td>
<td style="text-align:left">一个有效的id值</td>
<td style="text-align:left">状态的标识符</td>
</tr>
</tbody>
</table>
<h3 id="孩子元素-5"><a href="#孩子元素-5" class="headerlink" title="孩子元素"></a>孩子元素</h3><table>
<thead>
<tr>
<th style="text-align:left">名字名字</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">出现次数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&lt;onentry&gt;</td>
<td style="text-align:left">可选的元素，用来呈现进入这个状态时可执行内容</td>
<td style="text-align:left">0…*</td>
</tr>
<tr>
<td style="text-align:left">&lt;onexit&gt;</td>
<td style="text-align:left">可选的元素，用来呈现退出这个状态时可执行内容</td>
<td style="text-align:left">0…*(个人觉得&lt;scxml&gt;节点下的&lt;final&gt;元素不应该有&lt;onexit&gt;)孩子节点</td>
</tr>
<tr>
<td style="text-align:left">&lt;donedata&gt;</td>
<td style="text-align:left">指定数据被包含在done.state.id 或者 done.invoke.id 事件里面</td>
</tr>
</tbody>
</table>
<h3 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h3><p>当状态机进入一个&lt;state&gt;元素的&lt;final&gt;孩子节点的时候，SCXML Processor在完成了&lt;onentry&gt;元素中可执行内容之后 必须生成一个done.state.id事件，id是父亲状态的id值。然后，如果父状态是一个&lt;parallel&gt;的孩子元素，并且所有的&lt;parallel&gt;的孩子都进入了&lt;final&gt;状态，Processor必须生成一个done.state.id 事件，id是&lt;parallel&gt;元素的id值。</p>
<p>当状态机达到了&lt;scxml&gt;元素的&lt;final&gt;孩子时候，状态机必须终止。如果当前的SCXML状态机（以后简称SCXML session 会话）是被另外一个状态机（Session）的&lt;invoke&gt;元素触发的。当当前session终止的时候，SCXML Processor 必须生成一个done.invoke.id 事件，并且返回这个事件给调用的那个session, id的值是一个唯一的标识符。</p>
<h2 id="onentry"><a href="#onentry" class="headerlink" title="onentry"></a>onentry</h2><p>[这部分是规范的]<br>一个包含可执行内容的元素，当进入某一个状态的时候，&lt;onentry&gt;内的内容被执行</p>
<h3 id="属性-6"><a href="#属性-6" class="headerlink" title="属性"></a>属性</h3><p>没有属性|</p>
<h3 id="孩子元素-6"><a href="#孩子元素-6" class="headerlink" title="孩子元素"></a>孩子元素</h3><p>可执行内容都可以在这里定义</p>
<h3 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h3><p>SCXML Processor 必须按文档中定义的顺序，执行&lt;onentry&gt;元素和元素内的内容。</p>
<h2 id="onexit"><a href="#onexit" class="headerlink" title="onexit"></a>onexit</h2><p>[这部分是规范的]<br>一个包含可执行内容的元素，当退出某一个状态的时候，&lt;onexit&gt;内的内容被执行</p>
<h3 id="属性-7"><a href="#属性-7" class="headerlink" title="属性"></a>属性</h3><p>没有属性|</p>
<h3 id="孩子元素-7"><a href="#孩子元素-7" class="headerlink" title="孩子元素"></a>孩子元素</h3><p>可执行内容都可以在这里定义</p>
<h3 id="说明-5"><a href="#说明-5" class="headerlink" title="说明"></a>说明</h3><p>SCXML Processor 必须按文档中定义的顺序，执行&lt;onexit&gt;元素和元素内的内容。</p>
<h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><p>[这部分是规范的]<br>&lt;history&gt;伪状态允许一个状态机记住它的状态配置。如果一个转移使用&lt;history&gt;状态作为它的目标状态，将会返回状态机记录到的状态配置。伪状态知识参考uml状态图</p>
<h3 id="属性-8"><a href="#属性-8" class="headerlink" title="属性"></a>属性</h3><table>
<thead>
<tr>
<th style="text-align:left">名字</th>
<th style="text-align:left">必须</th>
<th style="text-align:left">约束</th>
<th style="text-align:left">类型</th>
<th style="text-align:left">默认值</th>
<th style="text-align:left">有效值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">id</td>
<td style="text-align:left">False</td>
<td style="text-align:left"></td>
<td style="text-align:left">Id</td>
<td style="text-align:left">None</td>
<td style="text-align:left">一个有效的id值</td>
<td style="text-align:left">这个伪状态的标识符</td>
</tr>
<tr>
<td style="text-align:left">type</td>
<td style="text-align:left">False</td>
<td style="text-align:left"></td>
<td style="text-align:left">Enum</td>
<td style="text-align:left">“shallow”</td>
<td style="text-align:left">“deep”,”shallow”</td>
<td style="text-align:left">决定了究竟是当前状态的活跃的原子状态还是，当前状态向内一层的活跃的子状态被记录</td>
</tr>
</tbody>
</table>
<h3 id="孩子元素-8"><a href="#孩子元素-8" class="headerlink" title="孩子元素"></a>孩子元素</h3><table>
<thead>
<tr>
<th style="text-align:left">名字名字</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">出现次数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&lt;transition&gt;</td>
<td style="text-align:left">转移的目标指定了默认的历史配置。</td>
<td style="text-align:left">1</td>
</tr>
</tbody>
</table>
<h3 id="说明-6"><a href="#说明-6" class="headerlink" title="说明"></a>说明</h3><p>在一份结构良好的SCXML文档中，这个转移不能包含cond和event属性，但是必须包含一个非空的target属性，这个值构成了一个有效的状态配置。</p>
<h2 id="合法的状态配置"><a href="#合法的状态配置" class="headerlink" title="合法的状态配置"></a>合法的状态配置</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>定义4：一个&lt;state&gt;或者&lt;parallel&gt;元素是active：如果它已经通过一个转移进入了这个元素，并且没有退出。<br>定义5：状态机的状态配置是一个当前 active 状态的集合</p>
<h3 id="说明-7"><a href="#说明-7" class="headerlink" title="说明"></a>说明</h3><p>一个SCXML文档，初始化的时候初始化一个状态机配置（通过initial属性或者&lt;scxml&gt;里面的&lt;initial&gt;元素），此后状态机的每一个转移都将导致状态机进入另一个状态配置（不需要和前一个有区别）。一个结构良好的scxml文档必须将状态机置于一个合法的状态配置下，一个合法的状态配置满足下面的条件：<br>1 配置明确的只包含一个&lt;scxml&gt;的元素<br>2 配置包含0到多个原子状态<br>3 当当前配置包含一个原子状态，当前配置必须包含这个原子状态所有的&lt;state&gt;&gt;&lt;parallel&gt;祖先<br>4 当配置包含一个非原子的&lt;state&gt; ，配置必须包含&lt;state&gt;的一个，仅且一个孩子。<br>如果配置包含&lt;parallel&gt;状态，配置必须包含所有的孩子。</p>
<p>如果一个尊从上面定义的状态机有超过一个原子状态，那么任何一个原子状态都能通过他们的父亲和祖先&lt;state&gt;或者&lt;parallel&gt; 回溯到同一个&lt;parallel&gt;祖先</p>
<p>一个转移的“target”属性或者initial属性要么是空，要么指定的状态是一个合法的状态配置。</p>
<h2 id="SCXML-Events"><a href="#SCXML-Events" class="headerlink" title="SCXML Events"></a>SCXML Events</h2><p>[这部分是规范的]<br>Events是SCXML中的一个基础概念，他们驱动了转移。事件的内部结构是由实现指定的，只要如下的外部接口是可见的<br>1、    SCXML Processor 必须使数据在一个事件中可以通过“_event”变量访问<br>2、    SCXML Processor 必须使事件名字可以通过“_event”变量访问。SCXML Processor必须使用相同的名字值匹配转移的event属性<br>在很多情况下，事件是在SCXML会话执行过程中产生的，我们可以通过&lt;raise&gt;和&lt;send&gt;元素来控制。有一些事件是必须要产生的，或者解释器自动生成的。实现者可以通过添加后缀的方法来扩展这些自动生成的事件名字。例如，一个平台可以扩展done.state.id 用一个时间戳作为后缀done.state.id.timestamp，任何匹配这个事件的转移都将转移。</p>
<h3 id="事件描述符"><a href="#事件描述符" class="headerlink" title="事件描述符"></a>事件描述符</h3><p>像一个事件名字一样，一个事件描述符是一系列通过“.”分割的的字母数字符号。一个转移的事件属性，可以同包含一个或多个这样的事件描述符，通过空格隔开</p>
<h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><p>定义6：一个转移匹配一个事件，至少一个事件描述符和事件的名字匹配<br>定义7：一个事件描述符匹配事件属性的名字，如果事件属性能够和描述符完全匹配或者，时间名能够匹配上事件描述符的每一个”.”之前的部分。</p>
<p>例如，一个转移的事件属性event=” error foo”，将会匹配事件名”error”,”error.send”,”error.send.failed”,或者“foo”,”foo.bar”等，但是不能匹配“errors.my.custom”,”errorhandler.mistake”,”error.send”,”foobar”等（仔细体会一下吧）。为了更好的阅读SCXML文档，一个evnet属性可以这样写event=”error”,或者event=”error.”,或者event=”error.*”来匹配任意满足这个前缀的事件。这种事件匹配机制和没有事件属性指定的转移有一点不同：没有事件属性指定的转移，不会匹配任何事件，只要cond属性为真就转移，每当第一次进入一个状态的时候，SCXML Processor应该先寻找这样没有任何事件属性的转移来进行判断。</p>
<h3 id="错误（Errors）"><a href="#错误（Errors）" class="headerlink" title="错误（Errors）"></a>错误（Errors）</h3><p>一旦一个SCXML Processor开始执行一个形式良好的SCXML文档，它必须将过程中任何内部错误以事件“error.”作为前缀抛出。Processor必须将这个事件放入到内部事件队列像处理其他事件一样处理它。（如果队列里面还有其他事件，这个error事件不会立即被处理，并且如果在当前状态下没有转移匹配这个事件，这个错误事件将会被忽略）。这里定义了两个error事件：“error.communication” 和”error.execution”.前者覆盖了当试图与外部实体进行通信的时候发生的错误，例如&lt;send&gt;和&lt;invoke&gt;里面的错误；后者定义了当前Session内部执行中的错误，例如表达式解析错误等。</p>
<p>这一些列的error事件，将来可能会被扩展。然而，这些以“error.platform”开头的名字将被保留作为平台实现者定义平台和应用相关的错误。因此，平台或者应用可以通过两种方式来扩展这些错误：在事件名上添加一个后缀，或者使用“error.platform”添加一个后缀。另外，平台还可添加额外的错误信息在event的“data”变量里面。</p>
<p>Xml文件编写者可以通过创建一个带有event=“error”的属性的转移，并且目标是顶层的final 状态，这样可以使程序一旦发生错误就终止。如果这样的一个转移T被放置在状态S里面，如果S或者S的任何子状态有任何其他转移t（t是被放置在S的子状态中，或者S中T转移的文档顺序之前）未处理的错误，转移T将会导致状态机终止。</p>
<h3 id="错误和事件列表"><a href="#错误和事件列表" class="headerlink" title="错误和事件列表"></a>错误和事件列表</h3><table>
<thead>
<tr>
<th style="text-align:left">名字</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">定义在</th>
<th style="text-align:left">参考</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">done.state.id</td>
<td style="text-align:left">表明状态机已经进入一个某一个复合状态（id）的final子状态中</td>
<td style="text-align:left">&lt;final&gt;</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">done.invoke.id</td>
<td style="text-align:left">表明被&lt;invoke id=””&gt;元素调用的过程已经结束了</td>
<td style="text-align:left">&lt;invoke&gt;</td>
<td style="text-align:left">&lt;final&gt;退出解释器程序，SCXML解释器的算法</td>
</tr>
<tr>
<td style="text-align:left">error.communication</td>
<td style="text-align:left">表明当试图和一个外部实体通信的时候，有错误发生</td>
<td style="text-align:left"></td>
<td style="text-align:left">&lt;send&gt; ,SCXML的Event I/O Processor</td>
</tr>
<tr>
<td style="text-align:left">error.execute</td>
<td style="text-align:left">表明状态机已经进入一个某一个复合状态（id）的final子状态中</td>
<td style="text-align:left"></td>
<td style="text-align:left">&lt;foreach&gt;&lt;assign&gt;&lt;param&gt;条件表达式，位置表达式，合法的数据值和数据表达式，表达式错误，系统变量</td>
</tr>
<tr>
<td style="text-align:left">error.platform</td>
<td style="text-align:left">表明一个平台或者应用相关的错误发生了</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<h2 id="选择和执行转移"><a href="#选择和执行转移" class="headerlink" title="选择和执行转移"></a>选择和执行转移</h2><p>为了简化下面的定义，我们介绍一个事件：NULL.NULL没有名字，被使用在这些定义里面。它从不进入到事件队列里面，所有的有名字的时间和NULL是截然不同的。（事实上，NULL是一个伪事件，只是被用来在这些定义里面作为一个无事件转移的触发器）。</p>
<p>定义8：在一个原子状态S中的一个具有event属性(“event=E”)的转移T是enabled,  </p>
<ul>
<li>A、    如果T的源状态是S或者S的一个祖先</li>
<li>B、    如果T 匹配E的名字</li>
<li>C、    T缺少一个cond属性，或者cond属性为真  </li>
</ul>
<p>在一个原子状态S中一个转移（NULL事件）是enabled  </p>
<ul>
<li>A、    T缺少一个event 属性</li>
<li>B、    如果T的源状态是S或者S的一个祖先</li>
<li>C、    T缺少一个cond属性，或者cond属性为真</li>
</ul>
<p>定义9：一个转移的源状态是&lt;state&gt;或者&lt;parallel&gt;元素，有效的目标状态是是一个或者一些通过target属性指定的状态，任何history状态将会被系统存储的状态配置或者默认配置替代。一个转移完整的目标集是由所有转移发生后的active状态构成的。这个目标集包含这个转移有效的目标状态，和这些状态的所有祖先。可以通过递归来扩展这些应用程序：</p>
<ol>
<li><p>如果任何&lt;parallel&gt;元素是这个结合中的一个元素，如果它的任何孩子没有包含在这个集合里面，那么必须添加进去。</p>
</li>
<li><p>如果任何组合&lt;state&gt;是这个结合中的一个元素，如果它没有孩子在这个结合中，那么它的默认转移将被添加到集合<br>定义：在配置C中一个转移的退出的集合是一个状态的集合（当状态机在配置C当中的时候，当转移发生的时候，将发生退出动作的状态）如果转移没有指定target属性，退出集是空的。如果转移指定了target属性，并且type属性是“external”,它的退出集合就是配置C中的所有活跃状态（这些活跃状态是源状态和目标状态最近的公共的祖先（least common compound ancestor））。如果转移的类型是”internal”，但是源状态不是compound复合状态，或者目标状态不是合适的源状态的子孙状态，这个转移的退出集就和type=”external”一样。多个转移的退出集是每个转移退出集的并集（U）</p>
</li>
</ol>
<p>定义10：在配置C中一个转移的进入集合是一个状态的集合（当转移发生的的时候，这些状态将进入）。如果一个转移没有包含一个target属性，他的进入集合就是空的。进入集合由转移的完成目标集合</p>
<p>定义11：原子状态S下面的一个转移T（event=”E”）是最优的enabled的转移满足下面3个条件  </p>
<ol>
<li>T是S中的转移，是通过E达到enabled</li>
<li>文档顺序中没有转移优先于T能处理E事件</li>
<li>在S中没有转移是通过E事件enabled，或者任何T的源状态所在的子孙状态能处理E事件</li>
</ol>
<p>定义11：在配置C中两个转移T1和T2 冲突了，如果他们的退出集合的交集是非空的<br>例如，如果两个转移是冲突的，这两个转移都发生将导致非配的配置，因此，只有一个转移可以安全的执行。为了解决这个冲突，我们提出了优先级的概念。如果T1和T2冲突，T1是位于原子状态S1中的，T2是处于原子状态S2中的，S1和S2都是active的。满足以下条件之一我们说T1的优先级比T2高：</p>
<ol>
<li>T1的源状态是T2源状态的子孙</li>
<li>S1 在文档中的位置是在T2前面</li>
</ol>
<p>定义12：一个microstep 由位于optimal enabled 转移集合中的转移的执行组成</p>
<p>定义13：一个microstep是一系列一个或者多个mircrostep，达到的最终效果是：内部事件队列是空的，没有转移是通过NULL enabled。</p>
<p>执行一个microstep，SCXML Processor必须执行所对应的optimal enabled 转移集合里面的转移。为了执行这些转移，SCXML Processor必须首先以某一种退出顺序退出这些转移退出集合里面的所有状态。它必须以文档先后顺序执行包含在转移里面的可执行内容，接下来它必须以进入顺序进入这些转移的进入集合。</p>
<p>为了退出一个状态，SCXML Processor必须执行&lt;onexit&gt;里面的可执行内容。它必须取消掉在本状态中触发的的还处于进行中的invocation。最终Processor必须从active state list<br>移除这个状态.<br>为了进入一个状态，SCXML Processor必须将这个状态添加到active list。然后执行&lt;onentry&gt;里面的内容。如果状态是一个复合状态有一个&lt;initial&gt;孩子，SCXML Processor必须执行&lt;initial&gt;里面转移的可执行内容。</p>
<p>在开始的时候，SCXML Processor必须将状态机放入到一个通过initial属性指定的配置环境中。</p>
<p>在进入了初始化配置之后，在执行了每一个microstep之后，SCXML Processor必须检查在这个microstep中状态配置是否进入了&lt;final&gt;状态。如果进入了&lt;scxml&gt;元素的&lt;final&gt;状态，那么状态机停机。如果进入了某一个复合状态的&lt;final&gt;那么生成一个done.state.id时间，id是复合状态的id值。如果复合状态本身是一个&lt;parallel&gt;元素的孩子，并且&lt;parallel&gt;元素的其他孩子都进入了&lt;final&gt;状态，Processor必须根生一个done.state.id事件，id是&lt;parallel&gt;元素的id</p>
<p>在检查完配置之后，Processor必须选择当前配置下通过NULL enabled的optimal 转移集合。如果集合不是空的，执行下一个microstep.如果集合是空的，Processor必须从internal event queue移除所有事件，直到queue是空的，并且在当前配置下它找到了一个event，这个事件enabled一个非空的optimal转移集合，然后Processor必须执行这样一个mircrostep。</p>
<p>在完成一个microstep之后，SCXML Processor必须按照文档顺序执行各个状态下&lt;invoke&gt;里面的内容。然后Processor必须移除事件从external event queue，等待需要的生成生成，然后找到一个enables 非空的转移集合。然后Processor像microstep一样执行这个集合。</p>
<h2 id="IDS"><a href="#IDS" class="headerlink" title="IDS"></a>IDS</h2><p>在一个良好的SCXML 文档里面，每一个id属性的值在某一个session会话里面必须是唯一的。当这样的一个属性被定义成optional的时候，并且你忽略了这个id。SCXML processor会在文档加载的时候自动生成一个唯一的id值（除了&lt;send&gt;和&lt;invok&gt;元素）（注意：这样生成一个一个id不能够在文档其他地方被引用，因为你不知道它的值是多少，特别是如果一个状态的id是自动生成的，那么这个状态不能作为任何转移的目标）。&lt;send&gt;和&lt;invoke&gt;的id属性有一点不同，当作者没有指定这两个元素的id的时候，系统不会在加载文档的时候生成这两个元素的id，而是每次这两个元素执行的生成生成id.而且idlocation属性能够捕捉到这个自动生成的id。&lt;invoke&gt;标签自动生成的id有一个特殊的形式，参见后面的&lt;invoke&gt;标签。SCXML Processor可以生成所有其他的id以任何的形式，只要是唯一的。</p>
<h1 id="可执行内容"><a href="#可执行内容" class="headerlink" title="可执行内容"></a>可执行内容</h1><p>可执行内容允许状态机to do things. 它提供了hooks ，允许一个SCXML session去修改它的数据模型和与外部实体交互。可执行内容由一系列actions组成。特别的，可执行内容，发生在&lt;onentry&gt;和&lt;onexit&gt;元素内，或者&lt;transition&gt;内。一个状态内部的这三个元素的执行顺序是如果退出了当前状态：&lt;onentry&gt;&lt;onexit&gt;&lt;transition&gt;，：如果没有退出当前状态&lt;onentry&gt;,&lt;transition1&gt;,&lt;transition2&gt;,&lt;transition3&gt;,&lt;onexit&gt;,&lt;transition4&gt;</p>
<p>可执行内容，有如下的元素：<br>&lt;raise&gt;,&lt;send&gt;,&lt;log&gt;,&lt;script&gt;,&lt;assign&gt;,&lt;if&gt;,&lt;foreach&gt;<br>另外SCXML的实现者可以自由扩展有哪些可执行内容。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Apache Commons-SCXML系列之请假流程]]></title>
      <url>http://thinerzq.com/2016/02/01/Apache%20Commons/Apache-Commons-SCXML%E7%B3%BB%E5%88%97%E4%B9%8B%E8%AF%B7%E5%81%87%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>首先分析自己的业务逻辑，画好状态图</p>
<h1 id="请假流程状态图"><a href="#请假流程状态图" class="headerlink" title="请假流程状态图"></a>请假流程状态图</h1><a id="more"></a>
<p><img src="http://img.blog.csdn.net/20151202150236801" alt="请假流程状态图，画图工具EA"></p>
<h1 id="根据状态图编写xml文件"><a href="#根据状态图编写xml文件" class="headerlink" title="根据状态图编写xml文件"></a>根据状态图编写xml文件</h1><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0"?&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">scxml</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2005/07/scxml"</span></span></div><div class="line">       <span class="attr">version</span>=<span class="string">"1.0"</span></div><div class="line">       <span class="attr">datamodel</span>=<span class="string">"jexl"</span></div><div class="line">       <span class="attr">initial</span>=<span class="string">"filling"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 请假单需要的数据--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">datamodel</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">id</span>=<span class="string">"applicant"</span> <span class="attr">expr</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">id</span>=<span class="string">"reason"</span> <span class="attr">expr</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">id</span>=<span class="string">"from"</span> <span class="attr">expr</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">id</span>=<span class="string">"to"</span> <span class="attr">expr</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">id</span>=<span class="string">"departmentApprove"</span> <span class="attr">expr</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">id</span>=<span class="string">"personnelApprove"</span> <span class="attr">expr</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">datamodel</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">state</span> <span class="attr">id</span>=<span class="string">"filling"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">onentry</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">onentry</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--当填写完了表单，将外界的数据通过,系统变量_event.data传进来，data其实是一个map--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">event</span>=<span class="string">"fill.end"</span> <span class="attr">target</span>=<span class="string">"approving"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">assign</span> <span class="attr">location</span>=<span class="string">"applicant"</span> <span class="attr">expr</span>=<span class="string">"_event.data.name"</span>&gt;</span><span class="tag">&lt;/<span class="name">assign</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">assign</span> <span class="attr">location</span>=<span class="string">"reason"</span> <span class="attr">expr</span>=<span class="string">"_event.data.reason"</span>&gt;</span><span class="tag">&lt;/<span class="name">assign</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">assign</span> <span class="attr">location</span>=<span class="string">"from"</span> <span class="attr">expr</span>=<span class="string">"_event.data.from"</span>&gt;</span><span class="tag">&lt;/<span class="name">assign</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">assign</span> <span class="attr">location</span>=<span class="string">"to"</span> <span class="attr">expr</span>=<span class="string">"_event.data.to"</span>&gt;</span><span class="tag">&lt;/<span class="name">assign</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!--调用leaveEntity的填表函数，在这个函数里面，我们可以操作做数据持久化--&gt;</span></div><div class="line">            <span class="comment">&lt;!--个人觉得这种方式和领域驱动设计很像，欢迎和我交流--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">                leaveEntity.fillForm(applicant,reason,from,to)</div><div class="line">            <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">state</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--这是一个复合状态：一个大状太--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">state</span> <span class="attr">id</span>=<span class="string">"approving"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">initial</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">transition</span> <span class="attr">target</span>=<span class="string">"departmentApproving"</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">initial</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--部门经理审批状态--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">state</span> <span class="attr">id</span>=<span class="string">"departmentApproving"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">onentry</span>&gt;</span><span class="tag">&lt;/<span class="name">onentry</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!--如果部门经理同意，就将departmentApprove的值赋值为true，然后我们可以执行持久化的数据操作（我这里只是简单的输出）--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">transition</span> <span class="attr">event</span>=<span class="string">"approve"</span> <span class="attr">target</span>=<span class="string">"personnelApproving"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">assign</span> <span class="attr">location</span>=<span class="string">"departmentApprove"</span> <span class="attr">expr</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">assign</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">                    leaveEntity.departmentApprove(departmentApprove)</div><div class="line">                <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">state</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--人事经理审批状态--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">state</span> <span class="attr">id</span>=<span class="string">"personnelApproving"</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!--如果人事经理同意，就将personnelApprove的值赋值为true，然后我们可以执行持久化的数据操作（我这里只是简单的输出）--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">transition</span> <span class="attr">event</span>=<span class="string">"approve"</span> <span class="attr">target</span>=<span class="string">"approveEnd"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">assign</span> <span class="attr">location</span>=<span class="string">"personnelApprove"</span> <span class="attr">expr</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">assign</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">                    leaveEntity.personnelApprove(personnelApprove)</div><div class="line">                <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">state</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">final</span> <span class="attr">id</span>=<span class="string">"approveEnd"</span>&gt;</span><span class="tag">&lt;/<span class="name">final</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!--这个转移的事件“event.state.approving”是当当前复合状态到达 &lt;final&gt; 节点的时候框架自动生成的。--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">event</span>=<span class="string">"done.state.approving"</span> <span class="attr">target</span>=<span class="string">"approved"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!--这个转移事件，是只要任何一个经理拒绝了请求，就转向被拒绝状态--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">event</span>=<span class="string">"reject"</span> <span class="attr">target</span>=<span class="string">"rejected"</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">state</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--已同意状态，进入状态的时候，可以发送邮件给相应的用户--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">state</span> <span class="attr">id</span>=<span class="string">"approved"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">onentry</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">                leaveEntity.sendEmail()</div><div class="line">            <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">onentry</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--一个eventless（自动转移），执行完了&lt;onentry&gt;里面的事件就转移了--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">target</span>=<span class="string">"archiving"</span> &gt;</span><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">state</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--被拒绝状态，进入状态的时候，可以发送邮件给相应的用户--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">state</span> <span class="attr">id</span>=<span class="string">"rejected"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">onentry</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">                leaveEntity.sendEmail()</div><div class="line">            <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">onentry</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--申请者选择继续修改申请信息的时候的转移，--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">event</span>=<span class="string">"goFilling"</span> <span class="attr">target</span>=<span class="string">"filling"</span>&gt;</span><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--申请者可以取消本次请假--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">event</span>=<span class="string">"goEnd"</span> <span class="attr">target</span>=<span class="string">"archiving"</span>&gt;</span><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">state</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--归档状态，进入的时候直接归档--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">state</span> <span class="attr">id</span>=<span class="string">"archiving"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">onentry</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">                leaveEntity.archive()</div><div class="line">            <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">onentry</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">target</span>=<span class="string">"end"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">state</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--结束状态--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">final</span> <span class="attr">id</span>=<span class="string">"end"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">final</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">scxml</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="编写程序、控制状态变化"><a href="#编写程序、控制状态变化" class="headerlink" title="编写程序、控制状态变化"></a>编写程序、控制状态变化</h1><p><code>LeaveEntity.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> leave;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeaveEntity</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> String appliant;</div><div class="line">    <span class="keyword">private</span> String reason;</div><div class="line">    <span class="keyword">private</span> String from ;</div><div class="line">    <span class="keyword">private</span> String to;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> departmentApprove;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> personnelApprove;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fillForm</span><span class="params">(String name,String reason,String from,String to)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.appliant = name;</div><div class="line">        <span class="keyword">this</span>.reason = reason;</div><div class="line">        <span class="keyword">this</span>.from=from;</div><div class="line">        <span class="keyword">this</span>.to= to;</div><div class="line">        System.out.println(<span class="string">"请假人："</span>+appliant);</div><div class="line">        System.out.println(<span class="string">"请假原因："</span>+reason);</div><div class="line">        System.out.println(<span class="string">"开始时间："</span>+from);</div><div class="line">        System.out.println(<span class="string">"结束时间："</span>+to);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">departmentApprove</span><span class="params">(<span class="keyword">boolean</span> b)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.departmentApprove = b;</div><div class="line">        System.out.println(<span class="string">"部门经理同意"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">personnelApprove</span><span class="params">(<span class="keyword">boolean</span> b)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.personnelApprove =b;</div><div class="line">        System.out.println(<span class="string">"人事经理同意"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (departmentApprove &amp;&amp; personnelApprove)&#123;</div><div class="line">            System.out.println(appliant+<span class="string">":你好，你的请假已经通过了"</span>);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            System.out.println(appliant+<span class="string">":你好，你的请假没有通过，请重新填写"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">archive</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"开始归档"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>LeaveFrame.java</code><br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">package</span> leave;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.scxml2.Context;</div><div class="line"><span class="keyword">import</span> org.apache.commons.scxml2.Evaluator;</div><div class="line"><span class="keyword">import</span> org.apache.commons.scxml2.SCXMLExecutor;</div><div class="line"><span class="keyword">import</span> org.apache.commons.scxml2.TriggerEvent;</div><div class="line"><span class="keyword">import</span> org.apache.commons.scxml2.env.SimpleErrorReporter;</div><div class="line"><span class="keyword">import</span> org.apache.commons.scxml2.env.jexl.JexlEvaluator;</div><div class="line"><span class="keyword">import</span> org.apache.commons.scxml2.io.SCXMLReader;</div><div class="line"><span class="keyword">import</span> org.apache.commons.scxml2.model.ModelException;</div><div class="line"><span class="keyword">import</span> org.apache.commons.scxml2.model.SCXML;</div><div class="line"><span class="keyword">import</span> javax.swing.*;</div><div class="line"><span class="keyword">import</span> java.awt.*;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</div><div class="line"><span class="keyword">import</span> java.net.URL;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeaveFrame</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">private</span> JLabel applicant;</div><div class="line"><span class="keyword">private</span> JLabel reason;</div><div class="line"><span class="keyword">private</span> JLabel from;</div><div class="line"><span class="keyword">private</span> JLabel to;</div><div class="line"></div><div class="line"><span class="keyword">private</span> JTextField nameTest;</div><div class="line"><span class="keyword">private</span> JTextField reasonTest;</div><div class="line"><span class="keyword">private</span> JTextField fromTest;</div><div class="line"><span class="keyword">private</span> JTextField toTest;</div><div class="line"></div><div class="line"><span class="keyword">private</span> JButton submit;</div><div class="line"><span class="keyword">private</span> JButton departmentApprove;</div><div class="line"><span class="keyword">private</span> JButton personeelApprove;</div><div class="line"><span class="keyword">private</span> JButton reject;</div><div class="line"><span class="keyword">private</span> JButton continueFill;</div><div class="line"><span class="keyword">private</span> JButton archive;</div><div class="line"><span class="keyword">private</span> JButton start;</div><div class="line"></div><div class="line"><span class="keyword">private</span> SCXMLExecutor executor=<span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LeaveFrame</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(<span class="string">"SCXML Leave"</span>);</div><div class="line">    initUI();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">new</span> LeaveFrame();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initWorkflow</span><span class="params">()</span>  </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> URL leaveApprovel = <span class="keyword">this</span>.getClass().getResource(<span class="string">"leaveApprove1.xml"</span>);</div><div class="line"></div><div class="line">    Evaluator evaluator = <span class="keyword">new</span> JexlEvaluator();</div><div class="line"></div><div class="line"></div><div class="line">    executor = <span class="keyword">new</span> SCXMLExecutor(evaluator, <span class="keyword">null</span>, <span class="keyword">new</span> SimpleErrorReporter());</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">        SCXML scxml = SCXMLReader.read(leaveApprovel);</div><div class="line"></div><div class="line"></div><div class="line">        executor.setStateMachine(scxml);</div><div class="line"></div><div class="line"></div><div class="line">        Context rootContext = evaluator.newContext(<span class="keyword">null</span>);</div><div class="line">        LeaveEntity leaveEntity = <span class="keyword">new</span> LeaveEntity();</div><div class="line">        rootContext.set(<span class="string">"leaveEntity"</span>, leaveEntity);</div><div class="line">        executor.setRootContext(rootContext);</div><div class="line"></div><div class="line"></div><div class="line">        executor.go();</div><div class="line"></div><div class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    System.out.println(executor.getGlobalContext().getSystemContext().get(<span class="string">"_sessionid"</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent event)</span> </span>&#123;</div><div class="line">    String command = event.getActionCommand();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="string">"submit"</span>.equals(command)) &#123;</div><div class="line"></div><div class="line">            setEnabledAndDisabled(<span class="keyword">new</span> JComponent[]&#123;reject,departmentApprove&#125;, <span class="keyword">new</span> JComponent[]&#123;submit&#125;);</div><div class="line"></div><div class="line"></div><div class="line">            Map&lt;String, String&gt; payloadData = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">            payloadData.put(<span class="string">"name"</span>,nameTest.getText());</div><div class="line">            payloadData.put(<span class="string">"reason"</span>,reasonTest.getText());</div><div class="line">            payloadData.put(<span class="string">"from"</span>, fromTest.getText());</div><div class="line">            payloadData.put(<span class="string">"to"</span>, toTest.getText());</div><div class="line"></div><div class="line">            executor.triggerEvent(<span class="keyword">new</span> TriggerEvent(<span class="string">"fill.end"</span>, TriggerEvent.SIGNAL_EVENT,payloadData));</div><div class="line"></div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"departmentApprove"</span>.equals(command))&#123;</div><div class="line"></div><div class="line"></div><div class="line">            setEnabledAndDisabled(<span class="keyword">new</span> JComponent[]&#123;personeelApprove&#125;, <span class="keyword">new</span> JComponent[]&#123;departmentApprove&#125;);</div><div class="line"></div><div class="line">            executor.triggerEvent(<span class="keyword">new</span> TriggerEvent(<span class="string">"approve"</span>, TriggerEvent.SIGNAL_EVENT));</div><div class="line"></div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"personeelApprove"</span>.equals(command))&#123;</div><div class="line"></div><div class="line">            setEnabledAndDisabled(<span class="keyword">new</span> JComponent[]&#123;&#125;, <span class="keyword">new</span> JComponent[]&#123;personeelApprove,reject,departmentApprove&#125;);</div><div class="line">            executor.triggerEvent(<span class="keyword">new</span> TriggerEvent(<span class="string">"approve"</span>, TriggerEvent.SIGNAL_EVENT));</div><div class="line"></div><div class="line"></div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"reject"</span>.equals(command))&#123;</div><div class="line"></div><div class="line">            setEnabledAndDisabled(<span class="keyword">new</span> JComponent[]&#123;continueFill,archive&#125;, <span class="keyword">new</span> JComponent[]&#123;submit,personeelApprove,reject,departmentApprove&#125;);</div><div class="line"></div><div class="line">            executor.triggerEvent(<span class="keyword">new</span> TriggerEvent(<span class="string">"reject"</span>, TriggerEvent.SIGNAL_EVENT));</div><div class="line"></div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"continueFill"</span>.equals(command))&#123;</div><div class="line"></div><div class="line">            setEnabledAndDisabled(<span class="keyword">new</span> JComponent[]&#123;submit&#125;, <span class="keyword">new</span> JComponent[]&#123;departmentApprove, personeelApprove, reject, continueFill, archive&#125;);</div><div class="line"></div><div class="line">            executor.triggerEvent(<span class="keyword">new</span> TriggerEvent(<span class="string">"goFilling"</span>, TriggerEvent.SIGNAL_EVENT));</div><div class="line"></div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"archive"</span>.equals(command))&#123;</div><div class="line"></div><div class="line"></div><div class="line">            setEnabledAndDisabled(<span class="keyword">new</span> JComponent[]&#123;&#125;, <span class="keyword">new</span> JComponent[]&#123;departmentApprove, personeelApprove, reject, continueFill, archive, submit&#125;);</div><div class="line">            executor.triggerEvent(<span class="keyword">new</span> TriggerEvent(<span class="string">"goEnd"</span>, TriggerEvent.SIGNAL_EVENT));</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"start"</span>.equals(command))&#123;</div><div class="line"></div><div class="line">            setEnabledAndDisabled(<span class="keyword">new</span> JComponent[]&#123;submit&#125;, <span class="keyword">new</span> JComponent[]&#123;departmentApprove, personeelApprove, reject, continueFill, archive, start&#125;);</div><div class="line">            setEnabledAndDisabled(<span class="keyword">new</span> JComponent[]&#123;nameTest,reasonTest,fromTest,toTest&#125;, <span class="keyword">new</span> JComponent[]&#123;&#125;);</div><div class="line"></div><div class="line">            initWorkflow();</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (ModelException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initUI</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    JPanel mainPanel = <span class="keyword">new</span> JPanel();</div><div class="line">    mainPanel.setLayout(<span class="keyword">new</span> BorderLayout());</div><div class="line"></div><div class="line">    JPanel contentPanel = <span class="keyword">new</span> JPanel();</div><div class="line"></div><div class="line">    contentPanel.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">8</span>,<span class="number">2</span>));</div><div class="line"></div><div class="line">    applicant = <span class="keyword">new</span> JLabel(<span class="string">"申请人："</span>);</div><div class="line">    nameTest = <span class="keyword">new</span> JTextField(<span class="number">10</span>);</div><div class="line"></div><div class="line">    reason = <span class="keyword">new</span> JLabel(<span class="string">"原因："</span>);</div><div class="line">    reasonTest = <span class="keyword">new</span> JTextField(<span class="number">50</span>);</div><div class="line"></div><div class="line"></div><div class="line">    from = <span class="keyword">new</span> JLabel(<span class="string">"开始时间："</span>);</div><div class="line">    fromTest = <span class="keyword">new</span> JTextField(<span class="number">10</span>);</div><div class="line"></div><div class="line"></div><div class="line">    to = <span class="keyword">new</span> JLabel(<span class="string">"结束时间："</span>);</div><div class="line">    toTest = <span class="keyword">new</span> JTextField(<span class="number">10</span>);</div><div class="line"></div><div class="line">    start = createButton(<span class="string">"start"</span>,<span class="string">"请假"</span>);</div><div class="line">    submit = createButton(<span class="string">"submit"</span>,<span class="string">"Submit"</span>);</div><div class="line">    departmentApprove= createButton(<span class="string">"departmentApprove"</span>,<span class="string">"部门同意"</span>);</div><div class="line">    personeelApprove= createButton(<span class="string">"personeelApprove"</span>,<span class="string">"人事同意"</span>);</div><div class="line">    reject = createButton(<span class="string">"reject"</span>,<span class="string">"拒绝"</span>);</div><div class="line">    continueFill = createButton(<span class="string">"continueFill"</span>,<span class="string">"继续填写"</span>);</div><div class="line">    archive= createButton(<span class="string">"archive"</span>,<span class="string">"结束"</span>);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    setEnabledAndDisabled(<span class="keyword">new</span> JComponent[]&#123;start&#125;, <span class="keyword">new</span> JComponent[]&#123;departmentApprove, personeelApprove, reject, continueFill, archive, submit&#125;);</div><div class="line">    setEnabledAndDisabled(<span class="keyword">new</span> JComponent[]&#123;&#125;, <span class="keyword">new</span> JComponent[]&#123;nameTest, reasonTest, fromTest, toTest&#125;);</div><div class="line"></div><div class="line"></div><div class="line">    gridLayoutAdd(contentPanel,<span class="keyword">new</span> JComponent[]&#123;applicant,nameTest,reason,reasonTest,from,fromTest,to,toTest,start,submit,departmentApprove,personeelApprove,reject,continueFill,archive&#125;);</div><div class="line"></div><div class="line">    mainPanel.add(contentPanel, BorderLayout.CENTER);</div><div class="line"></div><div class="line">    setContentPane(mainPanel);</div><div class="line"></div><div class="line">    setLocation(<span class="number">200</span>, <span class="number">200</span>);</div><div class="line">    setSize(<span class="number">400</span>, <span class="number">400</span>);</div><div class="line"></div><div class="line">    setResizable(<span class="keyword">true</span>);</div><div class="line">    setVisible(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">    setDefaultCloseOperation(EXIT_ON_CLOSE);</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">gridLayoutAdd</span><span class="params">(JPanel content, JComponent[] components)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; components.length; i++) &#123;</div><div class="line">        content.add(components[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> JButton <span class="title">createButton</span><span class="params">(<span class="keyword">final</span> String command, <span class="keyword">final</span> String text)</span> </span>&#123;</div><div class="line">    JButton button = <span class="keyword">new</span> JButton(text);</div><div class="line">    button.setActionCommand(command);</div><div class="line">    button.addActionListener(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">return</span> button;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setEnabledAndDisabled</span><span class="params">(JComponent[] enabled,JComponent[] disabled)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;enabled.length;i++)&#123;</div><div class="line">        enabled[i].setEnabled(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;disabled.length;i++)&#123;</div><div class="line">        disabled[i].setEnabled(<span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h1><h2 id="首先打开程序"><a href="#首先打开程序" class="headerlink" title="首先打开程序"></a>首先打开程序</h2><p><br><br><img src="http://img.blog.csdn.net/20151203093928774" alt="这里写图片描述"><br><br></p>
<h2 id="然后点击请假，发起一个请假流程，图中的一串字符是当前会话的id。"><a href="#然后点击请假，发起一个请假流程，图中的一串字符是当前会话的id。" class="headerlink" title="然后点击请假，发起一个请假流程，图中的一串字符是当前会话的id。"></a>然后点击请假，发起一个请假流程，图中的一串字符是当前会话的id。</h2><p><br><br><img src="http://img.blog.csdn.net/20151203094017608" alt="这里写图片描述"><br><br></p>
<h2 id="一旦提交表单，就轮到部门经理审批，部门经理可以选择同意或者拒绝。"><a href="#一旦提交表单，就轮到部门经理审批，部门经理可以选择同意或者拒绝。" class="headerlink" title="一旦提交表单，就轮到部门经理审批，部门经理可以选择同意或者拒绝。"></a>一旦提交表单，就轮到部门经理审批，部门经理可以选择同意或者拒绝。</h2><p><br><br><img src="http://img.blog.csdn.net/20151203094154555" alt="这里写图片描述"><br><br></p>
<h2 id="这里先演示部门同意，接下来就该到人事经理了。"><a href="#这里先演示部门同意，接下来就该到人事经理了。" class="headerlink" title="这里先演示部门同意，接下来就该到人事经理了。"></a>这里先演示部门同意，接下来就该到人事经理了。</h2><p><br><br><img src="http://img.blog.csdn.net/20151203094308804" alt="这里写图片描述"><br><br></p>
<h2 id="这里演示人事经理拒绝，那么按照我们之前话的状态图，这时候应该到“被拒绝“状态，发起人可以更改信息，重新提交或者放弃请假。"><a href="#这里演示人事经理拒绝，那么按照我们之前话的状态图，这时候应该到“被拒绝“状态，发起人可以更改信息，重新提交或者放弃请假。" class="headerlink" title="这里演示人事经理拒绝，那么按照我们之前话的状态图，这时候应该到“被拒绝“状态，发起人可以更改信息，重新提交或者放弃请假。"></a>这里演示人事经理拒绝，那么按照我们之前话的状态图，这时候应该到“被拒绝“状态，发起人可以更改信息，重新提交或者放弃请假。</h2><p><br><br><img src="http://img.blog.csdn.net/20151203094427507" alt="这里写图片描述"></p>
<h2 id="这里假设我们继续填写，点击提交，又回到了部门经理审批，然后人事经理审批环节，假设两者都同意，然后整个流程就结束了。"><a href="#这里假设我们继续填写，点击提交，又回到了部门经理审批，然后人事经理审批环节，假设两者都同意，然后整个流程就结束了。" class="headerlink" title="这里假设我们继续填写，点击提交，又回到了部门经理审批，然后人事经理审批环节，假设两者都同意，然后整个流程就结束了。"></a>这里假设我们继续填写，点击提交，又回到了部门经理审批，然后人事经理审批环节，假设两者都同意，然后整个流程就结束了。</h2><p><br><br><img src="http://img.blog.csdn.net/20151203094613452" alt="这里写图片描述"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>用状态图只要控制好event 和condition 表达复杂的行为很方便。SCXML框架只有控制状态变化的能力，如果我们能够添加上任务分派功能，那就是一个很强大的状态机工作流了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Apache Commons-SCXML系列之秒表(StopWatch)]]></title>
      <url>http://thinerzq.com/2016/02/01/Apache%20Commons/Apache-Commons-SCXML%E7%B3%BB%E5%88%97%E4%B9%8B%E7%A7%92%E8%A1%A8-StopWatch/</url>
      <content type="html"><![CDATA[<h1 id="编程方式一"><a href="#编程方式一" class="headerlink" title="编程方式一"></a>编程方式一</h1><h2 id="画状态图"><a href="#画状态图" class="headerlink" title="画状态图"></a>画状态图</h2><p>秒表的状态图，其中秒表有：<strong>重置</strong>，<strong>运行中</strong>，<strong>已停止</strong>3个状态</p>
<a id="more"></a>
<p><img src="http://img.blog.csdn.net/20151129172008935" alt="秒表状态图"></p>
<h2 id="编写xml文件"><a href="#编写xml文件" class="headerlink" title="编写xml文件"></a>编写xml文件</h2><p>秒表状态机定义文件：<code>stopwatch1.xml</code>，xml文件分析请看后面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">scxml</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2005/07/scxml"</span> <span class="attr">version</span>=<span class="string">"1.0"</span></span></div><div class="line">       <span class="attr">initial</span>=<span class="string">"reset"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">state</span> <span class="attr">id</span>=<span class="string">"reset"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">onentry</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">                stopWatchEntity.reset()</div><div class="line">            <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">onentry</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">event</span>=<span class="string">"watch.start"</span> <span class="attr">target</span>=<span class="string">"running"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">state</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">state</span> <span class="attr">id</span>=<span class="string">"running"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">onentry</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">                stopWatchEntity.run()</div><div class="line">            <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">onentry</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">event</span>=<span class="string">"watch.stop"</span> <span class="attr">target</span>=<span class="string">"stopped"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">state</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">state</span> <span class="attr">id</span>=<span class="string">"stopped"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">onentry</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">                stopWatchEntity.stop()</div><div class="line">            <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">onentry</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">event</span>=<span class="string">"watch.start"</span> <span class="attr">target</span>=<span class="string">"running"</span> &gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">event</span>=<span class="string">"watch.reset"</span> <span class="attr">target</span>=<span class="string">"reset"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">state</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">scxml</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="编写程序控制状态转移"><a href="#编写程序控制状态转移" class="headerlink" title="编写程序控制状态转移"></a>编写程序控制状态转移</h2><p>需要操作的实体类，用来约束秒表的行为：<code>StopWatchEntity.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> stopwatch;</div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"><span class="keyword">import</span> java.util.Timer;</div><div class="line"><span class="keyword">import</span> java.util.TimerTask;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopWatchEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line">    <span class="comment">//时分秒</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hr;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> min;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sec;</div><div class="line">    <span class="comment">//100毫秒</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> fract;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Timer timer;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 重置当前状态机</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</div><div class="line">        hr = min = sec = fract = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 运行秒表</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (timer == <span class="keyword">null</span>) &#123;</div><div class="line">            timer = <span class="keyword">new</span> Timer(<span class="keyword">true</span>);</div><div class="line">            <span class="comment">//使用timer来定时执行，秒表计数，每100毫秒，执行一次increment方法</span></div><div class="line">            timer.scheduleAtFixedRate(<span class="keyword">new</span> TimerTask() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    increment();</div><div class="line">                &#125;</div><div class="line">            &#125;, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 停止秒表</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</div><div class="line">        timer.cancel();</div><div class="line">        timer = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 得到当前秒表的时间</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">getDisplay</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> String.format(<span class="string">"%d:%02d:%02d,%d"</span>, hr, min, sec, fract);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 自增方法</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (fract &lt; <span class="number">9</span>) &#123;</div><div class="line">            fract++;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            fract = <span class="number">0</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (sec &lt; <span class="number">59</span>) &#123;</div><div class="line">                sec++;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                sec = <span class="number">0</span>;</div><div class="line">                <span class="keyword">if</span> (min &lt; <span class="number">59</span>) &#123;</div><div class="line">                    min++;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    min = <span class="number">0</span>;</div><div class="line">                    hr++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>界面类：<code>StopWatchFrame.java</code><br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhengshouzi on 2015/11/20.</div><div class="line"> */</div><div class="line"><span class="keyword">package</span> stopwatch;</div><div class="line"><span class="keyword">import</span> java.awt.*;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</div><div class="line"><span class="keyword">import</span> java.net.URL;</div><div class="line"><span class="keyword">import</span> java.util.Timer;</div><div class="line"><span class="keyword">import</span> java.util.TimerTask;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.swing.*;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.scxml2.Context;</div><div class="line"><span class="keyword">import</span> org.apache.commons.scxml2.Evaluator;</div><div class="line"><span class="keyword">import</span> org.apache.commons.scxml2.SCXMLExecutor;</div><div class="line"><span class="keyword">import</span> org.apache.commons.scxml2.TriggerEvent;</div><div class="line"><span class="keyword">import</span> org.apache.commons.scxml2.env.SimpleErrorReporter;</div><div class="line"><span class="keyword">import</span> org.apache.commons.scxml2.env.jexl.JexlEvaluator;</div><div class="line"><span class="keyword">import</span> org.apache.commons.scxml2.io.SCXMLReader;</div><div class="line"><span class="keyword">import</span> org.apache.commons.scxml2.model.ModelException;</div><div class="line"><span class="keyword">import</span> org.apache.commons.scxml2.model.SCXML;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopWatchFrame</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> JLabel displayLabel;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> JButton startButton;</div><div class="line">    <span class="keyword">private</span> JButton stopButton;</div><div class="line">    <span class="keyword">private</span> JButton resetButton;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> SCXMLExecutor executor;</div><div class="line">    <span class="keyword">private</span> StopWatchEntity stopWatchEntity;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">new</span> StopWatchFrame();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StopWatchFrame</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(<span class="string">"SCXML StopWatch"</span>);</div><div class="line">        <span class="comment">//初始化状态机</span></div><div class="line">        initStopWatch();</div><div class="line">        <span class="comment">//初始化界面</span></div><div class="line">        initUI();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 监听器需要执行的方法，自动调用</div><div class="line">     * <span class="doctag">@param</span> event 事件源</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent event)</span> </span>&#123;</div><div class="line">        <span class="comment">//得到绑定在每个按钮上的命令</span></div><div class="line">        String command = event.getActionCommand();</div><div class="line">        <span class="comment">//对各个命令进行判断，在执行相应的内容</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="string">"START"</span>.equals(command)) &#123;</div><div class="line">                <span class="comment">//生成watch.start事件，将转到running状态</span></div><div class="line">                executor.triggerEvent(<span class="keyword">new</span> TriggerEvent(<span class="string">"watch.start"</span>, TriggerEvent.SIGNAL_EVENT));</div><div class="line">                <span class="comment">//设置一些列按钮的可见性</span></div><div class="line">                startButton.setEnabled(<span class="keyword">false</span>);</div><div class="line">                stopButton.setEnabled(<span class="keyword">true</span>);</div><div class="line">                resetButton.setEnabled(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"STOP"</span>.equals(command)) &#123;</div><div class="line">                <span class="comment">//生成watch.stop事件，将转到stoped状态</span></div><div class="line">                executor.triggerEvent(<span class="keyword">new</span> TriggerEvent(<span class="string">"watch.stop"</span>, TriggerEvent.SIGNAL_EVENT));</div><div class="line"></div><div class="line">                startButton.setEnabled(<span class="keyword">true</span>);</div><div class="line">                stopButton.setEnabled(<span class="keyword">false</span>);</div><div class="line">                resetButton.setEnabled(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"RESET"</span>.equals(command)) &#123;</div><div class="line">                <span class="comment">//生成watch.reset事件，将转到reset状态</span></div><div class="line">                executor.triggerEvent(<span class="keyword">new</span> TriggerEvent(<span class="string">"watch.reset"</span>, TriggerEvent.SIGNAL_EVENT));</div><div class="line"></div><div class="line">                startButton.setEnabled(<span class="keyword">true</span>);</div><div class="line">                stopButton.setEnabled(<span class="keyword">false</span>);</div><div class="line">                resetButton.setEnabled(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (ModelException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化秒表</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initStopWatch</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//得到资源文件路径</span></div><div class="line">        <span class="keyword">final</span>  URL STOPWATCH = <span class="keyword">this</span>.getClass().getResource(<span class="string">"stopwatch1.xml"</span>);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//实例化数据模型解析器</span></div><div class="line">        Evaluator evaluator = <span class="keyword">new</span> JexlEvaluator();</div><div class="line"></div><div class="line">        <span class="comment">//实例化引擎</span></div><div class="line">        executor = <span class="keyword">new</span> SCXMLExecutor(evaluator, <span class="keyword">null</span>, <span class="keyword">new</span> SimpleErrorReporter());</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//加载资源文件,实例化到一个SCXML对象，两者之间一一对应</span></div><div class="line">            SCXML scxml = SCXMLReader.read(STOPWATCH);</div><div class="line"></div><div class="line">            <span class="comment">//将这样的一个SCXML实例，作为状态机对象，传入到引擎里面。</span></div><div class="line">            executor.setStateMachine(scxml);</div><div class="line"></div><div class="line">            <span class="comment">//设置引擎执行的根上下文</span></div><div class="line">            Context rootContext = evaluator.newContext(<span class="keyword">null</span>);</div><div class="line">            <span class="keyword">final</span> StopWatchEntity stopWatchEntity = <span class="keyword">new</span> StopWatchEntity();</div><div class="line">            rootContext.set(<span class="string">"stopWatchEntity"</span>, stopWatchEntity);</div><div class="line">            executor.setRootContext(rootContext);</div><div class="line"></div><div class="line">            <span class="comment">//设置当前对象</span></div><div class="line">            <span class="keyword">this</span>.stopWatchEntity = stopWatchEntity;</div><div class="line"></div><div class="line">            <span class="comment">//开始启动流程</span></div><div class="line">            executor.go();</div><div class="line"></div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化界面</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initUI</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        JPanel mainPanel = <span class="keyword">new</span> JPanel();</div><div class="line">        mainPanel.setLayout(<span class="keyword">new</span> BorderLayout());</div><div class="line">        setContentPane(mainPanel);</div><div class="line"></div><div class="line">        JPanel contentPanel = <span class="keyword">new</span> JPanel();</div><div class="line">        contentPanel.setLayout(<span class="keyword">new</span> FlowLayout());</div><div class="line">        displayLabel = <span class="keyword">new</span> JLabel(<span class="string">"0:00:00,000"</span>);</div><div class="line">        displayLabel.setFont(<span class="keyword">new</span> Font(Font.DIALOG,<span class="number">100</span>,<span class="number">50</span>));</div><div class="line">        contentPanel.add(displayLabel, BorderLayout.CENTER);</div><div class="line"></div><div class="line">        mainPanel.add(contentPanel, BorderLayout.CENTER);</div><div class="line"></div><div class="line">        JPanel buttonPanel = <span class="keyword">new</span> JPanel();</div><div class="line">        buttonPanel.setLayout(<span class="keyword">new</span> FlowLayout());</div><div class="line"></div><div class="line">        startButton = createButton(<span class="string">"START"</span>, <span class="string">"Start"</span>);</div><div class="line">        buttonPanel.add(startButton);</div><div class="line"></div><div class="line">        stopButton = createButton(<span class="string">"STOP"</span>, <span class="string">"Stop"</span>);</div><div class="line">        stopButton.setEnabled(<span class="keyword">false</span>);</div><div class="line">        buttonPanel.add(stopButton);</div><div class="line"></div><div class="line">        resetButton = createButton(<span class="string">"RESET"</span>, <span class="string">"Reset"</span>);</div><div class="line">        resetButton.setEnabled(<span class="keyword">false</span>);</div><div class="line">        buttonPanel.add(resetButton);</div><div class="line"></div><div class="line">        mainPanel.add(buttonPanel, BorderLayout.SOUTH);</div><div class="line"></div><div class="line"></div><div class="line">        setLocation(<span class="number">250</span>,<span class="number">300</span>);</div><div class="line">        setSize(<span class="number">400</span>,<span class="number">200</span>);</div><div class="line"></div><div class="line">        setResizable(<span class="keyword">true</span>);</div><div class="line">        setVisible(<span class="keyword">true</span>);</div><div class="line"></div><div class="line"></div><div class="line">        Timer displayTimer = <span class="keyword">new</span> Timer();</div><div class="line"></div><div class="line">        displayTimer.scheduleAtFixedRate(<span class="keyword">new</span> TimerTask() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                displayLabel.setText(stopWatchEntity.getDisplay());</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line"></div><div class="line">        setDefaultCloseOperation(EXIT_ON_CLOSE);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 创建一个按钮</div><div class="line">     * <span class="doctag">@param</span> command 按钮的命令</div><div class="line">     * <span class="doctag">@param</span> text 按钮上的文本</div><div class="line">     * <span class="doctag">@return</span> 返回一个新建的按钮</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> JButton <span class="title">createButton</span><span class="params">(<span class="keyword">final</span> String command, <span class="keyword">final</span> String text)</span> </span>&#123;</div><div class="line">        JButton button = <span class="keyword">new</span> JButton(text);</div><div class="line">        button.setActionCommand(command);</div><div class="line">        button.addActionListener(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">return</span> button;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="程序结果分析"><a href="#程序结果分析" class="headerlink" title="程序结果分析"></a>程序结果分析</h2><p><img src="http://img.blog.csdn.net/20151128220512257" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20151128220538214" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20151128220550309" alt="这里写图片描述"></p>
<p>程序界面类中的定时器一直在访问 StopWatchEntity的getDisplay属性，来得到秒表的值。我们通过Start,Stop,Reset来控制秒表的状态，在进入某一个状态机的时候，我们调用这个状态机根上下文设置的stopWatcheEntity对象相应的方法，来改变秒表的值。当秒表一直处于某一个状态的时候，我们又通过点击按钮来改变秒表的状态。</p>
<h1 id="编程方式2"><a href="#编程方式2" class="headerlink" title="编程方式2"></a>编程方式2</h1><h2 id="画状态图-1"><a href="#画状态图-1" class="headerlink" title="画状态图"></a>画状态图</h2><pre><code>图和方式一一样
</code></pre><h2 id="编写状态图xml文件"><a href="#编写状态图xml文件" class="headerlink" title="编写状态图xml文件"></a>编写状态图xml文件</h2><p><code>stopwatch2.xml</code>，这个类里面没有了srcipt等标签。<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">scxml</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2005/07/scxml"</span></span></div><div class="line">       <span class="attr">version</span>=<span class="string">"1.0"</span></div><div class="line">       <span class="attr">initial</span>=<span class="string">"reset"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">state</span> <span class="attr">id</span>=<span class="string">"reset"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">event</span>=<span class="string">"watch.start"</span>   <span class="attr">target</span>=<span class="string">"running"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">state</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">state</span> <span class="attr">id</span>=<span class="string">"running"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">event</span>=<span class="string">"watch.stop"</span>    <span class="attr">target</span>=<span class="string">"stopped"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">state</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">state</span> <span class="attr">id</span>=<span class="string">"stopped"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">event</span>=<span class="string">"watch.start"</span>   <span class="attr">target</span>=<span class="string">"running"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">event</span>=<span class="string">"watch.reset"</span>   <span class="attr">target</span>=<span class="string">"reset"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">state</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">scxml</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="编写程序控制状态转移-1"><a href="#编写程序控制状态转移-1" class="headerlink" title="编写程序控制状态转移"></a>编写程序控制状态转移</h2><p>需要操作的实体类（同时也是状态机类），用来约束秒表的行为：<code>StopWatchStateMachine.java</code>。这个类中的方法名字和上面的<code>StopWatchEntity.java</code>名字稍有不同，这个类里面的名字必须要和所对应的xml文件里面的状态名字相同。这是因为当状态发生转移的时候，进入某一个状态的时候，由框架自身根据反射机制去调用对应的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> stopwatch;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.scxml2.env.AbstractStateMachine;</div><div class="line"><span class="keyword">import</span> org.apache.commons.scxml2.model.ModelException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Timer;</div><div class="line"><span class="keyword">import</span> java.util.TimerTask;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopWatchStateMachine</span> <span class="keyword">extends</span> <span class="title">AbstractStateMachine</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_START = <span class="string">"watch.start"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_STOP = <span class="string">"watch.stop"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_RESET = <span class="string">"watch.reset"</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hr, min, sec, fract;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Timer timer;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StopWatchStateMachine</span><span class="params">()</span> <span class="keyword">throws</span> ModelException </span>&#123;</div><div class="line">        <span class="keyword">super</span>(StopWatchStateMachine.class.</div><div class="line">            getResource(<span class="string">"stopwatch3.xml"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 重置当前状态机，方法名和所在的状态名相同，又框架自己调用</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</div><div class="line">        hr = min = sec = fract=<span class="number">0</span>;</div><div class="line">        timer=<span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 运行秒表，方法名和所在的状态名相同，又框架自己调用</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">running</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (timer == <span class="keyword">null</span>) &#123;</div><div class="line">            timer = <span class="keyword">new</span> Timer(<span class="keyword">true</span>);</div><div class="line">            timer.scheduleAtFixedRate(<span class="keyword">new</span> TimerTask() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    increment();</div><div class="line">                &#125;</div><div class="line">            &#125;, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 停止秒表，方法名和所在的状态名相同，又框架自己调用</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopped</span><span class="params">()</span> </span>&#123;</div><div class="line">        timer.cancel();</div><div class="line">        timer = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 得到当前秒表的时间</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">getDisplay</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> String.format(<span class="string">"%d:%02d:%02d,%d"</span>, hr, min, sec, fract);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   <span class="comment">//只是做一个演示，不使用这个方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCurrentState</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getEngine().getStatus().getStates().iterator().next().getId();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 自增方法</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (fract &lt; <span class="number">9</span>) &#123;</div><div class="line">            fract++;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            fract = <span class="number">0</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (sec &lt; <span class="number">59</span>) &#123;</div><div class="line">                sec++;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                sec = <span class="number">0</span>;</div><div class="line">                <span class="keyword">if</span> (min &lt; <span class="number">59</span>) &#123;</div><div class="line">                    min++;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    min = <span class="number">0</span>;</div><div class="line">                    hr++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>StopWatchDisplay.java</code> 界面展现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> stopwatch;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.scxml2.model.ModelException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.swing.*;</div><div class="line"><span class="keyword">import</span> java.awt.*;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</div><div class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</div><div class="line"><span class="keyword">import</span> java.util.Timer;</div><div class="line"><span class="keyword">import</span> java.util.TimerTask;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopWatchDisplay</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span></div><div class="line">        <span class="keyword">implements</span> <span class="title">ActionListener</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> JLabel displayLabel;</div><div class="line">    <span class="keyword">private</span> JButton startButton;</div><div class="line">    <span class="keyword">private</span> JButton stopButton;</div><div class="line">    <span class="keyword">private</span> JButton resetButton;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> StopWatchStateMachine stopWatchStateMachine;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">new</span> StopWatchDisplay();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StopWatchDisplay</span><span class="params">()</span> <span class="keyword">throws</span> ModelException </span>&#123;</div><div class="line">        <span class="keyword">super</span>(<span class="string">"SCXML StopWatch StateMachine"</span>);</div><div class="line">        stopWatchStateMachine = <span class="keyword">new</span> StopWatchStateMachine();</div><div class="line">       initUI();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 监听器需要执行的方法，自动调用</div><div class="line">     * <span class="doctag">@param</span> event 事件源</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent event)</span> </span>&#123;</div><div class="line">        <span class="comment">//得到绑定在每个按钮上的命令</span></div><div class="line">        String command = event.getActionCommand();</div><div class="line">        <span class="comment">//对各个命令进行判断，在执行相应的内容</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> (<span class="string">"START"</span>.equals(command)) &#123;</div><div class="line">                <span class="comment">//生成watch.start事件，将转到running状态</span></div><div class="line">                stopWatchStateMachine.fireEvent(StopWatchStateMachine.EVENT_START);</div><div class="line">                <span class="comment">//设置一些列按钮的可见性</span></div><div class="line">                startButton.setEnabled(<span class="keyword">false</span>);</div><div class="line">                stopButton.setEnabled(<span class="keyword">true</span>);</div><div class="line">                resetButton.setEnabled(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"STOP"</span>.equals(command)) &#123;</div><div class="line">                <span class="comment">//生成watch.stop事件，将转到stoped状态</span></div><div class="line">                stopWatchStateMachine.fireEvent(StopWatchStateMachine.EVENT_STOP);</div><div class="line"></div><div class="line">                startButton.setEnabled(<span class="keyword">true</span>);</div><div class="line">                stopButton.setEnabled(<span class="keyword">false</span>);</div><div class="line">                resetButton.setEnabled(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"RESET"</span>.equals(command)) &#123;</div><div class="line">                <span class="comment">//生成watch.reset事件，将转到reset状态</span></div><div class="line">                stopWatchStateMachine.fireEvent(StopWatchStateMachine.EVENT_RESET);</div><div class="line"></div><div class="line">                startButton.setEnabled(<span class="keyword">true</span>);</div><div class="line">                stopButton.setEnabled(<span class="keyword">false</span>);</div><div class="line">                resetButton.setEnabled(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化界面</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initUI</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        JPanel mainPanel = <span class="keyword">new</span> JPanel();</div><div class="line">        mainPanel.setLayout(<span class="keyword">new</span> BorderLayout());</div><div class="line">        setContentPane(mainPanel);</div><div class="line"></div><div class="line">        JPanel contentPanel = <span class="keyword">new</span> JPanel();</div><div class="line">        contentPanel.setLayout(<span class="keyword">new</span> FlowLayout());</div><div class="line">        displayLabel = <span class="keyword">new</span> JLabel(<span class="string">"0:00:00,000"</span>);</div><div class="line">        displayLabel.setFont(<span class="keyword">new</span> Font(Font.DIALOG, <span class="number">100</span>, <span class="number">50</span>));</div><div class="line">        contentPanel.add(displayLabel, BorderLayout.CENTER);</div><div class="line"></div><div class="line">        mainPanel.add(contentPanel, BorderLayout.CENTER);</div><div class="line"></div><div class="line">        JPanel buttonPanel = <span class="keyword">new</span> JPanel();</div><div class="line">        buttonPanel.setLayout(<span class="keyword">new</span> FlowLayout());</div><div class="line"></div><div class="line">        startButton = createButton(<span class="string">"START"</span>, <span class="string">"Start"</span>);</div><div class="line">        buttonPanel.add(startButton);</div><div class="line"></div><div class="line">        stopButton = createButton(<span class="string">"STOP"</span>, <span class="string">"Stop"</span>);</div><div class="line">        stopButton.setEnabled(<span class="keyword">false</span>);</div><div class="line">        buttonPanel.add(stopButton);</div><div class="line"></div><div class="line">        resetButton = createButton(<span class="string">"RESET"</span>, <span class="string">"Reset"</span>);</div><div class="line">        resetButton.setEnabled(<span class="keyword">false</span>);</div><div class="line">        buttonPanel.add(resetButton);</div><div class="line"></div><div class="line">        mainPanel.add(buttonPanel, BorderLayout.SOUTH);</div><div class="line"></div><div class="line"></div><div class="line">        setLocation(<span class="number">250</span>, <span class="number">300</span>);</div><div class="line">        setSize(<span class="number">400</span>,<span class="number">200</span>);</div><div class="line"></div><div class="line">        setResizable(<span class="keyword">true</span>);</div><div class="line">        setVisible(<span class="keyword">true</span>);</div><div class="line"></div><div class="line"></div><div class="line">        Timer displayTimer = <span class="keyword">new</span> Timer();</div><div class="line"></div><div class="line">        displayTimer.scheduleAtFixedRate(<span class="keyword">new</span> TimerTask() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                displayLabel.setText(stopWatchStateMachine.getDisplay());</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line"></div><div class="line">        setDefaultCloseOperation(EXIT_ON_CLOSE);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 创建一个按钮</div><div class="line">     * <span class="doctag">@param</span> command 按钮的命令</div><div class="line">     * <span class="doctag">@param</span> text 按钮上的文本</div><div class="line">     * <span class="doctag">@return</span> 返回一个新建的按钮</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> JButton <span class="title">createButton</span><span class="params">(<span class="keyword">final</span> String command, <span class="keyword">final</span> String text)</span> </span>&#123;</div><div class="line">        JButton button = <span class="keyword">new</span> JButton(text);</div><div class="line">        button.setActionCommand(command);</div><div class="line">        button.addActionListener(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">return</span> button;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="程序结果分析-1"><a href="#程序结果分析-1" class="headerlink" title="程序结果分析"></a>程序结果分析</h2><p><img src="http://img.blog.csdn.net/20151129173926067" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20151129173935597" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20151129173946297" alt="这里写图片描述"></p>
<p>程序界面类中的定时器一直在访问 StopWatctStateMachine的getDisplay方法，来得到秒表的值。我们通过Start,Stop,Reset来控制秒表的状态，在进入某一个状态机的时候，由框架自动调用对应状态名相同的的函数，来改变秒表的值。当秒表一直处于某一个状态的时候，我们又通过点击按钮来改变秒表的状态。</p>
<p>源代码<code>AbstractStateMachine.java</code>中对应的调用语句如下<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">      * &#123;<span class="doctag">@inheritDoc</span>&#125;</div><div class="line">      */</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEntry</span><span class="params">(<span class="keyword">final</span> EnterableState entered)</span> </span>&#123;</div><div class="line">         invoke(entered.getId());</div><div class="line">     &#125;</div><div class="line">      <span class="comment">/**</span></div><div class="line">  * Invoke the no argument method with the following name.</div><div class="line">  *</div><div class="line">  * <span class="doctag">@param</span> methodName The method to invoke.</div><div class="line">  * <span class="doctag">@return</span> Whether the invoke was successful.</div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">invoke</span><span class="params">(<span class="keyword">final</span> String methodName)</span> </span>&#123;</div><div class="line">     Class&lt;?&gt; clas = <span class="keyword">this</span>.getClass();</div><div class="line">     <span class="keyword">try</span> &#123;</div><div class="line">         Method method = clas.getDeclaredMethod(methodName, SIGNATURE);</div><div class="line">         method.invoke(<span class="keyword">this</span>, PARAMETERS);</div><div class="line">     &#125; <span class="keyword">catch</span> (SecurityException se) &#123;</div><div class="line">         logError(se);</div><div class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">     &#125; <span class="keyword">catch</span> (NoSuchMethodException nsme) &#123;</div><div class="line">         logError(nsme);</div><div class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">     &#125; <span class="keyword">catch</span> (IllegalArgumentException iae) &#123;</div><div class="line">         logError(iae);</div><div class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">     &#125; <span class="keyword">catch</span> (IllegalAccessException iae) &#123;</div><div class="line">         logError(iae);</div><div class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">     &#125; <span class="keyword">catch</span> (InvocationTargetException ite) &#123;</div><div class="line">         logError(ite);</div><div class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h1 id="两种方式的总结"><a href="#两种方式的总结" class="headerlink" title="两种方式的总结"></a>两种方式的总结</h1><p>其实第二种方式是官网给出的例子里面的，同时也是更贴近状态机对象的思想。但是也有如下缺点（也许）<br>1、 <code>stopWatchStateMachine.fireEvent(StopWatchStateMachine.EVENT_START);</code>只有这一个触发事件的函数，不能传递数据。而第一种方式里面的<code>executor.triggerEvent(new TriggerEvent(“watch.start”, TriggerEvent.SIGNAL_EVENT),数据);</code>可以通过触发时间传递数据进入状态机里面。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Multiple representations of the same entity are being merged解决方法]]></title>
      <url>http://thinerzq.com/2016/02/01/hibernate/Multiple-representations-of-the-same-entity-are-being-merged%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>最近在写网站过程中发现自己hibernate学的还不到家，好多错误，特地来记录一下这个错误:<br><code>java.lang.IllegalStateException: Multiple representations of the same entity are being merged.</code></p>
<h1 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h1><figure class="highlight"><table><tr><td class="code"><pre><div class="line"> java.lang.IllegalStateException: Multiple representations of the same entity [com.sysu.workflow.entity.FormEntity#5] are being merged. Detached: [com.sysu.workflow.entity.FormEntity@79bc3f5b]; Detached: [com.sysu.workflow.entity.FormEntity@7e5533c0]</div><div class="line">    userworkit5_.itemId as itemId1_10_3_,</div><div class="line">at org.hibernate.event.internal.EntityCopyNotAllowedObserver.entityCopyDetected(EntityCopyNotAllowedObserver.java:51)</div><div class="line">    userworkit5_.itemAssignee as itemAssi7_10_3_,</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h1><blockquote>
<p>因为试图给 某一个new 的Transient对象 的某一个属性赋一个 已经Persistent 对象或者Detached 对象值。导致最后save 或者merge 这个Transient对象报这个错误。</p>
</blockquote>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>这应该算是Hibernate 自身的一个bug ,已经在4.2.15版本中<a href="https://hibernate.atlassian.net/browse/HHH-9261" target="_blank" rel="external">解决</a>了</p>
<blockquote>
<p>1、更新hibernate版本到4.2.15 以上</p>
<p>2、在hibernate的配置文件中添加如下属性：<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.event.merge.entity_copy_observer"</span>&gt;</span>allow<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果使用的Spring 管理hibernate， 在你的spring的数据源中配置<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.event.merge.entity_copy_observer"</span>&gt;</span>allow<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p>hibernate还是有点复杂的。路漫漫其修远兮….</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Apache Commons-SCXML系列之 HelloWorld ]]></title>
      <url>http://thinerzq.com/2016/01/28/Apache%20Commons/Apache-Commons-SCXML%E7%B3%BB%E5%88%97%E4%B9%8B-HelloWorld/</url>
      <content type="html"><![CDATA[<p>Commons-SCXML 是一个状态机框架，<br><br><br>阅读本文之前，最好有对UML状态机有一个基本认识</p>
<h1 id="编程思路："><a href="#编程思路：" class="headerlink" title="编程思路："></a>编程思路：</h1><blockquote>
<ol>
<li><font color="blue">先画出状态图（uml状态图）</font>：（这一步只是为了能直观的表现状态的变化，可以随便在纸上画或者使用EA，Rose等工具，）</li>
<li><font color="blue"> 编写状态图xml文件定义</font>：根据画的状态图，编写对应的xml文件。</li>
<li><font color="blue">编写程序加载xml文件</font>，编写界面，控制状态图的状态转移。</li>
</ol>
</blockquote>
<p>我们通过一系列的例子来讲学习SCXML标准和Commons-SCXML框架。<br><a id="more"></a></p>
<h1 id="HelloWorld例子"><a href="#HelloWorld例子" class="headerlink" title="HelloWorld例子"></a>HelloWorld例子</h1><h2 id="画出状态图"><a href="#画出状态图" class="headerlink" title="画出状态图"></a>画出状态图</h2><blockquote>
<p>本例比较简单就不画图了</p>
</blockquote>
<h2 id="编写状态图xml文件"><a href="#编写状态图xml文件" class="headerlink" title="编写状态图xml文件"></a>编写状态图xml文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">scxml</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2005/07/scxml"</span></span></div><div class="line">       <span class="attr">version</span>=<span class="string">"1.0"</span> <span class="attr">inital</span>=<span class="string">"end"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">final</span> <span class="attr">id</span>=<span class="string">"end"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">onentry</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">log</span> <span class="attr">expr</span>=<span class="string">" 'entry  final state end ' "</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">log</span> <span class="attr">expr</span>=<span class="string">"'hello world'"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">onentry</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">onexit</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">log</span> <span class="attr">expr</span>=<span class="string">" 'exit  final state end ' "</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">onexit</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">final</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">scxml</span>&gt;</span></div></pre></td></tr></table></figure>
<p>说明：如果你用的IDE在xmlns上面有报错，不用管它。</p>
<h2 id="编程控制转移"><a href="#编程控制转移" class="headerlink" title="编程控制转移"></a>编程控制转移</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">package</span> helloworld;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line"> * Created with IntelliJ IDEA</div><div class="line"> * Date: 2015/11/19</div><div class="line"> * Time: 20:53</div><div class="line"> * User: ThinerZQ</div><div class="line"> * GitHub: &lt;a&gt;https://github.com/ThinerZQ&lt;/a&gt;</div><div class="line"> * Blog: &lt;a&gt;http://thinerzq.me&lt;/a&gt;</div><div class="line"> * Email: 601097836@qq.com</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.scxml2.SCXMLExecutor;</div><div class="line"><span class="keyword">import</span> org.apache.commons.scxml2.io.SCXMLReader;</div><div class="line"><span class="keyword">import</span> org.apache.commons.scxml2.model.SCXML;</div><div class="line"><span class="keyword">import</span> java.net.URL;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//通过加载HelloWorld类的类加载器加载helloworld.xml资源文件，得到URL</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> URL HELLOWORLD = HelloWorld.class.getResource(<span class="string">"helloworld.xml"</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//得到xml文件所对应的 SCXML对象</span></div><div class="line">        SCXML scxml = SCXMLReader.read(HELLOWORLD);</div><div class="line"></div><div class="line">        <span class="comment">//实例化状态机引擎，</span></div><div class="line">        SCXMLExecutor executor = <span class="keyword">new</span> SCXMLExecutor();</div><div class="line"></div><div class="line">        <span class="comment">//将得到的SCXML对象，交给状态机引擎管理</span></div><div class="line">        executor.setStateMachine(scxml);</div><div class="line"></div><div class="line">        <span class="comment">//然后引擎调用.go()方法启动状态机。</span></div><div class="line">        executor.go();</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##3.4 分析<br><img src="http://img.blog.csdn.net/20151127210902233" alt="这里写图片描述"></p>
<blockquote>
<p>上面的输出内容，和xml文件<code>log</code>标签里面定义的一样。<code>log</code>是一个记录日志的可执行内容。</p>
</blockquote>
<p>接下来准备再写一个 秒表和请假流程的例子，再把相关的标签和属性值约束给汉化了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Apache Commons SCXML系列之项目介绍]]></title>
      <url>http://thinerzq.com/2016/01/28/Apache%20Commons/Apache-Commons-SCXML%E7%B3%BB%E5%88%97%E4%B9%8B%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>Apache Commons 工具包比较多，具体可以参看<a href="http://commons.apache.org/" target="_blank" rel="external">Apache Commons官网</a>。这里只讨论SCXML</p>
<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ :"></a>FAQ :</h1><p><br></p>
<h2 id="SCXML-是什么？"><a href="#SCXML-是什么？" class="headerlink" title="SCXML 是什么？"></a>SCXML 是什么？</h2><blockquote>
<p>SCXML（<font color="red">State Chart XML</font>），简单地说就是状态图的xml描述文件。这里的状态图和UML里面的状态图是基本一致的，都是继承自<a href="http://www.wisdom.weizmann.ac.il/~harel/%20%E4%B8%BB%E9%A1%B5" target="_blank" rel="external">Harel</a> <a href="http://www.wisdom.weizmann.ac.il/~harel/SCANNED.PAPERS/Statecharts.pdf" target="_blank" rel="external">Start Chart</a>。我还没有看到不一致的地方，欢迎指正。</p>
</blockquote>
<a id="more"></a>
<h2 id="xml的描述文件？那么一个大家都遵从的标准是什么？"><a href="#xml的描述文件？那么一个大家都遵从的标准是什么？" class="headerlink" title="xml的描述文件？那么一个大家都遵从的标准是什么？"></a>xml的描述文件？那么一个大家都遵从的标准是什么？</h2><blockquote>
<p>标准就是W3C制定的的标准：<a href="http://www.w3.org/TR/scxml/" target="_blank" rel="external">State Chart XML(SCXML):State Machine Notation for Control Abstraction</a>下面我简要的介绍一下这个标准，如下图所示：红框里面的标签，每一个链接里面都有标签的具体介绍（子标签和属性值等）。就是这个标准。<br><img src="http://img.blog.csdn.net/20151126102750992" alt="这里写图片描述"></p>
</blockquote>
<p><br></p>
<h2 id="Apache-做什么了？"><a href="#Apache-做什么了？" class="headerlink" title="Apache 做什么了？"></a>Apache 做什么了？</h2><blockquote>
<p>W3C只是制定了这个标准，告诉大家怎么做。Apache组织成立了SCXML项目，对这个标准进行了java语言的实现，of course,其他组织个人有其他语言的实现等等。</p>
</blockquote>
<h2 id="都有哪些实现？看下表"><a href="#都有哪些实现？看下表" class="headerlink" title="都有哪些实现？看下表"></a>都有哪些实现？看下表</h2><table>
<thead>
<tr>
<th>名字</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/jp-embedded/scxmlcc" target="_blank" rel="external">scxmlcc</a></td>
<td style="text-align:center">用于将SCXML图生成c++代码</td>
</tr>
<tr>
<td><a href="http://commons.apache.org/proper/commons-scxml/" target="_blank" rel="external">Apache Commons SCXML</a></td>
<td style="text-align:center">一个基于java语言的解析和执行SCXML图的标准类库</td>
</tr>
<tr>
<td><a href="https://github.com/pelatimtt/Legian" target="_blank" rel="external">Legian</a></td>
<td style="text-align:center">一个java语言实现的SCXML引擎，使用Rhino作为javascript引擎，它还支持其他的特性，和W3C的标准并不完全一致</td>
</tr>
<tr>
<td><a href="http://qt.gitorious.org/qt-labs/scxml" target="_blank" rel="external">Qt SCXML</a></td>
<td style="text-align:center">Qt里面的状态机，将信号和槽与状态机紧密的结合起来了</td>
</tr>
<tr>
<td><a href="https://github.com/jroxendal/PySCXML" target="_blank" rel="external">PySCXML</a></td>
<td style="text-align:center">一个Python的实现，支持多种通信，包括的WebSockets和SOAP。兼容性好。还支持ECMAScript的数据模型。 （最后发布日期2013年）</td>
</tr>
<tr>
<td>The PySCXML Console</td>
<td style="text-align:center">一个基于web的交互式SCXML控制台，可以运行SCXML文档。支持ECMAScript datamodel。</td>
</tr>
<tr>
<td><a href="https://github.com/gdtiti/scxml4flex" target="_blank" rel="external">SCXML4Flex</a></td>
<td style="text-align:center">ActionScript的实现</td>
</tr>
<tr>
<td><a href="https://github.com/fmorbini/scxmlgui" target="_blank" rel="external">SCXMLgui</a></td>
<td style="text-align:center">java实现的SCXML图可视化编辑器.</td>
</tr>
<tr>
<td><a href="https://github.com/jbeard4/SCION" target="_blank" rel="external">SCION</a></td>
<td style="text-align:center">javascript实现</td>
</tr>
<tr>
<td><a href="https://github.com/Touffy/JSSCxml" target="_blank" rel="external">JSSCxml</a></td>
<td style="text-align:center">这是一个基于Web浏览器的实现，目前还处于开发阶段。和标准高度一致,良好的支持DOM事件，目前只支持ECMAScript datamodel。</td>
</tr>
<tr>
<td><a href="https://github.com/tklab-tud/uscxml" target="_blank" rel="external">uSCXML</a></td>
<td style="text-align:center">Standard-compliant SCXML implementation in C/C++ with language bindings for Java and C#. Full ECMAScript support (all tests passed) via JavaScriptCore or Google’s v8, additional LUA and Prolog datamodels, only rudimentary support for XPath datamodel.</td>
</tr>
</tbody>
</table>
<p>ECMAScript就是javascript语言的标准。</p>
<h2 id="这个库-可以用来做什么？"><a href="#这个库-可以用来做什么？" class="headerlink" title="这个库 可以用来做什么？"></a>这个库 可以用来做什么？</h2><blockquote>
<p>如果你<font color="red">画了一个UML状态图，想要实现它</font>？你怎么办。如果使用这个库的话，首先定义状态图的xml文件，然后编程加载xml文件执行，由你来写界面控制状态机的流转。我们都知道<font color="red">一切事物都可以看做对象，那么一切对象都有其生命周期，那么状态机就能力描述一切对象从生到死的过程</font>。你就能通过（程序）界面控制这个对象的生命周期。<font color="blue">如果你不知道什么是状态机的，快去百度百科吧。</font></p>
</blockquote>
<h1 id="比较有用的链接"><a href="#比较有用的链接" class="headerlink" title="比较有用的链接"></a>比较有用的链接</h1><blockquote>
<ol>
<li><p>Apache Commons<br> SCXML官网：<a href="http://commons.apache.org/proper/commons-scxml/" target="_blank" rel="external">http://commons.apache.org/proper/commons-scxml/</a></p>
</li>
<li><p>Apache Commons SCXML Github：<a href="https://github.com/apache/commons-scxml" target="_blank" rel="external">https://github.com/apache/commons-scxml</a></p>
</li>
<li><p>StackOverfole上面关于这方面的问题：<a href="http://stackoverflow.com/questions/tagged/scxml" target="_blank" rel="external">http://stackoverflow.com/questions/tagged/scxml</a></p>
</li>
<li><p>可以在线编辑SCXML文件并运行和查看监控信息的网站：<a href="http://www.ling.gu.se/~lager/Labs/SCXML-Lab/" target="_blank" rel="external">http://www.ling.gu.se/~lager/Labs/SCXML-Lab/</a></p>
</li>
</ol>
</blockquote>
<h1 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h1><p>截止日期：2015-11-26，官网上面显示最新版本0.9（发布日期：07，08年左右），这个版本是用Ant打包编译的，整个项目包名是：com.apache.commons.scxml.*</p>
<p>现在官网RoadMap上面的计划显示推出scxml2.0，目前GitHub源代码使用Maven编译，整个项目的包名是：com.apache.commons.scxml2.*，变化很大，但是Apache 目前并没有正式发布这个库（Maven 中央仓库和官网上面都没有）。<br>我自己下载源码编译了一下，想直接使用的话可以点击这里下载：<a href="http://pan.baidu.com/s/1nt90nLB" target="_blank" rel="external">SCXML2.0</a>。我现在正在使用，可以说基本上都实现了标准里面的所有描述。</p>
<blockquote>
<p>提醒一下：由于这个库依赖于其他的Commons库，而这个库在Maven上面找不到，Maven就不能分析依赖关系，所有需要自己手动下载依赖的jar包。所依赖的jar包可以参考这里：<a href="http://commons.apache.org/proper/commons-scxml/dependencies.html" target="_blank" rel="external">项目依赖</a>，可以之间在Maven仓库或Gradle里面添加这些依赖的jar包就行了。或者你不会使用自动构建工具，可以点击这里下载：<a href="http://pan.baidu.com/s/1bnsjHWN" target="_blank" rel="external">项目需要的jar包</a></p>
</blockquote>
<p>后序会慢慢通过例子来介绍怎么编写xml文件，这个工具包怎么使用，如果有时间何以来分析一下源代码。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CrowdSourcing 分析]]></title>
      <url>http://thinerzq.com/2016/01/28/CrowdSourcing/CrowdSourcing-%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="1、我的理解"><a href="#1、我的理解" class="headerlink" title="1、我的理解"></a>1、我的理解</h1><blockquote>
<p>众包：指的是一个公司或机构把过去由员工执行的工作任务，以自由自愿的形式外包给非特定的（而且通常是大型的）大众网络的做法，就是原来是公司做的事情，出于资金或者工作质量的考虑，通过游戏<a href="http://www.baike.com/wiki/GOOGLE+IMAGE+LABELER" target="_blank" rel="external">ImageLabeler</a>，社区如、<a href="http://www.zhihu.com/" target="_blank" rel="external">知乎</a>,<a href="">维基百科</a>，竞赛<a href="https://www.kaggle.com/" target="_blank" rel="external">kaggle</a>，任务平台<a href="https://www.mturk.com/mturk/welcome" target="_blank" rel="external">Amazon turk</a>,猪八戒网等手段交给整个互联网的人去做的一种商业模式。</p>
</blockquote>
<a id="more"></a>
<h1 id="2、关于众包的学术研究"><a href="#2、关于众包的学术研究" class="headerlink" title="2、关于众包的学术研究"></a>2、关于众包的学术研究</h1><p>目前关于众包的研究涉及到多个方面：</p>
<h2 id="2-1、探索商业模式"><a href="#2-1、探索商业模式" class="headerlink" title="2.1、探索商业模式"></a>2.1、探索商业模式</h2><p>关于商业模式是研究商业的人讨论的，本文从计算机的角度来讨论众包。</p>
<h2 id="2-2、众包的计算机支持过程"><a href="#2-2、众包的计算机支持过程" class="headerlink" title="2.2、众包的计算机支持过程"></a>2.2、众包的计算机支持过程</h2><p>简而言之，<font color="red">众包就是把任务交给人去做</font>，那么这个众包的核心就可以看做是怎么处理好人和任务的关系，更好的协调两者。<br>人的思想，行为是不确定的，在此处暂不考虑，下面我们从任务的角度来考虑众包。</p>
<h3 id="2-2-1、简单任务（Mirco-Task）"><a href="#2-2-1、简单任务（Mirco-Task）" class="headerlink" title="2.2.1、简单任务（Mirco-Task）"></a>2.2.1、简单任务（Mirco-Task）</h3><p>所谓简单任务大概就是由一个人能在几秒钟到几分钟内能够独立完成的任务，这种简单任务的分配没有涉及到人与人之间的协作，仅仅由一个人完成。例如，我们经常听说的给图片加标签，识别出图片内容，回答一个问题等等。</p>
<h3 id="2-2-2、复杂任务（Complex-Task）"><a href="#2-2-2、复杂任务（Complex-Task）" class="headerlink" title="2.2.2、复杂任务（Complex-Task）"></a>2.2.2、复杂任务（Complex-Task）</h3><p>与简单任务相对就是复杂任务，复杂任务就是那些一个人完成不了，或者一个人完成需要很长时间的任务。已知目前的各种众包平台还不具备解决这类型任务的能力，这也是本文主要讨论的问题。<font color="red">怎么解决这些复杂任务是呢</font>？？有人提出了利用网络大众来将任务分解了，然后交给网络大众去做，最后由网络大众把任务合并成最初的原始任务。全程由网络大众参与,直到最后给出解决方案。<i>而猪八戒网上的复杂任务就是一个团队承包下来，然后在线下分工，做完了了再交给任务发包人</i>（这还是比较古老的方式）。</p>
<h3 id="2-2-3、怎么分解"><a href="#2-2-3、怎么分解" class="headerlink" title="2.2.3、怎么分解"></a>2.2.3、怎么分解</h3><p>一种是通过人工来将复杂任务（Complex-Task）分解成简单任务（Mirco-Task） ,通过不断的分解迭代，最终一个复杂的任务被分解成了多个可以由人在几秒钟中几分钟内独立完成的任务，最后利用自动化技术这些被解决的Mirco-Task 串联起来或者通过人工合并这些简单任务，形成一个完成的复杂任务的解决方式。</p>
<h2 id="2-3、众包的质量控制策略"><a href="#2-3、众包的质量控制策略" class="headerlink" title="2.3、众包的质量控制策略"></a>2.3、众包的质量控制策略</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[汉诺塔之python]]></title>
      <url>http://thinerzq.com/2016/01/26/python/%E6%B1%89%E8%AF%BA%E5%A1%94%E4%B9%8Bpython/</url>
      <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><blockquote>
<p>汉诺塔：有三根柱子，<font color="red">第一根柱子上面从上到下依次摆放着n个从小到大的圆盘</font>，第二和  第三根柱子是空的，遵循一定的<font color="red">游戏规则</font>，将第一根柱子上面的圆盘移动到第三根柱子上.游戏规则就是：移动过程中可以<font color="red">借助第二根柱子</font>，但是<font color="red">始终</font>不能够将<font color="red">大的盘子放在小的盘子之上</font>。</p>
</blockquote>
<a id="more"></a>
<p>简单的摆法如下图所示：<br><br><br><img src="http://wuzhiwei.net/articlePic/Tower_of_Hanoi.jpeg" alt="有三个盘子的移动方法"></p>
<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>解决汉诺塔问题，最常见的也是最容易想到的就是递归分解问题，<br>假设三根柱子分别是A,B,C，需要将A上的盘子移动到C上</p>
<blockquote>
<p>情况1、如果A上只有一个盘子，直接移动到C上。</p>
<p>情况2、如果A上有两个盘子，先将A上面的小的移动到B上(使用了C作为辅助)，再将大的移动到C上，最后将B上的盘子移动到C上。</p>
<p>情况3、如果A上有个三个盘子，(先将最小的移动到C上，第二小的移动到B上，再将C上的最小的移动到B上)<font color="red"><sup>[1]</sup></font>，(然后将A上留下的最大的移动到C上)<font color="red"><sup>[2]</sup></font>，(然后将B上的最小的移动到A上)<font color="red"><sup>[3]</sup></font>，然后将B上剩下的一个移动到C上，最后将A上的最小的移动到C上。</p>
</blockquote>
<p>让我们来看看情况3、<font color="red"><sup>[1]</sup></font>处使用了C作为辅助的柱子，先将A上的前2个移动到了B上(这里就是<b>情况2</b>)，<font color="red"><sup>[2]</sup></font>处直接将A上的，最后一个移动到了C上(这里就是<b>情况1</b>)，最后<font color="red"><sup>[3]</sup></font>处是用了A作为辅助的柱子，将B上的东西移动 到了C上(这里就是<b>情况2</b>，不同的是辅助的柱子不一样了)。</p>
<blockquote>
<p>总结：当有n个盘子的时候，首先将上面的n-1个借助C移动到B上，然后将A上的最后一个移动到C上，然后再借助A将B上的n-1个移动到C上。</p>
</blockquote>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># -*- coding: cp936 -*-  </span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hannoi</span><span class="params">(n,A,B,C)</span>:</span>  </div><div class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:  </div><div class="line">        print(A,<span class="string">" ----&gt; "</span>,C)  </div><div class="line">    <span class="keyword">else</span>:  </div><div class="line">        hannoi(n<span class="number">-1</span>,A,C,B)<span class="comment">#将前n-1个盘子从 A 移动到 B 上  </span></div><div class="line">        print(A,<span class="string">" ----&gt; "</span>,C)<span class="comment">#将最底下的一个胖子从 A 移动到 C 上  </span></div><div class="line">        hannoi(n<span class="number">-1</span>,B,A,C)<span class="comment">#将 B 上的n-1个盘子移动到 C 上  </span></div><div class="line">n=int(input(<span class="string">"请输入汉诺塔的层数："</span>))  </div><div class="line"></div><div class="line">hannoi(n,<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>)</div></pre></td></tr></table></figure>
<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><img src="/images/hannui_result1.png" alt="result"><br><img src="/images/hannui_result2.png" alt="result"><br><img src="/images/hannui_result3.png" alt="result"></p>
]]></content>
    </entry>
    
  
  
</search>
